L 1 "sound_task.c"
N//****************************************************************************
N//
N// sound_task.c - Sound playing task for the qs-autonomous example.
N//
N// Copyright (c) 2011-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//****************************************************************************
N
N#include "inc/hw_types.h"
L 1 "..\..\..\inc/hw_types.h" 1
N//*****************************************************************************
N//
N// hw_types.h - Common types and macros.
N//
N// Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_TYPES_H__
N#define __HW_TYPES_H__
N
N//*****************************************************************************
N//
N// Define a boolean type, and values for true and false.
N//
N//*****************************************************************************
Ntypedef unsigned char tBoolean;
N
N#ifndef true
N#define true 1
N#endif
N
N#ifndef false
N#define false 0
N#endif
N
N//*****************************************************************************
N//
N// Macros for hardware access, both direct and via the bit-band region.
N//
N//*****************************************************************************
N#define HWREG(x)                                                              \
N        (*((volatile unsigned long *)(x)))
X#define HWREG(x)                                                                      (*((volatile unsigned long *)(x)))
N#define HWREGH(x)                                                             \
N        (*((volatile unsigned short *)(x)))
X#define HWREGH(x)                                                                     (*((volatile unsigned short *)(x)))
N#define HWREGB(x)                                                             \
N        (*((volatile unsigned char *)(x)))
X#define HWREGB(x)                                                                     (*((volatile unsigned char *)(x)))
N#define HWREGBITW(x, b)                                                       \
N        HWREG(((unsigned long)(x) & 0xF0000000) | 0x02000000 |                \
N              (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITW(x, b)                                                               HWREG(((unsigned long)(x) & 0xF0000000) | 0x02000000 |                              (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITH(x, b)                                                       \
N        HWREGH(((unsigned long)(x) & 0xF0000000) | 0x02000000 |               \
N               (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITH(x, b)                                                               HWREGH(((unsigned long)(x) & 0xF0000000) | 0x02000000 |                              (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITB(x, b)                                                       \
N        HWREGB(((unsigned long)(x) & 0xF0000000) | 0x02000000 |               \
N               (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITB(x, b)                                                               HWREGB(((unsigned long)(x) & 0xF0000000) | 0x02000000 |                              (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N
N//*****************************************************************************
N//
N// Helper Macros for determining silicon revisions, etc.
N//
N// These macros will be used by Driverlib at "run-time" to create necessary
N// conditional code blocks that will allow a single version of the Driverlib
N// "binary" code to support multiple(all) Stellaris silicon revisions.
N//
N// It is expected that these macros will be used inside of a standard 'C'
N// conditional block of code, e.g.
N//
N//     if(CLASS_IS_SANDSTORM)
N//     {
N//         do some Sandstorm-class specific code here.
N//     }
N//
N// By default, these macros will be defined as run-time checks of the
N// appropriate register(s) to allow creation of run-time conditional code
N// blocks for a common DriverLib across the entire Stellaris family.
N//
N// However, if code-space optimization is required, these macros can be "hard-
N// coded" for a specific version of Stellaris silicon.  Many compilers will
N// then detect the "hard-coded" conditionals, and appropriately optimize the
N// code blocks, eliminating any "unreachable" code.  This would result in
N// a smaller Driverlib, thus producing a smaller final application size, but
N// at the cost of limiting the Driverlib binary to a specific Stellaris
N// silicon revision.
N//
N//*****************************************************************************
N#ifndef CLASS_IS_SANDSTORM
N#define CLASS_IS_SANDSTORM                                                    \
N        (((HWREG(SYSCTL_DID0) & SYSCTL_DID0_VER_M) == SYSCTL_DID0_VER_0) ||   \
N         ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_SANDSTORM)))
X#define CLASS_IS_SANDSTORM                                                            (((HWREG(SYSCTL_DID0) & SYSCTL_DID0_VER_M) == SYSCTL_DID0_VER_0) ||            ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==           (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_SANDSTORM)))
N#endif
N
N#ifndef CLASS_IS_FURY
N#define CLASS_IS_FURY                                                        \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_FURY))
X#define CLASS_IS_FURY                                                                ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_FURY))
N#endif
N
N#ifndef CLASS_IS_DUSTDEVIL
N#define CLASS_IS_DUSTDEVIL                                                   \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_DUSTDEVIL))
X#define CLASS_IS_DUSTDEVIL                                                           ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_DUSTDEVIL))
N#endif
N
N#ifndef CLASS_IS_TEMPEST
N#define CLASS_IS_TEMPEST                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TEMPEST))
X#define CLASS_IS_TEMPEST                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TEMPEST))
N#endif
N
N#ifndef CLASS_IS_FIRESTORM
N#define CLASS_IS_FIRESTORM                                                   \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_FIRESTORM))
X#define CLASS_IS_FIRESTORM                                                           ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_FIRESTORM))
N#endif
N
N#ifndef CLASS_IS_BLIZZARD
N#define CLASS_IS_BLIZZARD                                                    \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_BLIZZARD))
X#define CLASS_IS_BLIZZARD                                                            ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_BLIZZARD))
N#endif
N
N#ifndef REVISION_IS_A0
N#define REVISION_IS_A0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A1
N#define REVISION_IS_A1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A2
N#define REVISION_IS_A2                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
X#define REVISION_IS_A2                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
N#endif
N
N#ifndef REVISION_IS_B0
N#define REVISION_IS_B0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_B0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_B1
N#define REVISION_IS_B1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
X#define REVISION_IS_B1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
N#endif
N
N#ifndef REVISION_IS_C0
N#define REVISION_IS_C0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_C0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_C1
N#define REVISION_IS_C1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_1))
X#define REVISION_IS_C1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_1))
N#endif
N
N#ifndef REVISION_IS_C2
N#define REVISION_IS_C2                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_2))
X#define REVISION_IS_C2                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_2))
N#endif
N
N#ifndef REVISION_IS_C3
N#define REVISION_IS_C3                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_3))
X#define REVISION_IS_C3                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_3))
N#endif
N
N#ifndef REVISION_IS_C5
N#define REVISION_IS_C5                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_5))
X#define REVISION_IS_C5                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_5))
N#endif
N
N//*****************************************************************************
N//
N// Deprecated silicon class and revision detection macros.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N#define DEVICE_IS_SANDSTORM     CLASS_IS_SANDSTORM
N#define DEVICE_IS_FURY          CLASS_IS_FURY
N#define DEVICE_IS_REVA2         REVISION_IS_A2
N#define DEVICE_IS_REVC1         REVISION_IS_C1
N#define DEVICE_IS_REVC2         REVISION_IS_C2
N#endif
N
N#endif // __HW_TYPES_H__
L 26 "sound_task.c" 2
N#include "drivers/wav.h"
L 1 "..\drivers/wav.h" 1
N//*****************************************************************************
N//
N// wav.h - Prototypes and definitions for the wav audio playback driver.
N//
N// Copyright (c) 2011-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N#ifndef __WAV_H__
N#define __WAV_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N//! \addtogroup wav_api
N//! @{
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N//! The header information parsed from a ``.wav'' file during a call to the
N//! function WaveOpen.
N//
N//*****************************************************************************
Ntypedef struct
N{
N    //
N    //! Sample rate in bytes per second.
N    //
N    unsigned long ulSampleRate;
N
N    //
N    //! The average byte rate for the wav file.
N    //
N    unsigned long ulAvgByteRate;
N
N    //
N    //! The size of the wav data in the file.
N    //
N    unsigned long ulDataSize;
N
N    //
N    //! The number of bits per sample.
N    //
N    unsigned short usBitsPerSample;
N
N    //
N    //! The wav file format.
N    //
N    unsigned short usFormat;
N
N    //
N    //! The number of audio channels.
N    //
N    unsigned short usNumChannels;
N}
NtWaveHeader;
N
N//*****************************************************************************
N//
N//! Possible return codes from the WaveOpen function.
N//
N//*****************************************************************************
Ntypedef enum
N{
N    //
N    //! The wav data was parsed successfully.
N    //
N    WAVE_OK = 0,
N
N    //
N    //! The RIFF information in the wav data is not supported.
N    //
N    WAVE_INVALID_RIFF,
N
N    //
N    //! The chunk size specified in the wav data is not supported.
N    //
N    WAVE_INVALID_CHUNK,
N
N    //
N    //! The format of the wav data is not supported.
N    //
N    WAVE_INVALID_FORMAT
N}
NtWaveReturnCode;
N
N//*****************************************************************************
N//
N// Close the Doxygen group.
N//! @}
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern tWaveReturnCode WaveOpen(unsigned long *pulAddress,
N                                tWaveHeader *pWaveHeader);
Nextern void WavePlayStart(tWaveHeader *pWaveHeader);
Nextern tBoolean WavePlayContinue(tWaveHeader *pWaveHeader);
Nextern void WaveStop(void);
Nextern void WaveGetTime(tWaveHeader *pWaveHeader, char *pcTime,
N                        unsigned long ulSize);
Nextern tBoolean WavePlaybackStatus(void);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __WAV_H__
L 27 "sound_task.c" 2
N#include "drivers/sound.h"
L 1 "..\drivers/sound.h" 1
N//*****************************************************************************
N//
N// sound.h - Definitions and prototypes for the EVALBOT sound driver.
N//
N// Copyright (c) 2011-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N#ifndef __SOUND_H__
N#define __SOUND_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Event definitions for the buffer callback function.
N//
N//*****************************************************************************
N#define BUFFER_EVENT_FREE       0x00000001
N#define BUFFER_EVENT_FULL       0x00000002
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void SoundInit(void);
Nextern void SoundIntHandler(void);
Nextern void SoundSetFormat(unsigned long ulSampleRate,
N                           unsigned short usBitsPerSample,
N                           unsigned short usChannels);
Nextern unsigned long SoundSampleRateGet(void);
Nextern void SoundBufferPlay(const void *pvData, unsigned long ulLength,
N                            void (*pfnCallback)(void *pvBuffer,
N                                                unsigned long ulEvent));
Nextern void SoundVolumeSet(unsigned long ulPercent);
Nextern unsigned char SoundVolumeGet(void);
Nextern void SoundVolumeDown(unsigned long ulPercent);
Nextern void SoundVolumeUp(unsigned long ulPercent);
Nextern void SoundClassDEn(void);
Nextern void SoundClassDDis(void);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __SOUND_H__
L 28 "sound_task.c" 2
N#include "utils/scheduler.h"
L 1 "..\..\..\utils/scheduler.h" 1
N//****************************************************************************
N//
N// scheduler.h - Public header for the simple timed function scheduler module.
N//
N// Copyright (c) 2010-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//****************************************************************************
N#ifndef __SCHEDULER_H__
N#define __SCHEDULER_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N//! \addtogroup scheduler_api
N//! @{
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// Prototype of a function that the scheduler can call periodically.
N//
N//*****************************************************************************
Ntypedef void (*tSchedulerFunction)(void *pvParam);
N
N//*****************************************************************************
N//
N//! The structure defining a function which the scheduler will call
N//! periodically.
N//
N//*****************************************************************************
Ntypedef struct
N{
N    //
N    //! A pointer to the function which is to be called periodically by the
N    //! scheduler.
N    //
N    void (*pfnFunction)(void *);
N
N    //
N    //! The parameter which is to be passed to this function when it is called.
N    //
N    void *pvParam;
N
N    //
N    //! The frequency the function is to be called expressed in terms of system
N    //! ticks.  If this value is 0, the function will be called on every call
N    //! to SchedulerRun.
N    //
N    unsigned long ulFrequencyTicks;
N
N    //
N    //! Tick count when this function was last called.  This field is updated
N    //! by the scheduler.
N    //
N    unsigned long ulLastCall;
N
N    //
N    //! A flag indicating whether or not this task is active.  If true, the
N    //! function will be called periodically.  If false, the function is
N    //! disabled and will not be called.
N    //
N    tBoolean bActive;
N}
NtSchedulerTask;
N
N//*****************************************************************************
N//
N//! This global table must be populated by the client and contains information
N//! on each function that the scheduler is to call.
N//
N//*****************************************************************************
Nextern tSchedulerTask g_psSchedulerTable[];
N
N//*****************************************************************************
N//
N//! This global variable must be exported by the client.  It must contain the
N//! number of entries in the g_psSchedulerTable array.
N//
N//*****************************************************************************
Nextern unsigned long g_ulSchedulerNumTasks;
N
N//*****************************************************************************
N//
N// Close the Doxygen group.
N//! @}
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// Public function prototypes
N//
N//*****************************************************************************
Nextern void SchedulerSysTickIntHandler(void);
Nextern void SchedulerInit(unsigned long ulTicksPerSecond);
Nextern void SchedulerRun(void);
Nextern void SchedulerTaskEnable(unsigned long ulIndex, tBoolean bRunNow);
Nextern void SchedulerTaskDisable(unsigned long ulIndex);
Nextern unsigned long SchedulerTickCountGet(void);
Nextern unsigned long SchedulerElapsedTicksGet(unsigned long ulTickCount);
Nextern unsigned long SchedulerElapsedTicksCalc(unsigned long ulTickStart,
N                                               unsigned long ulTickEnd);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __ SCHEDULER_H_
L 29 "sound_task.c" 2
N
N//****************************************************************************
N//
N// Defines the possible states of the sound task state machine.
N//
N//****************************************************************************
N#define SOUND_STATE_IDLE 0
N#define SOUND_STATE_PLAYING 1
N
N//****************************************************************************
N//
N// Points to the currently playing audio clip, and the next one to be played.
N//
N//****************************************************************************
Nconst unsigned char *pucNowPlaying;
Nconst unsigned char *pucNextPlaying;
N
N//****************************************************************************
N//
N// Holds the wave header information for the currently opened audio clip.
N//
N//****************************************************************************
NtWaveHeader sSoundEffectHeader;
N
N//****************************************************************************
N//
N// This function is the sound "task" that is called periodically by the
N// scheduler from the app main processing loop.  This task plays audio clips
N// that are queued up bby the SoundTaskPlay() function.
N//
N//****************************************************************************
Nvoid
NSoundTask(void *pvParam)
N{
N    static unsigned long ulState = SOUND_STATE_IDLE;
X    static unsigned long ulState = 0;
N
N    //
N    // Process the state machine
N    //
N    switch(ulState)
N    {
N        //
N        // IDLE - not playing a sound
N        //
N        case SOUND_STATE_IDLE:
X        case 0:
N        {
N            //
N            // If there is a new clip ready to play, then start playing it.
N            //
N            if(pucNextPlaying)
N            {
N                //
N                // Set the current playing clip to match the new clip, and
N                // clear the "next" clip pointer.
N                //
N                pucNowPlaying = pucNextPlaying;
N                pucNextPlaying = 0;
N
N                //
N                // Open the new clip as a wave file
N                //
N                if(WaveOpen((unsigned long *)pucNowPlaying,
N                            &sSoundEffectHeader) == WAVE_OK)
N                {
N                    //
N                    // If the clip opened okay as a wave file, then start the
N                    // clip playing and change our state to PLAYING
N                    //
N                    ulState = SOUND_STATE_PLAYING;
X                    ulState = 1;
N                    WavePlayStart(&sSoundEffectHeader);
N                }
N
N                //
N                // Otherwise the clip was not opened successfully in which
N                // case clear the current playing clip and remain in IDLE state
N                //
N                else
N                {
N                    pucNowPlaying = 0;
N                }
N            }
N            break;
N        }
N
N        //
N        // PLAYING - a clip is playing
N        //
N        case SOUND_STATE_PLAYING:
X        case 1:
N        {
N            //
N            // Call the function to continue wave playing.  This function must
N            // be called periodically, and it will keep the wave driver playing
N            // the audio clip until it is finished.
N            //
N            if(WavePlayContinue(&sSoundEffectHeader))
N            {
N                //
N                // Clip is done playing, so clear the playing clip pointer and
N                // set the state back to IDLE.
N                //
N                pucNowPlaying = 0;
N                ulState = SOUND_STATE_IDLE;
X                ulState = 0;
N            }
N            break;
N        }
N
N        //
N        // default state is an error.  Clear the current and next clip pointers
N        // and set the state back to IDLE
N        //
N        default:
N        {
N            pucNowPlaying = 0;
N            pucNextPlaying = 0;
N            ulState = SOUND_STATE_IDLE;
X            ulState = 0;
N            break;
N        }
N    }
N}
N
N//****************************************************************************
N//
N// This function perform initializations needed to run the sound task.  It
N// should be called during system initialization.
N//
N//****************************************************************************
Nvoid
NSoundTaskInit(void *pvParam)
N{
N    SoundInit();
N}
N
N//****************************************************************************
N//
N// This function is used to queue a wave format audio clip for playing.
N//
N//****************************************************************************
Nvoid
NSoundTaskPlay(const unsigned char *pucSound)
N{
N    //
N    // Set the "next" pointer to point at the requested clip.
N    //
N    pucNextPlaying = pucSound;
N}
