; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\rvmdk\random.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\random.d --cpu=Cortex-M3 --apcs=interwork -I. -I.. -I..\..\.. -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Luminary -D__MICROLIB -Drvmdk -DPART_LM3S9B96 -DTARGET_IS_TEMPEST_RB1 -DUART_BUFFERED --omf_browse=.\rvmdk\random.crf random.c]
                          THUMB

                          AREA ||i.RandomAddEntropy||, CODE, READONLY, ALIGN=2

                  RandomAddEntropy PROC
;;;57     void
;;;58     RandomAddEntropy(unsigned long ulEntropy)
000000  4a05              LDR      r2,|L1.24|
;;;59     {
;;;60         //
;;;61         // Add this byte to the entropy pool.
;;;62         //
;;;63         ((unsigned char *)g_pulRandomEntropy)[g_ulRandomIndex] = ulEntropy & 0xff;
000002  4b04              LDR      r3,|L1.20|
000004  6811              LDR      r1,[r2,#0]  ; g_ulRandomIndex
000006  5458              STRB     r0,[r3,r1]
;;;64     
;;;65         //
;;;66         // Increment to the next byte of the entropy pool.
;;;67         //
;;;68         g_ulRandomIndex = (g_ulRandomIndex + 1) & 63;
000008  1c49              ADDS     r1,r1,#1
00000a  f001003f          AND      r0,r1,#0x3f
00000e  6010              STR      r0,[r2,#0]  ; g_ulRandomIndex
;;;69     }
000010  4770              BX       lr
;;;70     
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      ||.bss||
                  |L1.24|
                          DCD      ||.data||

                          AREA ||i.RandomNumber||, CODE, READONLY, ALIGN=2

                  RandomNumber PROC
;;;160    unsigned long
;;;161    RandomNumber(void)
000000  4903              LDR      r1,|L2.16|
;;;162    {
;;;163        //
;;;164        // Generate a new pseudo-random number with a linear congruence random
;;;165        // number generator.  This new random number becomes the seed for the next
;;;166        // random number.
;;;167        //
;;;168        g_ulRandomSeed = (g_ulRandomSeed * 1664525) + 1013904223;
000002  4a04              LDR      r2,|L2.20|
000004  6848              LDR      r0,[r1,#4]  ; g_ulRandomSeed
000006  4350              MULS     r0,r2,r0
000008  4a03              LDR      r2,|L2.24|
00000a  4410              ADD      r0,r0,r2
00000c  6048              STR      r0,[r1,#4]  ; g_ulRandomSeed
;;;169    
;;;170        //
;;;171        // Return the new random number.
;;;172        //
;;;173        return(g_ulRandomSeed);
;;;174    }
00000e  4770              BX       lr
                          ENDP

                  |L2.16|
                          DCD      ||.data||
                  |L2.20|
                          DCD      0x0019660d
                  |L2.24|
                          DCD      0x3c6ef35f

                          AREA ||i.RandomSeed||, CODE, READONLY, ALIGN=2

                  RandomSeed PROC
;;;80     void
;;;81     RandomSeed(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;82     {
;;;83         unsigned long ulA, ulB, ulC, ulD, ulTemp, ulIdx;
;;;84     
;;;85         //
;;;86         // Initialize the digest.
;;;87         //
;;;88         ulA = 0x67452301;
000004  f8df9140          LDR      r9,|L3.328|
;;;89         ulB = 0xefcdab89;
000008  4950              LDR      r1,|L3.332|
;;;90         ulC = 0x98badcfe;
;;;91         ulD = 0x10325476;
;;;92     
;;;93         //
;;;94         // Perform the first round of operations.
;;;95         //
;;;96     #define F(a, b, c, d, k, s)                                       \
;;;97         {                                                             \
;;;98             ulTemp = a + (d ^ (b & (c ^ d))) + g_pulRandomEntropy[k]; \
;;;99             a = (ulTemp << s) | (ulTemp >> (32 - s));                 \
;;;100        }
;;;101        for(ulIdx = 0; ulIdx < 16; ulIdx += 4)
;;;102        {
;;;103            F(ulA, ulB, ulC, ulD, ulIdx + 0, 3);
00000a  f8df8144          LDR      r8,|L3.336|
00000e  43cb              MVNS     r3,r1                 ;91
000010  4648              MOV      r0,r9                 ;88
000012  ea6f0209          MVN      r2,r9                 ;90
000016  2400              MOVS     r4,#0                 ;101
                  |L3.24|
000018  ea820503          EOR      r5,r2,r3
00001c  400d              ANDS     r5,r5,r1
00001e  405d              EORS     r5,r5,r3
000020  4428              ADD      r0,r0,r5
000022  f8586024          LDR      r6,[r8,r4,LSL #2]
;;;104            F(ulD, ulA, ulB, ulC, ulIdx + 1, 7);
000026  eb080584          ADD      r5,r8,r4,LSL #2
00002a  4430              ADD      r0,r0,r6              ;103
00002c  ea4f7070          ROR      r0,r0,#29             ;103
000030  ea810602          EOR      r6,r1,r2
000034  4006              ANDS     r6,r6,r0
000036  4056              EORS     r6,r6,r2
000038  4433              ADD      r3,r3,r6
00003a  686f              LDR      r7,[r5,#4]
;;;105            F(ulC, ulD, ulA, ulB, ulIdx + 2, 11);
00003c  ea800601          EOR      r6,r0,r1
000040  443b              ADD      r3,r3,r7              ;104
000042  ea4f6373          ROR      r3,r3,#25             ;104
000046  401e              ANDS     r6,r6,r3
000048  404e              EORS     r6,r6,r1
00004a  4432              ADD      r2,r2,r6
00004c  68af              LDR      r7,[r5,#8]
;;;106            F(ulB, ulC, ulD, ulA, ulIdx + 3, 19);
00004e  68ee              LDR      r6,[r5,#0xc]
000050  443a              ADD      r2,r2,r7              ;105
000052  ea4f5272          ROR      r2,r2,#21             ;105
000056  ea830500          EOR      r5,r3,r0
00005a  4015              ANDS     r5,r5,r2
00005c  4045              EORS     r5,r5,r0
00005e  4429              ADD      r1,r1,r5
000060  4431              ADD      r1,r1,r6
000062  1d24              ADDS     r4,r4,#4              ;101
000064  ea4f3171          ROR      r1,r1,#13
000068  2c10              CMP      r4,#0x10              ;101
00006a  d3d5              BCC      |L3.24|
;;;107        }
;;;108    
;;;109        //
;;;110        // Perform the second round of operations.
;;;111        //
;;;112    #define G(a, b, c, d, k, s)                                                  \
;;;113        {                                                                        \
;;;114            ulTemp = a + ((b & c) | (b & d) | (c & d)) + g_pulRandomEntropy[k] + \
;;;115                     0x5a827999;                                                 \
;;;116            a = (ulTemp << s) | (ulTemp >> (32 - s));                            \
;;;117        }
;;;118        for(ulIdx = 0; ulIdx < 4; ulIdx++)
;;;119        {
;;;120            G(ulA, ulB, ulC, ulD, ulIdx + 0, 3);
00006c  f8dfc0e4          LDR      r12,|L3.340|
000070  2400              MOVS     r4,#0                 ;118
                  |L3.114|
000072  ea420503          ORR      r5,r2,r3
000076  400d              ANDS     r5,r5,r1
000078  ea020603          AND      r6,r2,r3
00007c  4335              ORRS     r5,r5,r6
00007e  f8586024          LDR      r6,[r8,r4,LSL #2]
000082  4465              ADD      r5,r5,r12
000084  4430              ADD      r0,r0,r6
000086  4428              ADD      r0,r0,r5
000088  ea4f7070          ROR      r0,r0,#29
;;;121            G(ulD, ulA, ulB, ulC, ulIdx + 4, 5);
00008c  ea410502          ORR      r5,r1,r2
000090  4005              ANDS     r5,r5,r0
000092  ea010602          AND      r6,r1,r2
000096  4335              ORRS     r5,r5,r6
000098  eb05060c          ADD      r6,r5,r12
00009c  eb080584          ADD      r5,r8,r4,LSL #2
0000a0  1c64              ADDS     r4,r4,#1              ;118
0000a2  692f              LDR      r7,[r5,#0x10]
0000a4  443b              ADD      r3,r3,r7
0000a6  4433              ADD      r3,r3,r6
0000a8  ea4f63f3          ROR      r3,r3,#27
;;;122            G(ulC, ulD, ulA, ulB, ulIdx + 8, 9);
0000ac  ea400601          ORR      r6,r0,r1
0000b0  401e              ANDS     r6,r6,r3
0000b2  ea000701          AND      r7,r0,r1
0000b6  433e              ORRS     r6,r6,r7
0000b8  6a2f              LDR      r7,[r5,#0x20]
0000ba  4466              ADD      r6,r6,r12
0000bc  443a              ADD      r2,r2,r7
0000be  4432              ADD      r2,r2,r6
0000c0  ea4f52f2          ROR      r2,r2,#23
;;;123            G(ulB, ulC, ulD, ulA, ulIdx + 12, 13);
0000c4  ea430600          ORR      r6,r3,r0
0000c8  4016              ANDS     r6,r6,r2
0000ca  ea030700          AND      r7,r3,r0
0000ce  433e              ORRS     r6,r6,r7
0000d0  6b2d              LDR      r5,[r5,#0x30]
0000d2  4466              ADD      r6,r6,r12
0000d4  4429              ADD      r1,r1,r5
0000d6  4431              ADD      r1,r1,r6
0000d8  ea4f41f1          ROR      r1,r1,#19
0000dc  2c04              CMP      r4,#4                 ;118
0000de  d3c8              BCC      |L3.114|
;;;124        }
;;;125    
;;;126        //
;;;127        // Perform the third round of operations.
;;;128        //
;;;129    #define H(a, b, c, d, k, s)                                            \
;;;130        {                                                                  \
;;;131            ulTemp = a + (b ^ c ^ d) + g_pulRandomEntropy[k] + 0x6ed9eba1; \
;;;132            a = (ulTemp << s) | (ulTemp >> (32 - s));                      \
;;;133        }
;;;134        for(ulIdx = 0; ulIdx < 4; ulIdx += 2)
;;;135        {
;;;136            H(ulA, ulB, ulC, ulD, ulIdx + 0, 3);
0000e0  4e1d              LDR      r6,|L3.344|
0000e2  2400              MOVS     r4,#0                 ;134
                  |L3.228|
0000e4  f8585024          LDR      r5,[r8,r4,LSL #2]
0000e8  4405              ADD      r5,r5,r0
0000ea  ea810002          EOR      r0,r1,r2
0000ee  4058              EORS     r0,r0,r3
0000f0  4430              ADD      r0,r0,r6
0000f2  4428              ADD      r0,r0,r5
;;;137            H(ulD, ulA, ulB, ulC, ulIdx + 8, 9);
0000f4  eb080584          ADD      r5,r8,r4,LSL #2
0000f8  ea4f7070          ROR      r0,r0,#29             ;136
0000fc  6a2f              LDR      r7,[r5,#0x20]
0000fe  441f              ADD      r7,r7,r3
000100  ea800301          EOR      r3,r0,r1
000104  4053              EORS     r3,r3,r2
000106  4433              ADD      r3,r3,r6
000108  443b              ADD      r3,r3,r7
;;;138            H(ulC, ulD, ulA, ulB, ulIdx + 4, 11);
00010a  692f              LDR      r7,[r5,#0x10]
00010c  ea4f53f3          ROR      r3,r3,#23             ;137
000110  4417              ADD      r7,r7,r2
000112  ea830200          EOR      r2,r3,r0
000116  404a              EORS     r2,r2,r1
000118  4432              ADD      r2,r2,r6
;;;139            H(ulB, ulC, ulD, ulA, ulIdx + 12, 15);
00011a  6b2d              LDR      r5,[r5,#0x30]
00011c  443a              ADD      r2,r2,r7              ;138
00011e  ea4f5272          ROR      r2,r2,#21             ;138
000122  440d              ADD      r5,r5,r1
000124  ea820103          EOR      r1,r2,r3
000128  4041              EORS     r1,r1,r0
00012a  4431              ADD      r1,r1,r6
00012c  4429              ADD      r1,r1,r5
00012e  ea4f4171          ROR      r1,r1,#17
;;;140    
;;;141            if(ulIdx == 2)
000132  2c02              CMP      r4,#2
000134  d100              BNE      |L3.312|
;;;142            {
;;;143                ulIdx -= 3;
000136  1ee4              SUBS     r4,r4,#3
                  |L3.312|
000138  1ca4              ADDS     r4,r4,#2              ;134
00013a  2c04              CMP      r4,#4                 ;134
00013c  d3d2              BCC      |L3.228|
;;;144            }
;;;145        }
;;;146    
;;;147        //
;;;148        // Use the first word of the resulting digest as the random number seed.
;;;149        //
;;;150        g_ulRandomSeed = ulA + 0x67452301;
00013e  4907              LDR      r1,|L3.348|
000140  4448              ADD      r0,r0,r9
000142  6048              STR      r0,[r1,#4]  ; g_ulRandomSeed
;;;151    }
000144  e8bd83f0          POP      {r4-r9,pc}
;;;152    
                          ENDP

                  |L3.328|
                          DCD      0x67452301
                  |L3.332|
                          DCD      0xefcdab89
                  |L3.336|
                          DCD      ||.bss||
                  |L3.340|
                          DCD      0x5a827999
                  |L3.344|
                          DCD      0x6ed9eba1
                  |L3.348|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_pulRandomEntropy
                          %        64

                          AREA ||.data||, DATA, ALIGN=2

                  g_ulRandomIndex
                          DCD      0x00000000
                  g_ulRandomSeed
                          DCD      0x00000000
