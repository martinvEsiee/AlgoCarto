L 1 "random.c"
N//*****************************************************************************
N//
N// random.c - Random number generator utilizing MD4 hash function of
N//            environmental noise captured as the seed and a linear congruence
N//            generator for the random numbers.
N//
N// Copyright (c) 2011-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//****************************************************************************
N
N#include "random.h"
L 1 "random.h" 1
N//*****************************************************************************
N//
N// random.h - Header for random number generation functions.
N//
N// Copyright (c) 2011-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __RANDOM_H__
N#define __RANDOM_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N//*****************************************************************************
N//
N// Prototypes for the random number generator functions.
N//
N//*****************************************************************************
Nextern void RandomAddEntropy(unsigned long ulEntropy);
Nextern void RandomSeed(void);
Nextern unsigned long RandomNumber(void);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __RANDOM_H__
L 28 "random.c" 2
N
N//*****************************************************************************
N//
N// The pool of entropy that has been collected.
N//
N//*****************************************************************************
Nstatic unsigned long g_pulRandomEntropy[16];
N
N//*****************************************************************************
N//
N// The index of the next byte to be added to the entropy pool.
N//
N//*****************************************************************************
Nstatic unsigned long g_ulRandomIndex = 0;
N
N//*****************************************************************************
N//
N// The random number seed, which corresponds to the most recently returned
N// random number.  This is set based on the entropy-generated random number
N// by RandomSeed().
N//
N//*****************************************************************************
Nstatic unsigned long g_ulRandomSeed = 0;
N
N//*****************************************************************************
N//
N// Add entropy to the pool.
N//
N//*****************************************************************************
Nvoid
NRandomAddEntropy(unsigned long ulEntropy)
N{
N    //
N    // Add this byte to the entropy pool.
N    //
N    ((unsigned char *)g_pulRandomEntropy)[g_ulRandomIndex] = ulEntropy & 0xff;
N
N    //
N    // Increment to the next byte of the entropy pool.
N    //
N    g_ulRandomIndex = (g_ulRandomIndex + 1) & 63;
N}
N
N//*****************************************************************************
N//
N// Seed the random number generator by running a MD4 hash on the entropy pool.
N// Note that the entropy pool may change from beneath us, but for the purposes
N// of generating random numbers that is not a concern.  Also, the MD4 hash was
N// broken long ago, but since it is being used to generate random numbers
N// instead of providing security this is not a concern.
N//
N//*****************************************************************************
Nvoid
NRandomSeed(void)
N{
N    unsigned long ulA, ulB, ulC, ulD, ulTemp, ulIdx;
N
N    //
N    // Initialize the digest.
N    //
N    ulA = 0x67452301;
N    ulB = 0xefcdab89;
N    ulC = 0x98badcfe;
N    ulD = 0x10325476;
N
N    //
N    // Perform the first round of operations.
N    //
N#define F(a, b, c, d, k, s)                                       \
N    {                                                             \
N        ulTemp = a + (d ^ (b & (c ^ d))) + g_pulRandomEntropy[k]; \
N        a = (ulTemp << s) | (ulTemp >> (32 - s));                 \
N    }
X#define F(a, b, c, d, k, s)                                           {                                                                     ulTemp = a + (d ^ (b & (c ^ d))) + g_pulRandomEntropy[k];         a = (ulTemp << s) | (ulTemp >> (32 - s));                     }
N    for(ulIdx = 0; ulIdx < 16; ulIdx += 4)
N    {
N        F(ulA, ulB, ulC, ulD, ulIdx + 0, 3);
X        { ulTemp = ulA + (ulD ^ (ulB & (ulC ^ ulD))) + g_pulRandomEntropy[ulIdx + 0]; ulA = (ulTemp << 3) | (ulTemp >> (32 - 3)); };
N        F(ulD, ulA, ulB, ulC, ulIdx + 1, 7);
X        { ulTemp = ulD + (ulC ^ (ulA & (ulB ^ ulC))) + g_pulRandomEntropy[ulIdx + 1]; ulD = (ulTemp << 7) | (ulTemp >> (32 - 7)); };
N        F(ulC, ulD, ulA, ulB, ulIdx + 2, 11);
X        { ulTemp = ulC + (ulB ^ (ulD & (ulA ^ ulB))) + g_pulRandomEntropy[ulIdx + 2]; ulC = (ulTemp << 11) | (ulTemp >> (32 - 11)); };
N        F(ulB, ulC, ulD, ulA, ulIdx + 3, 19);
X        { ulTemp = ulB + (ulA ^ (ulC & (ulD ^ ulA))) + g_pulRandomEntropy[ulIdx + 3]; ulB = (ulTemp << 19) | (ulTemp >> (32 - 19)); };
N    }
N
N    //
N    // Perform the second round of operations.
N    //
N#define G(a, b, c, d, k, s)                                                  \
N    {                                                                        \
N        ulTemp = a + ((b & c) | (b & d) | (c & d)) + g_pulRandomEntropy[k] + \
N                 0x5a827999;                                                 \
N        a = (ulTemp << s) | (ulTemp >> (32 - s));                            \
N    }
X#define G(a, b, c, d, k, s)                                                      {                                                                                ulTemp = a + ((b & c) | (b & d) | (c & d)) + g_pulRandomEntropy[k] +                  0x5a827999;                                                         a = (ulTemp << s) | (ulTemp >> (32 - s));                                }
N    for(ulIdx = 0; ulIdx < 4; ulIdx++)
N    {
N        G(ulA, ulB, ulC, ulD, ulIdx + 0, 3);
X        { ulTemp = ulA + ((ulB & ulC) | (ulB & ulD) | (ulC & ulD)) + g_pulRandomEntropy[ulIdx + 0] + 0x5a827999; ulA = (ulTemp << 3) | (ulTemp >> (32 - 3)); };
N        G(ulD, ulA, ulB, ulC, ulIdx + 4, 5);
X        { ulTemp = ulD + ((ulA & ulB) | (ulA & ulC) | (ulB & ulC)) + g_pulRandomEntropy[ulIdx + 4] + 0x5a827999; ulD = (ulTemp << 5) | (ulTemp >> (32 - 5)); };
N        G(ulC, ulD, ulA, ulB, ulIdx + 8, 9);
X        { ulTemp = ulC + ((ulD & ulA) | (ulD & ulB) | (ulA & ulB)) + g_pulRandomEntropy[ulIdx + 8] + 0x5a827999; ulC = (ulTemp << 9) | (ulTemp >> (32 - 9)); };
N        G(ulB, ulC, ulD, ulA, ulIdx + 12, 13);
X        { ulTemp = ulB + ((ulC & ulD) | (ulC & ulA) | (ulD & ulA)) + g_pulRandomEntropy[ulIdx + 12] + 0x5a827999; ulB = (ulTemp << 13) | (ulTemp >> (32 - 13)); };
N    }
N
N    //
N    // Perform the third round of operations.
N    //
N#define H(a, b, c, d, k, s)                                            \
N    {                                                                  \
N        ulTemp = a + (b ^ c ^ d) + g_pulRandomEntropy[k] + 0x6ed9eba1; \
N        a = (ulTemp << s) | (ulTemp >> (32 - s));                      \
N    }
X#define H(a, b, c, d, k, s)                                                {                                                                          ulTemp = a + (b ^ c ^ d) + g_pulRandomEntropy[k] + 0x6ed9eba1;         a = (ulTemp << s) | (ulTemp >> (32 - s));                          }
N    for(ulIdx = 0; ulIdx < 4; ulIdx += 2)
N    {
N        H(ulA, ulB, ulC, ulD, ulIdx + 0, 3);
X        { ulTemp = ulA + (ulB ^ ulC ^ ulD) + g_pulRandomEntropy[ulIdx + 0] + 0x6ed9eba1; ulA = (ulTemp << 3) | (ulTemp >> (32 - 3)); };
N        H(ulD, ulA, ulB, ulC, ulIdx + 8, 9);
X        { ulTemp = ulD + (ulA ^ ulB ^ ulC) + g_pulRandomEntropy[ulIdx + 8] + 0x6ed9eba1; ulD = (ulTemp << 9) | (ulTemp >> (32 - 9)); };
N        H(ulC, ulD, ulA, ulB, ulIdx + 4, 11);
X        { ulTemp = ulC + (ulD ^ ulA ^ ulB) + g_pulRandomEntropy[ulIdx + 4] + 0x6ed9eba1; ulC = (ulTemp << 11) | (ulTemp >> (32 - 11)); };
N        H(ulB, ulC, ulD, ulA, ulIdx + 12, 15);
X        { ulTemp = ulB + (ulC ^ ulD ^ ulA) + g_pulRandomEntropy[ulIdx + 12] + 0x6ed9eba1; ulB = (ulTemp << 15) | (ulTemp >> (32 - 15)); };
N
N        if(ulIdx == 2)
N        {
N            ulIdx -= 3;
N        }
N    }
N
N    //
N    // Use the first word of the resulting digest as the random number seed.
N    //
N    g_ulRandomSeed = ulA + 0x67452301;
N}
N
N//*****************************************************************************
N//
N// Generate a new random number.  The number returned would more accruately be
N// described as a pseudo-random number since a linear congruence generator is
N// being used.
N//
N//*****************************************************************************
Nunsigned long
NRandomNumber(void)
N{
N    //
N    // Generate a new pseudo-random number with a linear congruence random
N    // number generator.  This new random number becomes the seed for the next
N    // random number.
N    //
N    g_ulRandomSeed = (g_ulRandomSeed * 1664525) + 1013904223;
N
N    //
N    // Return the new random number.
N    //
N    return(g_ulRandomSeed);
N}
