L 1 "pid.c"
N//*****************************************************************************
N//
N// pid.c - PID feedback control algorithm.
N//
N// Copyright (c) 2011-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#include "pid.h"
L 1 "pid.h" 1
N//*****************************************************************************
N//
N// pid.h - Prototypes for the PID feedback control algorithm.
N//
N// Copyright (c) 2011-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __PID_H__
N#define __PID_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// This structure contains the internal state of the PID algorithm.
N//
N//*****************************************************************************
Ntypedef struct
N{
N    //
N    // The current value of the integrator.
N    //
N    long lIntegrator;
N
N    //
N    // The maximum allowable value of the integrator.
N    //
N    long lIntegMax;
N
N    //
N    // The minimum allowable value of the integrator.
N    //
N    long lIntegMin;
N
N    //
N    // The error from the previous call to the algorithm.  This is used for
N    // determining the derivative of the error.
N    //
N    long lPrevError;
N
N    //
N    // The proportional gain factor.
N    //
N    long lPGain;
N
N    //
N    // The integral gain factor.
N    //
N    long lIGain;
N
N    //
N    // The derivative gain factor.
N    //
N    long lDGain;
N}
NtPIDState;
N
N//*****************************************************************************
N//
N// PID module function prototypes.
N//
N//*****************************************************************************
Nextern void PIDInitialize(tPIDState *psState, long lIntegMax, long lIntegMin,
N                          long lPGain, long lIGain, long lDGain);
Nextern void PIDGainPSet(tPIDState *psState, long lPGain);
Nextern void PIDGainISet(tPIDState *psState, long lIGain, long lIntegMax,
N                        long lIntegMin);
Nextern void PIDGainDSet(tPIDState *psState, long lDGain);
Nextern void PIDReset(tPIDState *psState);
Nextern long PIDUpdate(tPIDState *psState, long lError);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __PID_H__
L 26 "pid.c" 2
N
N//*****************************************************************************
N//
N// This function will initialize the internal state of the PID algorithm.  This
N// must be done before the PID algorithm can be executed or random results will
N// occur.
N//
N// By using a derivative gain of zero, this reduces to a simple PI controller.
N// By using a integral and derivative gain of zero, it reduces to an even
N// simpler P controller.  The response requirements of the process being
N// controlled determines the terms required to achieve that level of response.
N// Controlling motors can typically be done with a simple PI controller.
N//
N//*****************************************************************************
Nvoid
NPIDInitialize(tPIDState *psState, long lIntegMax, long lIntegMin, long lPGain,
N              long lIGain, long lDGain)
N{
N    //
N    // Set the internal state, and save the integrator limits and gain factors.
N    //
N    psState->lIntegrator = 0;
N    psState->lIntegMax = lIntegMax;
N    psState->lIntegMin = lIntegMin;
N    psState->lPrevError = 0;
N    psState->lPGain = lPGain;
N    psState->lIGain = lIGain;
N    psState->lDGain = lDGain;
N}
N
N//*****************************************************************************
N//
N// This function will change the P gain factor used by the PID algorithm.
N//
N//*****************************************************************************
Nvoid
NPIDGainPSet(tPIDState *psState, long lPGain)
N{
N    //
N    // Save the P gain factor.
N    //
N    psState->lPGain = lPGain;
N}
N
N//*****************************************************************************
N//
N// This function will change the I gain factor used by the PID algorithm.
N//
N//*****************************************************************************
Nvoid
NPIDGainISet(tPIDState *psState, long lIGain, long lIntegMax, long lIntegMin)
N{
N    //
N    // Save the I gain factor.
N    //
N    psState->lIGain = lIGain;
N
N    //
N    // Save the integrator limits.
N    //
N    psState->lIntegMax = lIntegMax;
N    psState->lIntegMin = lIntegMin;
N
N    //
N    // Limit the integrator to the new limits if necessary.
N    //
N    if(psState->lIntegrator > lIntegMax)
N    {
N        psState->lIntegrator = lIntegMax;
N    }
N    else if(psState->lIntegrator < lIntegMin)
N    {
N        psState->lIntegrator = lIntegMin;
N    }
N}
N
N//*****************************************************************************
N//
N// This function will change the D gain factor used by the PID algorithm.
N//
N//*****************************************************************************
Nvoid
NPIDGainDSet(tPIDState *psState, long lDGain)
N{
N    //
N    // Save the D gain factor.
N    //
N    psState->lDGain = lDGain;
N}
N
N//*****************************************************************************
N//
N// This function resets the internal state of the PID controller, preparing it
N// to start operating on a new stream of input values.
N//
N//*****************************************************************************
Nvoid
NPIDReset(tPIDState *psState)
N{
N    //
N    // Reset the integrator and previous error.
N    //
N    psState->lIntegrator = 0;
N    psState->lPrevError = 0;
N}
N
N//*****************************************************************************
N//
N// This function will execute another iteration of the PID algorithm.  In
N// order to get reliable results from this, the sampled values passed in must
N// be captured at fixed intervals (as close as possible).  Deviations from a
N// fixed capture interval will result in errors in the control output.
N//
N//*****************************************************************************
Nlong
NPIDUpdate(tPIDState *psState, long lError)
N{
N    long long llOutput;
N    long lOutput;
N
N    //
N    // Update the error integrator.
N    //
N    if((psState->lIntegrator & 0x80000000) == (lError & 0x80000000))
N    {
N        //
N        // Add the error to the integrator.
N        //
N        psState->lIntegrator += lError;
N
N        //
N        // Since the sign of the integrator and error matched before the above
N        // addition, if the signs no longer match it is because the integrator
N        // rolled over.  In this case, saturate appropriately.
N        //
N        if((lError < 0) && (psState->lIntegrator > 0))
N        {
N            psState->lIntegrator = psState->lIntegMin;
N        }
N        if((lError > 0) && (psState->lIntegrator < 0))
N        {
N            psState->lIntegrator = psState->lIntegMax;
N        }
N    }
N    else
N    {
N        //
N        // Add the error to the integrator.
N        //
N        psState->lIntegrator += lError;
N    }
N
N    //
N    // Saturate the integrator if necessary.
N    //
N    if(psState->lIntegrator > psState->lIntegMax)
N    {
N        psState->lIntegrator = psState->lIntegMax;
N    }
N    if(psState->lIntegrator < psState->lIntegMin)
N    {
N        psState->lIntegrator = psState->lIntegMin;
N    }
N
N    //
N    // Compute the new control value.
N    //
N    llOutput = (((long long)psState->lPGain * (long long)lError) +
N                ((long long)psState->lIGain *
N                 (long long)psState->lIntegrator) +
N                ((long long)psState->lDGain *
N                 (long long)(lError - psState->lPrevError)));
N
N    //
N    // Clip the new control value as appropriate.
N    //
N    if(llOutput > (long long)0x7fffffffffff)
N    {
N        lOutput = 0x7fffffff;
N    }
N    else if(llOutput < (long long)0xffff800000000000)
N    {
N        lOutput = 0x80000000;
N    }
N    else
N    {
N        lOutput = (llOutput >> 16) & 0xffffffff;
N    }
N
N    //
N    // Save the current error for computing the derivative on the next
N    // iteration.
N    //
N    psState->lPrevError = lError;
N
N    //
N    // Return the control value.
N    //
N    return(lOutput);
N}
