L 1 "..\..\..\utils\uartstdio.c"
N//*****************************************************************************
N//
N// uartstdio.c - Utility driver to provide simple UART console functions.
N//
N// Copyright (c) 2007-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#include <stdarg.h>
L 1 "C:\Keil\ARM\RV31\Inc\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision: 157865 $
N * Checkin $Date: 2010-06-30 13:43:11 +0100 (Wed, 30 Jun 2010) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N  typedef struct __va_list { void *__ap; } va_list;
N
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199409L)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stdarg.h */
L 26 "..\..\..\utils\uartstdio.c" 2
N#include "inc/hw_ints.h"
L 1 "..\..\..\inc/hw_ints.h" 1
N//*****************************************************************************
N//
N// hw_ints.h - Macros that define the interrupt assignment on Stellaris.
N//
N// Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_INTS_H__
N#define __HW_INTS_H__
N
N//*****************************************************************************
N//
N// The following are defines for the fault assignments.
N//
N//*****************************************************************************
N#define FAULT_NMI               2           // NMI fault
N#define FAULT_HARD              3           // Hard fault
N#define FAULT_MPU               4           // MPU fault
N#define FAULT_BUS               5           // Bus fault
N#define FAULT_USAGE             6           // Usage fault
N#define FAULT_SVCALL            11          // SVCall
N#define FAULT_DEBUG             12          // Debug monitor
N#define FAULT_PENDSV            14          // PendSV
N#define FAULT_SYSTICK           15          // System Tick
N
N//*****************************************************************************
N//
N// The following are defines for the interrupt assignments.
N//
N//*****************************************************************************
N#define INT_GPIOA               16          // GPIO Port A
N#define INT_GPIOB               17          // GPIO Port B
N#define INT_GPIOC               18          // GPIO Port C
N#define INT_GPIOD               19          // GPIO Port D
N#define INT_GPIOE               20          // GPIO Port E
N#define INT_UART0               21          // UART0 Rx and Tx
N#define INT_UART1               22          // UART1 Rx and Tx
N#define INT_SSI0                23          // SSI0 Rx and Tx
N#define INT_I2C0                24          // I2C0 Master and Slave
N#define INT_PWM0_FAULT          25          // PWM0 Fault
N#define INT_PWM0_0              26          // PWM0 Generator 0
N#define INT_PWM0_1              27          // PWM0 Generator 1
N#define INT_PWM0_2              28          // PWM0 Generator 2
N#define INT_QEI0                29          // Quadrature Encoder 0
N#define INT_ADC0SS0             30          // ADC0 Sequence 0
N#define INT_ADC0SS1             31          // ADC0 Sequence 1
N#define INT_ADC0SS2             32          // ADC0 Sequence 2
N#define INT_ADC0SS3             33          // ADC0 Sequence 3
N#define INT_WATCHDOG            34          // Watchdog timer
N#define INT_TIMER0A             35          // Timer 0 subtimer A
N#define INT_TIMER0B             36          // Timer 0 subtimer B
N#define INT_TIMER1A             37          // Timer 1 subtimer A
N#define INT_TIMER1B             38          // Timer 1 subtimer B
N#define INT_TIMER2A             39          // Timer 2 subtimer A
N#define INT_TIMER2B             40          // Timer 2 subtimer B
N#define INT_COMP0               41          // Analog Comparator 0
N#define INT_COMP1               42          // Analog Comparator 1
N#define INT_COMP2               43          // Analog Comparator 2
N#define INT_SYSCTL              44          // System Control (PLL, OSC, BO)
N#define INT_FLASH               45          // FLASH Control
N#define INT_GPIOF               46          // GPIO Port F
N#define INT_GPIOG               47          // GPIO Port G
N#define INT_GPIOH               48          // GPIO Port H
N#define INT_UART2               49          // UART2 Rx and Tx
N#define INT_SSI1                50          // SSI1 Rx and Tx
N#define INT_TIMER3A             51          // Timer 3 subtimer A
N#define INT_TIMER3B             52          // Timer 3 subtimer B
N#define INT_I2C1                53          // I2C1 Master and Slave
N#define INT_QEI1                54          // Quadrature Encoder 1
N#define INT_CAN0                55          // CAN0
N#define INT_CAN1                56          // CAN1
N#define INT_CAN2                57          // CAN2
N#define INT_ETH                 58          // Ethernet
N#define INT_HIBERNATE           59          // Hibernation module
N#define INT_USB0                60          // USB 0 Controller
N#define INT_PWM0_3              61          // PWM0 Generator 3
N#define INT_UDMA                62          // uDMA controller
N#define INT_UDMAERR             63          // uDMA Error
N#define INT_ADC1SS0             64          // ADC1 Sequence 0
N#define INT_ADC1SS1             65          // ADC1 Sequence 1
N#define INT_ADC1SS2             66          // ADC1 Sequence 2
N#define INT_ADC1SS3             67          // ADC1 Sequence 3
N#define INT_I2S0                68          // I2S0
N#define INT_EPI0                69          // EPI0
N#define INT_GPIOJ               70          // GPIO Port J
N#define INT_GPIOK               71          // GPIO Port K
N#define INT_GPIOL               72          // GPIO Port L
N#define INT_SSI2                73          // SSI2
N#define INT_SSI3                74          // SSI3
N#define INT_UART3               75          // UART3
N#define INT_UART4               76          // UART4
N#define INT_UART5               77          // UART5
N#define INT_UART6               78          // UART6
N#define INT_UART7               79          // UART7
N#define INT_I2C2                84          // I2C2
N#define INT_I2C3                85          // I2C3
N#define INT_TIMER4A             86          // Timer 4A
N#define INT_TIMER4B             87          // Timer 4B
N#define INT_TIMER5A             108         // Timer 5A
N#define INT_TIMER5B             109         // Timer 5B
N#define INT_WTIMER0A            110         // Wide Timer 0A
N#define INT_WTIMER0B            111         // Wide Timer 0B
N#define INT_WTIMER1A            112         // Wide Timer 1A
N#define INT_WTIMER1B            113         // Wide Timer 1B
N#define INT_WTIMER2A            114         // Wide Timer 2A
N#define INT_WTIMER2B            115         // Wide Timer 2B
N#define INT_WTIMER3A            116         // Wide Timer 3A
N#define INT_WTIMER3B            117         // Wide Timer 3B
N#define INT_WTIMER4A            118         // Wide Timer 4A
N#define INT_WTIMER4B            119         // Wide Timer 4B
N#define INT_WTIMER5A            120         // Wide Timer 5A
N#define INT_WTIMER5B            121         // Wide Timer 5B
N#define INT_SYSEXC              122         // System Exception (imprecise)
N#define INT_PECI0               123         // PECI 0
N#define INT_LPC0                124         // LPC 0
N#define INT_I2C4                125         // I2C4
N#define INT_I2C5                126         // I2C5
N#define INT_GPIOM               127         // GPIO Port M
N#define INT_GPION               128         // GPIO Port N
N#define INT_FAN0                130         // FAN 0
N#define INT_GPIOP0              132         // GPIO Port P (Summary or P0)
N#define INT_GPIOP1              133         // GPIO Port P1
N#define INT_GPIOP2              134         // GPIO Port P2
N#define INT_GPIOP3              135         // GPIO Port P3
N#define INT_GPIOP4              136         // GPIO Port P4
N#define INT_GPIOP5              137         // GPIO Port P5
N#define INT_GPIOP6              138         // GPIO Port P6
N#define INT_GPIOP7              139         // GPIO Port P7
N#define INT_GPIOQ0              140         // GPIO Port Q (Summary or Q0)
N#define INT_GPIOQ1              141         // GPIO Port Q1
N#define INT_GPIOQ2              142         // GPIO Port Q2
N#define INT_GPIOQ3              143         // GPIO Port Q3
N#define INT_GPIOQ4              144         // GPIO Port Q4
N#define INT_GPIOQ5              145         // GPIO Port Q5
N#define INT_GPIOQ6              146         // GPIO Port Q6
N#define INT_GPIOQ7              147         // GPIO Port Q7
N#define INT_PWM1_0              150         // PWM1 Generator 0
N#define INT_PWM1_1              151         // PWM1 Generator 1
N#define INT_PWM1_2              152         // PWM1 Generator 2
N#define INT_PWM1_3              153         // PWM1 Generator 3
N#define INT_PWM1_FAULT          154         // PWM1 Fault
N
N//*****************************************************************************
N//
N// The following are defines for the total number of interrupts.
N//
N//*****************************************************************************
N#define NUM_INTERRUPTS          155
N
N//*****************************************************************************
N//
N// The following are defines for the total number of priority levels.
N//
N//*****************************************************************************
N#define NUM_PRIORITY            8
N#define NUM_PRIORITY_BITS       3
N
N//*****************************************************************************
N//
N// The following definitions are deprecated.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the interrupt assignments.
N//
N//*****************************************************************************
N#define INT_SSI                 23          // SSI Rx and Tx
N#define INT_I2C                 24          // I2C Master and Slave
N#define INT_PWM_FAULT           25          // PWM Fault
N#define INT_PWM0                26          // PWM Generator 0
N#define INT_PWM1                27          // PWM Generator 1
N#define INT_PWM2                28          // PWM Generator 2
N#define INT_QEI                 29          // Quadrature Encoder
N#define INT_ADC0                30          // ADC Sequence 0
N#define INT_ADC1                31          // ADC Sequence 1
N#define INT_ADC2                32          // ADC Sequence 2
N#define INT_ADC3                33          // ADC Sequence 3
N#define INT_PWM3                61          // PWM Generator 3
N
N#endif
N
N#endif // __HW_INTS_H__
L 27 "..\..\..\utils\uartstdio.c" 2
N#include "inc/hw_memmap.h"
L 1 "..\..\..\inc/hw_memmap.h" 1
N//*****************************************************************************
N//
N// hw_memmap.h - Macros defining the memory map of Stellaris.
N//
N// Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_MEMMAP_H__
N#define __HW_MEMMAP_H__
N
N//*****************************************************************************
N//
N// The following are defines for the base address of the memories and
N// peripherals.
N//
N//*****************************************************************************
N#define FLASH_BASE              0x00000000  // FLASH memory
N#define SRAM_BASE               0x20000000  // SRAM memory
N#define WATCHDOG0_BASE          0x40000000  // Watchdog0
N#define WATCHDOG1_BASE          0x40001000  // Watchdog1
N#define GPIO_PORTA_BASE         0x40004000  // GPIO Port A
N#define GPIO_PORTB_BASE         0x40005000  // GPIO Port B
N#define GPIO_PORTC_BASE         0x40006000  // GPIO Port C
N#define GPIO_PORTD_BASE         0x40007000  // GPIO Port D
N#define SSI0_BASE               0x40008000  // SSI0
N#define SSI1_BASE               0x40009000  // SSI1
N#define SSI2_BASE               0x4000A000  // SSI2
N#define SSI3_BASE               0x4000B000  // SSI3
N#define UART0_BASE              0x4000C000  // UART0
N#define UART1_BASE              0x4000D000  // UART1
N#define UART2_BASE              0x4000E000  // UART2
N#define UART3_BASE              0x4000F000  // UART3
N#define UART4_BASE              0x40010000  // UART4
N#define UART5_BASE              0x40011000  // UART5
N#define UART6_BASE              0x40012000  // UART6
N#define UART7_BASE              0x40013000  // UART7
N#define I2C0_MASTER_BASE        0x40020000  // I2C0 Master
N#define I2C0_SLAVE_BASE         0x40020800  // I2C0 Slave
N#define I2C1_MASTER_BASE        0x40021000  // I2C1 Master
N#define I2C1_SLAVE_BASE         0x40021800  // I2C1 Slave
N#define I2C2_MASTER_BASE        0x40022000  // I2C2 Master
N#define I2C2_SLAVE_BASE         0x40022800  // I2C2 Slave
N#define I2C3_MASTER_BASE        0x40023000  // I2C3 Master
N#define I2C3_SLAVE_BASE         0x40023800  // I2C3 Slave
N#define GPIO_PORTE_BASE         0x40024000  // GPIO Port E
N#define GPIO_PORTF_BASE         0x40025000  // GPIO Port F
N#define GPIO_PORTG_BASE         0x40026000  // GPIO Port G
N#define GPIO_PORTH_BASE         0x40027000  // GPIO Port H
N#define PWM0_BASE               0x40028000  // Pulse Width Modulator (PWM)
N#define PWM1_BASE               0x40029000  // Pulse Width Modulator (PWM)
N#define QEI0_BASE               0x4002C000  // QEI0
N#define QEI1_BASE               0x4002D000  // QEI1
N#define TIMER0_BASE             0x40030000  // Timer0
N#define TIMER1_BASE             0x40031000  // Timer1
N#define TIMER2_BASE             0x40032000  // Timer2
N#define TIMER3_BASE             0x40033000  // Timer3
N#define TIMER4_BASE             0x40034000  // Timer4
N#define TIMER5_BASE             0x40035000  // Timer5
N#define WTIMER0_BASE            0x40036000  // Wide Timer0
N#define WTIMER1_BASE            0x40037000  // Wide Timer1
N#define ADC0_BASE               0x40038000  // ADC0
N#define ADC1_BASE               0x40039000  // ADC1
N#define COMP_BASE               0x4003C000  // Analog comparators
N#define GPIO_PORTJ_BASE         0x4003D000  // GPIO Port J
N#define CAN0_BASE               0x40040000  // CAN0
N#define CAN1_BASE               0x40041000  // CAN1
N#define CAN2_BASE               0x40042000  // CAN2
N#define ETH_BASE                0x40048000  // Ethernet
N#define MAC_BASE                0x40048000  // Ethernet
N#define WTIMER2_BASE            0x4004C000  // Wide Timer2
N#define WTIMER3_BASE            0x4004D000  // Wide Timer3
N#define WTIMER4_BASE            0x4004E000  // Wide Timer4
N#define WTIMER5_BASE            0x4004F000  // Wide Timer5
N#define USB0_BASE               0x40050000  // USB 0 Controller
N#define I2S0_BASE               0x40054000  // I2S0
N#define GPIO_PORTA_AHB_BASE     0x40058000  // GPIO Port A (high speed)
N#define GPIO_PORTB_AHB_BASE     0x40059000  // GPIO Port B (high speed)
N#define GPIO_PORTC_AHB_BASE     0x4005A000  // GPIO Port C (high speed)
N#define GPIO_PORTD_AHB_BASE     0x4005B000  // GPIO Port D (high speed)
N#define GPIO_PORTE_AHB_BASE     0x4005C000  // GPIO Port E (high speed)
N#define GPIO_PORTF_AHB_BASE     0x4005D000  // GPIO Port F (high speed)
N#define GPIO_PORTG_AHB_BASE     0x4005E000  // GPIO Port G (high speed)
N#define GPIO_PORTH_AHB_BASE     0x4005F000  // GPIO Port H (high speed)
N#define GPIO_PORTJ_AHB_BASE     0x40060000  // GPIO Port J (high speed)
N#define GPIO_PORTK_BASE         0x40061000  // GPIO Port K
N#define GPIO_PORTL_BASE         0x40062000  // GPIO Port L
N#define GPIO_PORTM_BASE         0x40063000  // GPIO Port M
N#define GPIO_PORTN_BASE         0x40064000  // GPIO Port N
N#define GPIO_PORTP_BASE         0x40065000  // GPIO Port P
N#define GPIO_PORTQ_BASE         0x40066000  // GPIO Port Q
N#define LPC0_BASE               0x40080000  // Low Pin Count Interface (LPC)
N#define FAN0_BASE               0x40084000  // Fan Control (FAN)
N#define EEPROM_BASE             0x400AF000  // EEPROM memory
N#define PECI0_BASE              0x400B0000  // Platform Environment Control
N                                            // Interface (PECI)
N#define I2C4_MASTER_BASE        0x400C0000  // I2C4 Master
N#define I2C4_SLAVE_BASE         0x400C0800  // I2C4 Slave
N#define I2C5_MASTER_BASE        0x400C1000  // I2C5 Master
N#define I2C5_SLAVE_BASE         0x400C1800  // I2C5 Slave
N#define EPI0_BASE               0x400D0000  // EPI0
N#define SYSEXC_BASE             0x400F9000  // System Exception Module
N#define HIB_BASE                0x400FC000  // Hibernation Module
N#define FLASH_CTRL_BASE         0x400FD000  // FLASH Controller
N#define SYSCTL_BASE             0x400FE000  // System Control
N#define UDMA_BASE               0x400FF000  // uDMA Controller
N#define ITM_BASE                0xE0000000  // Instrumentation Trace Macrocell
N#define DWT_BASE                0xE0001000  // Data Watchpoint and Trace
N#define FPB_BASE                0xE0002000  // FLASH Patch and Breakpoint
N#define NVIC_BASE               0xE000E000  // Nested Vectored Interrupt Ctrl
N#define TPIU_BASE               0xE0040000  // Trace Port Interface Unit
N
N//*****************************************************************************
N//
N// The following definitions are deprecated.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the base address of the memories
N// and peripherals.
N//
N//*****************************************************************************
N#define WATCHDOG_BASE           0x40000000  // Watchdog
N#define SSI_BASE                0x40008000  // SSI
N#define I2C_MASTER_BASE         0x40020000  // I2C Master
N#define I2C_SLAVE_BASE          0x40020800  // I2C Slave
N#define PWM_BASE                0x40028000  // PWM
N#define QEI_BASE                0x4002C000  // QEI
N#define ADC_BASE                0x40038000  // ADC
N
N#endif
N
N#endif // __HW_MEMMAP_H__
L 28 "..\..\..\utils\uartstdio.c" 2
N#include "inc/hw_types.h"
L 1 "..\..\..\inc/hw_types.h" 1
N//*****************************************************************************
N//
N// hw_types.h - Common types and macros.
N//
N// Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_TYPES_H__
N#define __HW_TYPES_H__
N
N//*****************************************************************************
N//
N// Define a boolean type, and values for true and false.
N//
N//*****************************************************************************
Ntypedef unsigned char tBoolean;
N
N#ifndef true
N#define true 1
N#endif
N
N#ifndef false
N#define false 0
N#endif
N
N//*****************************************************************************
N//
N// Macros for hardware access, both direct and via the bit-band region.
N//
N//*****************************************************************************
N#define HWREG(x)                                                              \
N        (*((volatile unsigned long *)(x)))
X#define HWREG(x)                                                                      (*((volatile unsigned long *)(x)))
N#define HWREGH(x)                                                             \
N        (*((volatile unsigned short *)(x)))
X#define HWREGH(x)                                                                     (*((volatile unsigned short *)(x)))
N#define HWREGB(x)                                                             \
N        (*((volatile unsigned char *)(x)))
X#define HWREGB(x)                                                                     (*((volatile unsigned char *)(x)))
N#define HWREGBITW(x, b)                                                       \
N        HWREG(((unsigned long)(x) & 0xF0000000) | 0x02000000 |                \
N              (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITW(x, b)                                                               HWREG(((unsigned long)(x) & 0xF0000000) | 0x02000000 |                              (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITH(x, b)                                                       \
N        HWREGH(((unsigned long)(x) & 0xF0000000) | 0x02000000 |               \
N               (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITH(x, b)                                                               HWREGH(((unsigned long)(x) & 0xF0000000) | 0x02000000 |                              (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITB(x, b)                                                       \
N        HWREGB(((unsigned long)(x) & 0xF0000000) | 0x02000000 |               \
N               (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITB(x, b)                                                               HWREGB(((unsigned long)(x) & 0xF0000000) | 0x02000000 |                              (((unsigned long)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N
N//*****************************************************************************
N//
N// Helper Macros for determining silicon revisions, etc.
N//
N// These macros will be used by Driverlib at "run-time" to create necessary
N// conditional code blocks that will allow a single version of the Driverlib
N// "binary" code to support multiple(all) Stellaris silicon revisions.
N//
N// It is expected that these macros will be used inside of a standard 'C'
N// conditional block of code, e.g.
N//
N//     if(CLASS_IS_SANDSTORM)
N//     {
N//         do some Sandstorm-class specific code here.
N//     }
N//
N// By default, these macros will be defined as run-time checks of the
N// appropriate register(s) to allow creation of run-time conditional code
N// blocks for a common DriverLib across the entire Stellaris family.
N//
N// However, if code-space optimization is required, these macros can be "hard-
N// coded" for a specific version of Stellaris silicon.  Many compilers will
N// then detect the "hard-coded" conditionals, and appropriately optimize the
N// code blocks, eliminating any "unreachable" code.  This would result in
N// a smaller Driverlib, thus producing a smaller final application size, but
N// at the cost of limiting the Driverlib binary to a specific Stellaris
N// silicon revision.
N//
N//*****************************************************************************
N#ifndef CLASS_IS_SANDSTORM
N#define CLASS_IS_SANDSTORM                                                    \
N        (((HWREG(SYSCTL_DID0) & SYSCTL_DID0_VER_M) == SYSCTL_DID0_VER_0) ||   \
N         ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_SANDSTORM)))
X#define CLASS_IS_SANDSTORM                                                            (((HWREG(SYSCTL_DID0) & SYSCTL_DID0_VER_M) == SYSCTL_DID0_VER_0) ||            ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==           (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_SANDSTORM)))
N#endif
N
N#ifndef CLASS_IS_FURY
N#define CLASS_IS_FURY                                                        \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_FURY))
X#define CLASS_IS_FURY                                                                ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_FURY))
N#endif
N
N#ifndef CLASS_IS_DUSTDEVIL
N#define CLASS_IS_DUSTDEVIL                                                   \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_DUSTDEVIL))
X#define CLASS_IS_DUSTDEVIL                                                           ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_DUSTDEVIL))
N#endif
N
N#ifndef CLASS_IS_TEMPEST
N#define CLASS_IS_TEMPEST                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TEMPEST))
X#define CLASS_IS_TEMPEST                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TEMPEST))
N#endif
N
N#ifndef CLASS_IS_FIRESTORM
N#define CLASS_IS_FIRESTORM                                                   \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_FIRESTORM))
X#define CLASS_IS_FIRESTORM                                                           ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_FIRESTORM))
N#endif
N
N#ifndef CLASS_IS_BLIZZARD
N#define CLASS_IS_BLIZZARD                                                    \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_BLIZZARD))
X#define CLASS_IS_BLIZZARD                                                            ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_BLIZZARD))
N#endif
N
N#ifndef REVISION_IS_A0
N#define REVISION_IS_A0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A1
N#define REVISION_IS_A1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A2
N#define REVISION_IS_A2                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
X#define REVISION_IS_A2                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
N#endif
N
N#ifndef REVISION_IS_B0
N#define REVISION_IS_B0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_B0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_B1
N#define REVISION_IS_B1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
X#define REVISION_IS_B1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
N#endif
N
N#ifndef REVISION_IS_C0
N#define REVISION_IS_C0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_C0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_C1
N#define REVISION_IS_C1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_1))
X#define REVISION_IS_C1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_1))
N#endif
N
N#ifndef REVISION_IS_C2
N#define REVISION_IS_C2                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_2))
X#define REVISION_IS_C2                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_2))
N#endif
N
N#ifndef REVISION_IS_C3
N#define REVISION_IS_C3                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_3))
X#define REVISION_IS_C3                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_3))
N#endif
N
N#ifndef REVISION_IS_C5
N#define REVISION_IS_C5                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_5))
X#define REVISION_IS_C5                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVC | SYSCTL_DID0_MIN_5))
N#endif
N
N//*****************************************************************************
N//
N// Deprecated silicon class and revision detection macros.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N#define DEVICE_IS_SANDSTORM     CLASS_IS_SANDSTORM
N#define DEVICE_IS_FURY          CLASS_IS_FURY
N#define DEVICE_IS_REVA2         REVISION_IS_A2
N#define DEVICE_IS_REVC1         REVISION_IS_C1
N#define DEVICE_IS_REVC2         REVISION_IS_C2
N#endif
N
N#endif // __HW_TYPES_H__
L 29 "..\..\..\utils\uartstdio.c" 2
N#include "inc/hw_uart.h"
L 1 "..\..\..\inc/hw_uart.h" 1
N//*****************************************************************************
N//
N// hw_uart.h - Macros and defines used when accessing the UART hardware.
N//
N// Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_UART_H__
N#define __HW_UART_H__
N
N//*****************************************************************************
N//
N// The following are defines for the UART register offsets.
N//
N//*****************************************************************************
N#define UART_O_DR               0x00000000  // UART Data
N#define UART_O_RSR              0x00000004  // UART Receive Status/Error Clear
N#define UART_O_ECR              0x00000004  // UART Receive Status/Error Clear
N#define UART_O_FR               0x00000018  // UART Flag
N#define UART_O_ILPR             0x00000020  // UART IrDA Low-Power Register
N#define UART_O_IBRD             0x00000024  // UART Integer Baud-Rate Divisor
N#define UART_O_FBRD             0x00000028  // UART Fractional Baud-Rate
N                                            // Divisor
N#define UART_O_LCRH             0x0000002C  // UART Line Control
N#define UART_O_CTL              0x00000030  // UART Control
N#define UART_O_IFLS             0x00000034  // UART Interrupt FIFO Level Select
N#define UART_O_IM               0x00000038  // UART Interrupt Mask
N#define UART_O_RIS              0x0000003C  // UART Raw Interrupt Status
N#define UART_O_MIS              0x00000040  // UART Masked Interrupt Status
N#define UART_O_ICR              0x00000044  // UART Interrupt Clear
N#define UART_O_DMACTL           0x00000048  // UART DMA Control
N#define UART_O_LCTL             0x00000090  // UART LIN Control
N#define UART_O_LSS              0x00000094  // UART LIN Snap Shot
N#define UART_O_LTIM             0x00000098  // UART LIN Timer
N#define UART_O_9BITADDR         0x000000A4  // UART 9-Bit Self Address
N#define UART_O_9BITAMASK        0x000000A8  // UART 9-Bit Self Address Mask
N#define UART_O_PP               0x00000FC0  // UART Peripheral Properties
N#define UART_O_CC               0x00000FC8  // UART Clock Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_DR register.
N//
N//*****************************************************************************
N#define UART_DR_OE              0x00000800  // UART Overrun Error
N#define UART_DR_BE              0x00000400  // UART Break Error
N#define UART_DR_PE              0x00000200  // UART Parity Error
N#define UART_DR_FE              0x00000100  // UART Framing Error
N#define UART_DR_DATA_M          0x000000FF  // Data Transmitted or Received
N#define UART_DR_DATA_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_RSR register.
N//
N//*****************************************************************************
N#define UART_RSR_OE             0x00000008  // UART Overrun Error
N#define UART_RSR_BE             0x00000004  // UART Break Error
N#define UART_RSR_PE             0x00000002  // UART Parity Error
N#define UART_RSR_FE             0x00000001  // UART Framing Error
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_ECR register.
N//
N//*****************************************************************************
N#define UART_ECR_DATA_M         0x000000FF  // Error Clear
N#define UART_ECR_DATA_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_FR register.
N//
N//*****************************************************************************
N#define UART_FR_RI              0x00000100  // Ring Indicator
N#define UART_FR_TXFE            0x00000080  // UART Transmit FIFO Empty
N#define UART_FR_RXFF            0x00000040  // UART Receive FIFO Full
N#define UART_FR_TXFF            0x00000020  // UART Transmit FIFO Full
N#define UART_FR_RXFE            0x00000010  // UART Receive FIFO Empty
N#define UART_FR_BUSY            0x00000008  // UART Busy
N#define UART_FR_DCD             0x00000004  // Data Carrier Detect
N#define UART_FR_DSR             0x00000002  // Data Set Ready
N#define UART_FR_CTS             0x00000001  // Clear To Send
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_ILPR register.
N//
N//*****************************************************************************
N#define UART_ILPR_ILPDVSR_M     0x000000FF  // IrDA Low-Power Divisor
N#define UART_ILPR_ILPDVSR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_IBRD register.
N//
N//*****************************************************************************
N#define UART_IBRD_DIVINT_M      0x0000FFFF  // Integer Baud-Rate Divisor
N#define UART_IBRD_DIVINT_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_FBRD register.
N//
N//*****************************************************************************
N#define UART_FBRD_DIVFRAC_M     0x0000003F  // Fractional Baud-Rate Divisor
N#define UART_FBRD_DIVFRAC_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_LCRH register.
N//
N//*****************************************************************************
N#define UART_LCRH_SPS           0x00000080  // UART Stick Parity Select
N#define UART_LCRH_WLEN_M        0x00000060  // UART Word Length
N#define UART_LCRH_WLEN_5        0x00000000  // 5 bits (default)
N#define UART_LCRH_WLEN_6        0x00000020  // 6 bits
N#define UART_LCRH_WLEN_7        0x00000040  // 7 bits
N#define UART_LCRH_WLEN_8        0x00000060  // 8 bits
N#define UART_LCRH_FEN           0x00000010  // UART Enable FIFOs
N#define UART_LCRH_STP2          0x00000008  // UART Two Stop Bits Select
N#define UART_LCRH_EPS           0x00000004  // UART Even Parity Select
N#define UART_LCRH_PEN           0x00000002  // UART Parity Enable
N#define UART_LCRH_BRK           0x00000001  // UART Send Break
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_CTL register.
N//
N//*****************************************************************************
N#define UART_CTL_CTSEN          0x00008000  // Enable Clear To Send
N#define UART_CTL_RTSEN          0x00004000  // Enable Request to Send
N#define UART_CTL_RTS            0x00000800  // Request to Send
N#define UART_CTL_DTR            0x00000400  // Data Terminal Ready
N#define UART_CTL_RXE            0x00000200  // UART Receive Enable
N#define UART_CTL_TXE            0x00000100  // UART Transmit Enable
N#define UART_CTL_LBE            0x00000080  // UART Loop Back Enable
N#define UART_CTL_LIN            0x00000040  // LIN Mode Enable
N#define UART_CTL_HSE            0x00000020  // High-Speed Enable
N#define UART_CTL_EOT            0x00000010  // End of Transmission
N#define UART_CTL_SMART          0x00000008  // ISO 7816 Smart Card Support
N#define UART_CTL_SIRLP          0x00000004  // UART SIR Low-Power Mode
N#define UART_CTL_SIREN          0x00000002  // UART SIR Enable
N#define UART_CTL_UARTEN         0x00000001  // UART Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_IFLS register.
N//
N//*****************************************************************************
N#define UART_IFLS_RX_M          0x00000038  // UART Receive Interrupt FIFO
N                                            // Level Select
N#define UART_IFLS_RX1_8         0x00000000  // RX FIFO >= 1/8 full
N#define UART_IFLS_RX2_8         0x00000008  // RX FIFO >= 1/4 full
N#define UART_IFLS_RX4_8         0x00000010  // RX FIFO >= 1/2 full (default)
N#define UART_IFLS_RX6_8         0x00000018  // RX FIFO >= 3/4 full
N#define UART_IFLS_RX7_8         0x00000020  // RX FIFO >= 7/8 full
N#define UART_IFLS_TX_M          0x00000007  // UART Transmit Interrupt FIFO
N                                            // Level Select
N#define UART_IFLS_TX1_8         0x00000000  // TX FIFO <= 1/8 full
N#define UART_IFLS_TX2_8         0x00000001  // TX FIFO <= 1/4 full
N#define UART_IFLS_TX4_8         0x00000002  // TX FIFO <= 1/2 full (default)
N#define UART_IFLS_TX6_8         0x00000003  // TX FIFO <= 3/4 full
N#define UART_IFLS_TX7_8         0x00000004  // TX FIFO <= 7/8 full
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_IM register.
N//
N//*****************************************************************************
N#define UART_IM_LME5IM          0x00008000  // LIN Mode Edge 5 Interrupt Mask
N#define UART_IM_LME1IM          0x00004000  // LIN Mode Edge 1 Interrupt Mask
N#define UART_IM_LMSBIM          0x00002000  // LIN Mode Sync Break Interrupt
N                                            // Mask
N#define UART_IM_9BITIM          0x00001000  // 9-Bit Mode Interrupt Mask
N#define UART_IM_OEIM            0x00000400  // UART Overrun Error Interrupt
N                                            // Mask
N#define UART_IM_BEIM            0x00000200  // UART Break Error Interrupt Mask
N#define UART_IM_PEIM            0x00000100  // UART Parity Error Interrupt Mask
N#define UART_IM_FEIM            0x00000080  // UART Framing Error Interrupt
N                                            // Mask
N#define UART_IM_RTIM            0x00000040  // UART Receive Time-Out Interrupt
N                                            // Mask
N#define UART_IM_TXIM            0x00000020  // UART Transmit Interrupt Mask
N#define UART_IM_RXIM            0x00000010  // UART Receive Interrupt Mask
N#define UART_IM_DSRMIM          0x00000008  // UART Data Set Ready Modem
N                                            // Interrupt Mask
N#define UART_IM_DCDMIM          0x00000004  // UART Data Carrier Detect Modem
N                                            // Interrupt Mask
N#define UART_IM_CTSMIM          0x00000002  // UART Clear to Send Modem
N                                            // Interrupt Mask
N#define UART_IM_RIMIM           0x00000001  // UART Ring Indicator Modem
N                                            // Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_RIS register.
N//
N//*****************************************************************************
N#define UART_RIS_LME5RIS        0x00008000  // LIN Mode Edge 5 Raw Interrupt
N                                            // Status
N#define UART_RIS_LME1RIS        0x00004000  // LIN Mode Edge 1 Raw Interrupt
N                                            // Status
N#define UART_RIS_LMSBRIS        0x00002000  // LIN Mode Sync Break Raw
N                                            // Interrupt Status
N#define UART_RIS_9BITRIS        0x00001000  // 9-Bit Mode Raw Interrupt Status
N#define UART_RIS_OERIS          0x00000400  // UART Overrun Error Raw Interrupt
N                                            // Status
N#define UART_RIS_BERIS          0x00000200  // UART Break Error Raw Interrupt
N                                            // Status
N#define UART_RIS_PERIS          0x00000100  // UART Parity Error Raw Interrupt
N                                            // Status
N#define UART_RIS_FERIS          0x00000080  // UART Framing Error Raw Interrupt
N                                            // Status
N#define UART_RIS_RTRIS          0x00000040  // UART Receive Time-Out Raw
N                                            // Interrupt Status
N#define UART_RIS_TXRIS          0x00000020  // UART Transmit Raw Interrupt
N                                            // Status
N#define UART_RIS_RXRIS          0x00000010  // UART Receive Raw Interrupt
N                                            // Status
N#define UART_RIS_DSRRIS         0x00000008  // UART Data Set Ready Modem Raw
N                                            // Interrupt Status
N#define UART_RIS_DCDRIS         0x00000004  // UART Data Carrier Detect Modem
N                                            // Raw Interrupt Status
N#define UART_RIS_CTSRIS         0x00000002  // UART Clear to Send Modem Raw
N                                            // Interrupt Status
N#define UART_RIS_RIRIS          0x00000001  // UART Ring Indicator Modem Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_MIS register.
N//
N//*****************************************************************************
N#define UART_MIS_LME5MIS        0x00008000  // LIN Mode Edge 5 Masked Interrupt
N                                            // Status
N#define UART_MIS_LME1MIS        0x00004000  // LIN Mode Edge 1 Masked Interrupt
N                                            // Status
N#define UART_MIS_LMSBMIS        0x00002000  // LIN Mode Sync Break Masked
N                                            // Interrupt Status
N#define UART_MIS_9BITMIS        0x00001000  // 9-Bit Mode Masked Interrupt
N                                            // Status
N#define UART_MIS_OEMIS          0x00000400  // UART Overrun Error Masked
N                                            // Interrupt Status
N#define UART_MIS_BEMIS          0x00000200  // UART Break Error Masked
N                                            // Interrupt Status
N#define UART_MIS_PEMIS          0x00000100  // UART Parity Error Masked
N                                            // Interrupt Status
N#define UART_MIS_FEMIS          0x00000080  // UART Framing Error Masked
N                                            // Interrupt Status
N#define UART_MIS_RTMIS          0x00000040  // UART Receive Time-Out Masked
N                                            // Interrupt Status
N#define UART_MIS_TXMIS          0x00000020  // UART Transmit Masked Interrupt
N                                            // Status
N#define UART_MIS_RXMIS          0x00000010  // UART Receive Masked Interrupt
N                                            // Status
N#define UART_MIS_DSRMIS         0x00000008  // UART Data Set Ready Modem Masked
N                                            // Interrupt Status
N#define UART_MIS_DCDMIS         0x00000004  // UART Data Carrier Detect Modem
N                                            // Masked Interrupt Status
N#define UART_MIS_CTSMIS         0x00000002  // UART Clear to Send Modem Masked
N                                            // Interrupt Status
N#define UART_MIS_RIMIS          0x00000001  // UART Ring Indicator Modem Masked
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_ICR register.
N//
N//*****************************************************************************
N#define UART_ICR_LME5IC         0x00008000  // LIN Mode Edge 5 Interrupt Clear
N#define UART_ICR_LME1IC         0x00004000  // LIN Mode Edge 1 Interrupt Clear
N#define UART_ICR_LMSBIC         0x00002000  // LIN Mode Sync Break Interrupt
N                                            // Clear
N#define UART_ICR_9BITIC         0x00001000  // 9-Bit Mode Interrupt Clear
N#define UART_ICR_OEIC           0x00000400  // Overrun Error Interrupt Clear
N#define UART_ICR_BEIC           0x00000200  // Break Error Interrupt Clear
N#define UART_ICR_PEIC           0x00000100  // Parity Error Interrupt Clear
N#define UART_ICR_FEIC           0x00000080  // Framing Error Interrupt Clear
N#define UART_ICR_RTIC           0x00000040  // Receive Time-Out Interrupt Clear
N#define UART_ICR_TXIC           0x00000020  // Transmit Interrupt Clear
N#define UART_ICR_RXIC           0x00000010  // Receive Interrupt Clear
N#define UART_ICR_DSRMIC         0x00000008  // UART Data Set Ready Modem
N                                            // Interrupt Clear
N#define UART_ICR_DCDMIC         0x00000004  // UART Data Carrier Detect Modem
N                                            // Interrupt Clear
N#define UART_ICR_CTSMIC         0x00000002  // UART Clear to Send Modem
N                                            // Interrupt Clear
N#define UART_ICR_RIMIC          0x00000001  // UART Ring Indicator Modem
N                                            // Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_DMACTL register.
N//
N//*****************************************************************************
N#define UART_DMACTL_DMAERR      0x00000004  // DMA on Error
N#define UART_DMACTL_TXDMAE      0x00000002  // Transmit DMA Enable
N#define UART_DMACTL_RXDMAE      0x00000001  // Receive DMA Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_LCTL register.
N//
N//*****************************************************************************
N#define UART_LCTL_BLEN_M        0x00000030  // Sync Break Length
N#define UART_LCTL_BLEN_13T      0x00000000  // Sync break length is 13T bits
N                                            // (default)
N#define UART_LCTL_BLEN_14T      0x00000010  // Sync break length is 14T bits
N#define UART_LCTL_BLEN_15T      0x00000020  // Sync break length is 15T bits
N#define UART_LCTL_BLEN_16T      0x00000030  // Sync break length is 16T bits
N#define UART_LCTL_MASTER        0x00000001  // LIN Master Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_LSS register.
N//
N//*****************************************************************************
N#define UART_LSS_TSS_M          0x0000FFFF  // Timer Snap Shot
N#define UART_LSS_TSS_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_LTIM register.
N//
N//*****************************************************************************
N#define UART_LTIM_TIMER_M       0x0000FFFF  // Timer Value
N#define UART_LTIM_TIMER_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_9BITADDR
N// register.
N//
N//*****************************************************************************
N#define UART_9BITADDR_9BITEN    0x00008000  // Enable 9-Bit Mode
N#define UART_9BITADDR_ADDR_M    0x000000FF  // Self Address for 9-Bit Mode
N#define UART_9BITADDR_ADDR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_9BITAMASK
N// register.
N//
N//*****************************************************************************
N#define UART_9BITAMASK_MASK_M   0x000000FF  // Self Address Mask for 9-Bit Mode
N#define UART_9BITAMASK_MASK_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_PP register.
N//
N//*****************************************************************************
N#define UART_PP_NB              0x00000002  // 9-Bit Support
N#define UART_PP_SC              0x00000001  // Smart Card Support
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_CC register.
N//
N//*****************************************************************************
N#define UART_CC_CS_M            0x0000000F  // UART Baud Clock Source
N#define UART_CC_CS_SYSCLK       0x00000000  // The system clock (default)
N#define UART_CC_CS_PIOSC        0x00000005  // PIOSC
N
N//*****************************************************************************
N//
N// The following definitions are deprecated.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the UART register offsets.
N//
N//*****************************************************************************
N#define UART_O_LCR_H            0x0000002C  // Line Control Register, HIGH byte
N#define UART_O_PeriphID4        0x00000FD0
N#define UART_O_PeriphID5        0x00000FD4
N#define UART_O_PeriphID6        0x00000FD8
N#define UART_O_PeriphID7        0x00000FDC
N#define UART_O_PeriphID0        0x00000FE0
N#define UART_O_PeriphID1        0x00000FE4
N#define UART_O_PeriphID2        0x00000FE8
N#define UART_O_PeriphID3        0x00000FEC
N#define UART_O_PCellID0         0x00000FF0
N#define UART_O_PCellID1         0x00000FF4
N#define UART_O_PCellID2         0x00000FF8
N#define UART_O_PCellID3         0x00000FFC
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the UART_O_DR
N// register.
N//
N//*****************************************************************************
N#define UART_DR_DATA_MASK       0x000000FF  // UART data
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the UART_O_IBRD
N// register.
N//
N//*****************************************************************************
N#define UART_IBRD_DIVINT_MASK   0x0000FFFF  // Integer baud-rate divisor
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the UART_O_FBRD
N// register.
N//
N//*****************************************************************************
N#define UART_FBRD_DIVFRAC_MASK  0x0000003F  // Fractional baud-rate divisor
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the UART_O_LCR_H
N// register.
N//
N//*****************************************************************************
N#define UART_LCR_H_SPS          0x00000080  // Stick Parity Select
N#define UART_LCR_H_WLEN         0x00000060  // Word length
N#define UART_LCR_H_WLEN_5       0x00000000  // 5 bit data
N#define UART_LCR_H_WLEN_6       0x00000020  // 6 bit data
N#define UART_LCR_H_WLEN_7       0x00000040  // 7 bit data
N#define UART_LCR_H_WLEN_8       0x00000060  // 8 bit data
N#define UART_LCR_H_FEN          0x00000010  // Enable FIFO
N#define UART_LCR_H_STP2         0x00000008  // Two Stop Bits Select
N#define UART_LCR_H_EPS          0x00000004  // Even Parity Select
N#define UART_LCR_H_PEN          0x00000002  // Parity Enable
N#define UART_LCR_H_BRK          0x00000001  // Send Break
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the UART_O_IFLS
N// register.
N//
N//*****************************************************************************
N#define UART_IFLS_RX_MASK       0x00000038  // RX FIFO level mask
N#define UART_IFLS_TX_MASK       0x00000007  // TX FIFO level mask
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the UART_O_ICR
N// register.
N//
N//*****************************************************************************
N#define UART_ICR_LME5MIC        0x00008000  // LIN Mode Edge 5 Interrupt Clear
N#define UART_ICR_LME1MIC        0x00004000  // LIN Mode Edge 1 Interrupt Clear
N#define UART_ICR_LMSBMIC        0x00002000  // LIN Mode Sync Break Interrupt
N                                            // Clear
N#define UART_RSR_ANY            (UART_RSR_OE | UART_RSR_BE | UART_RSR_PE | \
N                                 UART_RSR_FE)
X#define UART_RSR_ANY            (UART_RSR_OE | UART_RSR_BE | UART_RSR_PE |                                  UART_RSR_FE)
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the Reset Values for UART
N// Registers.
N//
N//*****************************************************************************
N#define UART_RV_CTL             0x00000300
N#define UART_RV_PCellID1        0x000000F0
N#define UART_RV_PCellID3        0x000000B1
N#define UART_RV_FR              0x00000090
N#define UART_RV_PeriphID2       0x00000018
N#define UART_RV_IFLS            0x00000012
N#define UART_RV_PeriphID0       0x00000011
N#define UART_RV_PCellID0        0x0000000D
N#define UART_RV_PCellID2        0x00000005
N#define UART_RV_PeriphID3       0x00000001
N#define UART_RV_PeriphID4       0x00000000
N#define UART_RV_LCR_H           0x00000000
N#define UART_RV_PeriphID6       0x00000000
N#define UART_RV_DR              0x00000000
N#define UART_RV_RSR             0x00000000
N#define UART_RV_ECR             0x00000000
N#define UART_RV_PeriphID5       0x00000000
N#define UART_RV_RIS             0x00000000
N#define UART_RV_FBRD            0x00000000
N#define UART_RV_IM              0x00000000
N#define UART_RV_MIS             0x00000000
N#define UART_RV_ICR             0x00000000
N#define UART_RV_PeriphID1       0x00000000
N#define UART_RV_PeriphID7       0x00000000
N#define UART_RV_IBRD            0x00000000
N
N#endif
N
N#endif // __HW_UART_H__
L 30 "..\..\..\utils\uartstdio.c" 2
N#include "driverlib/debug.h"
L 1 "..\..\..\driverlib/debug.h" 1
N//*****************************************************************************
N//
N// debug.h - Macros for assisting debug of the driver library.
N//
N// Copyright (c) 2006-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DEBUG_H__
N#define __DEBUG_H__
N
N//*****************************************************************************
N//
N// Prototype for the function that is called when an invalid argument is passed
N// to an API.  This is only used when doing a DEBUG build.
N//
N//*****************************************************************************
Nextern void __error__(char *pcFilename, unsigned long ulLine);
N
N//*****************************************************************************
N//
N// The ASSERT macro, which does the actual assertion checking.  Typically, this
N// will be for procedure arguments.
N//
N//*****************************************************************************
N#ifdef DEBUG
S#define ASSERT(expr) {                                      \
S                         if(!(expr))                        \
S                         {                                  \
S                             __error__(__FILE__, __LINE__); \
S                         }                                  \
S                     }
X#define ASSERT(expr) {                                                               if(!(expr))                                                 {                                                               __error__(__FILE__, __LINE__);                          }                                                       }
N#else
N#define ASSERT(expr)
N#endif
N
N#endif // __DEBUG_H__
L 31 "..\..\..\utils\uartstdio.c" 2
N#include "driverlib/interrupt.h"
L 1 "..\..\..\driverlib/interrupt.h" 1
N//*****************************************************************************
N//
N// interrupt.h - Prototypes for the NVIC Interrupt Controller Driver.
N//
N// Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __INTERRUPT_H__
N#define __INTERRUPT_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Macro to generate an interrupt priority mask based on the number of bits
N// of priority supported by the hardware.
N//
N//*****************************************************************************
N#define INT_PRIORITY_MASK       ((0xFF << (8 - NUM_PRIORITY_BITS)) & 0xFF)
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern tBoolean IntMasterEnable(void);
Nextern tBoolean IntMasterDisable(void);
Nextern void IntRegister(unsigned long ulInterrupt, void (*pfnHandler)(void));
Nextern void IntUnregister(unsigned long ulInterrupt);
Nextern void IntPriorityGroupingSet(unsigned long ulBits);
Nextern unsigned long IntPriorityGroupingGet(void);
Nextern void IntPrioritySet(unsigned long ulInterrupt,
N                           unsigned char ucPriority);
Nextern long IntPriorityGet(unsigned long ulInterrupt);
Nextern void IntEnable(unsigned long ulInterrupt);
Nextern void IntDisable(unsigned long ulInterrupt);
Nextern unsigned long IntIsEnabled(unsigned long ulInterrupt);
Nextern void IntPendSet(unsigned long ulInterrupt);
Nextern void IntPendClear(unsigned long ulInterrupt);
Nextern void IntPriorityMaskSet(unsigned long ulPriorityMask);
Nextern unsigned long IntPriorityMaskGet(void);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __INTERRUPT_H__
L 32 "..\..\..\utils\uartstdio.c" 2
N#include "driverlib/rom.h"
L 1 "..\..\..\driverlib/rom.h" 1
N//*****************************************************************************
N//
N// rom.h - Macros to facilitate calling functions in the ROM.
N//
N// Copyright (c) 2007-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __ROM_H__
N#define __ROM_H__
N
N//*****************************************************************************
N//
N// Pointers to the main API tables.
N//
N//*****************************************************************************
N#define ROM_APITABLE            ((unsigned long *)0x01000010)
N#define ROM_VERSION             (ROM_APITABLE[0])
N#define ROM_UARTTABLE           ((unsigned long *)(ROM_APITABLE[1]))
N#define ROM_SSITABLE            ((unsigned long *)(ROM_APITABLE[2]))
N#define ROM_I2CTABLE            ((unsigned long *)(ROM_APITABLE[3]))
N#define ROM_GPIOTABLE           ((unsigned long *)(ROM_APITABLE[4]))
N#define ROM_ADCTABLE            ((unsigned long *)(ROM_APITABLE[5]))
N#define ROM_COMPARATORTABLE     ((unsigned long *)(ROM_APITABLE[6]))
N#define ROM_FLASHTABLE          ((unsigned long *)(ROM_APITABLE[7]))
N#define ROM_PWMTABLE            ((unsigned long *)(ROM_APITABLE[8]))
N#define ROM_QEITABLE            ((unsigned long *)(ROM_APITABLE[9]))
N#define ROM_SYSTICKTABLE        ((unsigned long *)(ROM_APITABLE[10]))
N#define ROM_TIMERTABLE          ((unsigned long *)(ROM_APITABLE[11]))
N#define ROM_WATCHDOGTABLE       ((unsigned long *)(ROM_APITABLE[12]))
N#define ROM_SYSCTLTABLE         ((unsigned long *)(ROM_APITABLE[13]))
N#define ROM_INTERRUPTTABLE      ((unsigned long *)(ROM_APITABLE[14]))
N#define ROM_ETHERNETTABLE       ((unsigned long *)(ROM_APITABLE[15]))
N#define ROM_USBTABLE            ((unsigned long *)(ROM_APITABLE[16]))
N#define ROM_UDMATABLE           ((unsigned long *)(ROM_APITABLE[17]))
N#define ROM_CANTABLE            ((unsigned long *)(ROM_APITABLE[18]))
N#define ROM_HIBERNATETABLE      ((unsigned long *)(ROM_APITABLE[19]))
N#define ROM_MPUTABLE            ((unsigned long *)(ROM_APITABLE[20]))
N#define ROM_SOFTWARETABLE       ((unsigned long *)(ROM_APITABLE[21]))
N#define ROM_I2STABLE            ((unsigned long *)(ROM_APITABLE[22]))
N#define ROM_EPITABLE            ((unsigned long *)(ROM_APITABLE[23]))
N#define ROM_FANTABLE            ((unsigned long *)(ROM_APITABLE[25]))
N#define ROM_FPUTABLE            ((unsigned long *)(ROM_APITABLE[26]))
N#define ROM_LPCTABLE            ((unsigned long *)(ROM_APITABLE[27]))
N#define ROM_PECITABLE           ((unsigned long *)(ROM_APITABLE[28]))
N#define ROM_SMBUSTABLE          ((unsigned long *)(ROM_APITABLE[29]))
N#define ROM_SYSEXCTABLE         ((unsigned long *)(ROM_APITABLE[30]))
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the ADC API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCSequenceDataGet                                                \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum,                               \
N                   unsigned long *pulBuffer))ROM_ADCTABLE[0])
X#define ROM_ADCSequenceDataGet                                                        ((long (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum,                                                  unsigned long *pulBuffer))ROM_ADCTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCIntDisable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[1])
X#define ROM_ADCIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCIntEnable                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[2])
X#define ROM_ADCIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCIntStatus                                                      \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulSequenceNum,                      \
N                            tBoolean bMasked))ROM_ADCTABLE[3])
X#define ROM_ADCIntStatus                                                              ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum,                                                  tBoolean bMasked))ROM_ADCTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCIntClear                                                       \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[4])
X#define ROM_ADCIntClear                                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCSequenceEnable                                                 \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[5])
X#define ROM_ADCSequenceEnable                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCSequenceDisable                                                \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[6])
X#define ROM_ADCSequenceDisable                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCSequenceConfigure                                              \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum,                               \
N                   unsigned long ulTrigger,                                   \
N                   unsigned long ulPriority))ROM_ADCTABLE[7])
X#define ROM_ADCSequenceConfigure                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum,                                                  unsigned long ulTrigger,                                                      unsigned long ulPriority))ROM_ADCTABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCSequenceStepConfigure                                          \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum,                               \
N                   unsigned long ulStep,                                      \
N                   unsigned long ulConfig))ROM_ADCTABLE[8])
X#define ROM_ADCSequenceStepConfigure                                                  ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum,                                                  unsigned long ulStep,                                                         unsigned long ulConfig))ROM_ADCTABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCSequenceOverflow                                               \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[9])
X#define ROM_ADCSequenceOverflow                                                       ((long (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCSequenceOverflowClear                                          \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[10])
X#define ROM_ADCSequenceOverflowClear                                                  ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCSequenceUnderflow                                              \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[11])
X#define ROM_ADCSequenceUnderflow                                                      ((long (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[11])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCSequenceUnderflowClear                                         \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[12])
X#define ROM_ADCSequenceUnderflowClear                                                 ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[12])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCProcessorTrigger                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSequenceNum))ROM_ADCTABLE[13])
X#define ROM_ADCProcessorTrigger                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[13])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ADCHardwareOversampleConfigure                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulFactor))ROM_ADCTABLE[14])
X#define ROM_ADCHardwareOversampleConfigure                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulFactor))ROM_ADCTABLE[14])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_ADCComparatorConfigure                                            \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulComp,                                      \
S                   unsigned long ulConfig))ROM_ADCTABLE[15])
X#define ROM_ADCComparatorConfigure                                                    ((void (*)(unsigned long ulBase,                                                         unsigned long ulComp,                                                         unsigned long ulConfig))ROM_ADCTABLE[15])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_ADCComparatorRegionSet                                            \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulComp,                                      \
S                   unsigned long ulLowRef,                                    \
S                   unsigned long ulHighRef))ROM_ADCTABLE[16])
X#define ROM_ADCComparatorRegionSet                                                    ((void (*)(unsigned long ulBase,                                                         unsigned long ulComp,                                                         unsigned long ulLowRef,                                                       unsigned long ulHighRef))ROM_ADCTABLE[16])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_ADCComparatorReset                                                \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulComp,                                      \
S                   tBoolean bTrigger,                                         \
S                   tBoolean bInterrupt))ROM_ADCTABLE[17])
X#define ROM_ADCComparatorReset                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulComp,                                                         tBoolean bTrigger,                                                            tBoolean bInterrupt))ROM_ADCTABLE[17])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_ADCComparatorIntDisable                                           \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulSequenceNum))ROM_ADCTABLE[18])
X#define ROM_ADCComparatorIntDisable                                                   ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[18])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_ADCComparatorIntEnable                                            \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulSequenceNum))ROM_ADCTABLE[19])
X#define ROM_ADCComparatorIntEnable                                                    ((void (*)(unsigned long ulBase,                                                         unsigned long ulSequenceNum))ROM_ADCTABLE[19])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_ADCComparatorIntStatus                                            \
S        ((unsigned long (*)(unsigned long ulBase))ROM_ADCTABLE[20])
X#define ROM_ADCComparatorIntStatus                                                    ((unsigned long (*)(unsigned long ulBase))ROM_ADCTABLE[20])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_ADCComparatorIntClear                                             \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulStatus))ROM_ADCTABLE[21])
X#define ROM_ADCComparatorIntClear                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulStatus))ROM_ADCTABLE[21])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_ADCReferenceSet                                                   \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulRef))ROM_ADCTABLE[22])
X#define ROM_ADCReferenceSet                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long ulRef))ROM_ADCTABLE[22])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_ADCReferenceGet                                                   \
S        ((unsigned long (*)(unsigned long ulBase))ROM_ADCTABLE[23])
X#define ROM_ADCReferenceGet                                                           ((unsigned long (*)(unsigned long ulBase))ROM_ADCTABLE[23])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_ADCPhaseDelaySet                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulPhase))ROM_ADCTABLE[24])
X#define ROM_ADCPhaseDelaySet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulPhase))ROM_ADCTABLE[24])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_ADCPhaseDelayGet                                                  \
S        ((unsigned long (*)(unsigned long ulBase))ROM_ADCTABLE[25])
X#define ROM_ADCPhaseDelayGet                                                          ((unsigned long (*)(unsigned long ulBase))ROM_ADCTABLE[25])
N#endif
N#if defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L
S#define ROM_ADCResolutionSet                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulResolution))ROM_ADCTABLE[26])
X#define ROM_ADCResolutionSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulResolution))ROM_ADCTABLE[26])
N#endif
N#if defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L
S#define ROM_ADCResolutionGet                                                  \
S        ((unsigned long (*)(unsigned long ulBase))ROM_ADCTABLE[27])
X#define ROM_ADCResolutionGet                                                          ((unsigned long (*)(unsigned long ulBase))ROM_ADCTABLE[27])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the CAN API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANIntClear                                                       \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntClr))ROM_CANTABLE[0])
X#define ROM_CANIntClear                                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntClr))ROM_CANTABLE[0])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANInit                                                           \
N        ((void (*)(unsigned long ulBase))ROM_CANTABLE[1])
X#define ROM_CANInit                                                                   ((void (*)(unsigned long ulBase))ROM_CANTABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANEnable                                                         \
N        ((void (*)(unsigned long ulBase))ROM_CANTABLE[2])
X#define ROM_CANEnable                                                                 ((void (*)(unsigned long ulBase))ROM_CANTABLE[2])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANDisable                                                        \
N        ((void (*)(unsigned long ulBase))ROM_CANTABLE[3])
X#define ROM_CANDisable                                                                ((void (*)(unsigned long ulBase))ROM_CANTABLE[3])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANBitTimingSet                                                   \
N        ((void (*)(unsigned long ulBase,                                      \
N                   tCANBitClkParms *pClkParms))ROM_CANTABLE[4])
X#define ROM_CANBitTimingSet                                                           ((void (*)(unsigned long ulBase,                                                         tCANBitClkParms *pClkParms))ROM_CANTABLE[4])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANBitTimingGet                                                   \
N        ((void (*)(unsigned long ulBase,                                      \
N                   tCANBitClkParms *pClkParms))ROM_CANTABLE[5])
X#define ROM_CANBitTimingGet                                                           ((void (*)(unsigned long ulBase,                                                         tCANBitClkParms *pClkParms))ROM_CANTABLE[5])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANMessageSet                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulObjID,                                     \
N                   tCANMsgObject *pMsgObject,                                 \
N                   tMsgObjType eMsgType))ROM_CANTABLE[6])
X#define ROM_CANMessageSet                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulObjID,                                                        tCANMsgObject *pMsgObject,                                                    tMsgObjType eMsgType))ROM_CANTABLE[6])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANMessageGet                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulObjID,                                     \
N                   tCANMsgObject *pMsgObject,                                 \
N                   tBoolean bClrPendingInt))ROM_CANTABLE[7])
X#define ROM_CANMessageGet                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulObjID,                                                        tCANMsgObject *pMsgObject,                                                    tBoolean bClrPendingInt))ROM_CANTABLE[7])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANStatusGet                                                      \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            tCANStsReg eStatusReg))ROM_CANTABLE[8])
X#define ROM_CANStatusGet                                                              ((unsigned long (*)(unsigned long ulBase,                                                         tCANStsReg eStatusReg))ROM_CANTABLE[8])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANMessageClear                                                   \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulObjID))ROM_CANTABLE[9])
X#define ROM_CANMessageClear                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long ulObjID))ROM_CANTABLE[9])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANIntEnable                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_CANTABLE[10])
X#define ROM_CANIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_CANTABLE[10])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANIntDisable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_CANTABLE[11])
X#define ROM_CANIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_CANTABLE[11])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANIntStatus                                                      \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            tCANIntStsReg eIntStsReg))ROM_CANTABLE[12])
X#define ROM_CANIntStatus                                                              ((unsigned long (*)(unsigned long ulBase,                                                         tCANIntStsReg eIntStsReg))ROM_CANTABLE[12])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANRetryGet                                                       \
N        ((tBoolean (*)(unsigned long ulBase))ROM_CANTABLE[13])
X#define ROM_CANRetryGet                                                               ((tBoolean (*)(unsigned long ulBase))ROM_CANTABLE[13])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANRetrySet                                                       \
N        ((void (*)(unsigned long ulBase,                                      \
N                   tBoolean bAutoRetry))ROM_CANTABLE[14])
X#define ROM_CANRetrySet                                                               ((void (*)(unsigned long ulBase,                                                         tBoolean bAutoRetry))ROM_CANTABLE[14])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_CANErrCntrGet                                                     \
N        ((tBoolean (*)(unsigned long ulBase,                                  \
N                       unsigned long *pulRxCount,                             \
N                       unsigned long *pulTxCount))ROM_CANTABLE[15])
X#define ROM_CANErrCntrGet                                                             ((tBoolean (*)(unsigned long ulBase,                                                         unsigned long *pulRxCount,                                                    unsigned long *pulTxCount))ROM_CANTABLE[15])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_CANBitRateSet                                                     \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulSourceClock,                      \
S                            unsigned long ulBitRate))ROM_CANTABLE[16])
X#define ROM_CANBitRateSet                                                             ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulSourceClock,                                                  unsigned long ulBitRate))ROM_CANTABLE[16])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Comparator API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ComparatorIntClear                                                \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulComp))ROM_COMPARATORTABLE[0])
X#define ROM_ComparatorIntClear                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulComp))ROM_COMPARATORTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ComparatorConfigure                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulComp,                                      \
N                   unsigned long ulConfig))ROM_COMPARATORTABLE[1])
X#define ROM_ComparatorConfigure                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulComp,                                                         unsigned long ulConfig))ROM_COMPARATORTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ComparatorRefSet                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulRef))ROM_COMPARATORTABLE[2])
X#define ROM_ComparatorRefSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulRef))ROM_COMPARATORTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ComparatorValueGet                                                \
N        ((tBoolean (*)(unsigned long ulBase,                                  \
N                       unsigned long ulComp))ROM_COMPARATORTABLE[3])
X#define ROM_ComparatorValueGet                                                        ((tBoolean (*)(unsigned long ulBase,                                                         unsigned long ulComp))ROM_COMPARATORTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ComparatorIntEnable                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulComp))ROM_COMPARATORTABLE[4])
X#define ROM_ComparatorIntEnable                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulComp))ROM_COMPARATORTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ComparatorIntDisable                                              \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulComp))ROM_COMPARATORTABLE[5])
X#define ROM_ComparatorIntDisable                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulComp))ROM_COMPARATORTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_ComparatorIntStatus                                               \
N        ((tBoolean (*)(unsigned long ulBase,                                  \
N                       unsigned long ulComp,                                  \
N                       tBoolean bMasked))ROM_COMPARATORTABLE[6])
X#define ROM_ComparatorIntStatus                                                       ((tBoolean (*)(unsigned long ulBase,                                                         unsigned long ulComp,                                                         tBoolean bMasked))ROM_COMPARATORTABLE[6])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the EPI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIIntStatus                                                      \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            tBoolean bMasked))ROM_EPITABLE[0])
X#define ROM_EPIIntStatus                                                              ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_EPITABLE[0])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIModeSet                                                        \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulMode))ROM_EPITABLE[1])
X#define ROM_EPIModeSet                                                                ((void (*)(unsigned long ulBase,                                                         unsigned long ulMode))ROM_EPITABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIDividerSet                                                     \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulDivider))ROM_EPITABLE[2])
X#define ROM_EPIDividerSet                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulDivider))ROM_EPITABLE[2])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIConfigSDRAMSet                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig,                                    \
S                   unsigned long ulRefresh))ROM_EPITABLE[3])
X#define ROM_EPIConfigSDRAMSet                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig,                                                       unsigned long ulRefresh))ROM_EPITABLE[3])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIConfigGPModeSet                                                \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig,                                    \
S                   unsigned long ulFrameCount,                                \
S                   unsigned long ulMaxWait))ROM_EPITABLE[4])
X#define ROM_EPIConfigGPModeSet                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig,                                                       unsigned long ulFrameCount,                                                   unsigned long ulMaxWait))ROM_EPITABLE[4])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIConfigHB8Set                                                   \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig,                                    \
S                   unsigned long ulMaxWait))ROM_EPITABLE[5])
X#define ROM_EPIConfigHB8Set                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig,                                                       unsigned long ulMaxWait))ROM_EPITABLE[5])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIConfigHB16Set                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig,                                    \
S                   unsigned long ulMaxWait))ROM_EPITABLE[6])
X#define ROM_EPIConfigHB16Set                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig,                                                       unsigned long ulMaxWait))ROM_EPITABLE[6])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIAddressMapSet                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulMap))ROM_EPITABLE[7])
X#define ROM_EPIAddressMapSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulMap))ROM_EPITABLE[7])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPINonBlockingReadConfigure                                       \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulDataSize,                                  \
S                   unsigned long ulAddress))ROM_EPITABLE[8])
X#define ROM_EPINonBlockingReadConfigure                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulDataSize,                                                     unsigned long ulAddress))ROM_EPITABLE[8])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPINonBlockingReadStart                                           \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulCount))ROM_EPITABLE[9])
X#define ROM_EPINonBlockingReadStart                                                   ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulCount))ROM_EPITABLE[9])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPINonBlockingReadStop                                            \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel))ROM_EPITABLE[10])
X#define ROM_EPINonBlockingReadStop                                                    ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_EPITABLE[10])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPINonBlockingReadCount                                           \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulChannel))ROM_EPITABLE[11])
X#define ROM_EPINonBlockingReadCount                                                   ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_EPITABLE[11])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPINonBlockingReadAvail                                           \
S        ((unsigned long (*)(unsigned long ulBase))ROM_EPITABLE[12])
X#define ROM_EPINonBlockingReadAvail                                                   ((unsigned long (*)(unsigned long ulBase))ROM_EPITABLE[12])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPINonBlockingReadGet32                                           \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulCount,                            \
S                            unsigned long *pulBuf))ROM_EPITABLE[13])
X#define ROM_EPINonBlockingReadGet32                                                   ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulCount,                                                        unsigned long *pulBuf))ROM_EPITABLE[13])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPINonBlockingReadGet16                                           \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulCount,                            \
S                            unsigned short *pusBuf))ROM_EPITABLE[14])
X#define ROM_EPINonBlockingReadGet16                                                   ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulCount,                                                        unsigned short *pusBuf))ROM_EPITABLE[14])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPINonBlockingReadGet8                                            \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulCount,                            \
S                            unsigned char *pucBuf))ROM_EPITABLE[15])
X#define ROM_EPINonBlockingReadGet8                                                    ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulCount,                                                        unsigned char *pucBuf))ROM_EPITABLE[15])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIFIFOConfig                                                     \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig))ROM_EPITABLE[16])
X#define ROM_EPIFIFOConfig                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig))ROM_EPITABLE[16])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIWriteFIFOCountGet                                              \
S        ((unsigned long (*)(unsigned long ulBase))ROM_EPITABLE[17])
X#define ROM_EPIWriteFIFOCountGet                                                      ((unsigned long (*)(unsigned long ulBase))ROM_EPITABLE[17])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIIntEnable                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_EPITABLE[18])
X#define ROM_EPIIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_EPITABLE[18])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIIntDisable                                                     \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_EPITABLE[19])
X#define ROM_EPIIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_EPITABLE[19])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIIntErrorStatus                                                 \
S        ((unsigned long (*)(unsigned long ulBase))ROM_EPITABLE[20])
X#define ROM_EPIIntErrorStatus                                                         ((unsigned long (*)(unsigned long ulBase))ROM_EPITABLE[20])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_EPIIntErrorClear                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulErrFlags))ROM_EPITABLE[21])
X#define ROM_EPIIntErrorClear                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulErrFlags))ROM_EPITABLE[21])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Ethernet API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetIntClear                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_ETHERNETTABLE[0])
X#define ROM_EthernetIntClear                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_ETHERNETTABLE[0])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetInitExpClk                                                \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEthClk))ROM_ETHERNETTABLE[1])
X#define ROM_EthernetInitExpClk                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulEthClk))ROM_ETHERNETTABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetConfigSet                                                 \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulConfig))ROM_ETHERNETTABLE[2])
X#define ROM_EthernetConfigSet                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig))ROM_ETHERNETTABLE[2])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetConfigGet                                                 \
N        ((unsigned long (*)(unsigned long ulBase))ROM_ETHERNETTABLE[3])
X#define ROM_EthernetConfigGet                                                         ((unsigned long (*)(unsigned long ulBase))ROM_ETHERNETTABLE[3])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetMACAddrSet                                                \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned char *pucMACAddr))ROM_ETHERNETTABLE[4])
X#define ROM_EthernetMACAddrSet                                                        ((void (*)(unsigned long ulBase,                                                         unsigned char *pucMACAddr))ROM_ETHERNETTABLE[4])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetMACAddrGet                                                \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned char *pucMACAddr))ROM_ETHERNETTABLE[5])
X#define ROM_EthernetMACAddrGet                                                        ((void (*)(unsigned long ulBase,                                                         unsigned char *pucMACAddr))ROM_ETHERNETTABLE[5])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetEnable                                                    \
N        ((void (*)(unsigned long ulBase))ROM_ETHERNETTABLE[6])
X#define ROM_EthernetEnable                                                            ((void (*)(unsigned long ulBase))ROM_ETHERNETTABLE[6])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetDisable                                                   \
N        ((void (*)(unsigned long ulBase))ROM_ETHERNETTABLE[7])
X#define ROM_EthernetDisable                                                           ((void (*)(unsigned long ulBase))ROM_ETHERNETTABLE[7])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetPacketAvail                                               \
N        ((tBoolean (*)(unsigned long ulBase))ROM_ETHERNETTABLE[8])
X#define ROM_EthernetPacketAvail                                                       ((tBoolean (*)(unsigned long ulBase))ROM_ETHERNETTABLE[8])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetSpaceAvail                                                \
N        ((tBoolean (*)(unsigned long ulBase))ROM_ETHERNETTABLE[9])
X#define ROM_EthernetSpaceAvail                                                        ((tBoolean (*)(unsigned long ulBase))ROM_ETHERNETTABLE[9])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetPacketGetNonBlocking                                      \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned char *pucBuf,                                     \
N                   long lBufLen))ROM_ETHERNETTABLE[10])
X#define ROM_EthernetPacketGetNonBlocking                                              ((long (*)(unsigned long ulBase,                                                         unsigned char *pucBuf,                                                        long lBufLen))ROM_ETHERNETTABLE[10])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetPacketGet                                                 \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned char *pucBuf,                                     \
N                   long lBufLen))ROM_ETHERNETTABLE[11])
X#define ROM_EthernetPacketGet                                                         ((long (*)(unsigned long ulBase,                                                         unsigned char *pucBuf,                                                        long lBufLen))ROM_ETHERNETTABLE[11])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetPacketPutNonBlocking                                      \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned char *pucBuf,                                     \
N                   long lBufLen))ROM_ETHERNETTABLE[12])
X#define ROM_EthernetPacketPutNonBlocking                                              ((long (*)(unsigned long ulBase,                                                         unsigned char *pucBuf,                                                        long lBufLen))ROM_ETHERNETTABLE[12])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetPacketPut                                                 \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned char *pucBuf,                                     \
N                   long lBufLen))ROM_ETHERNETTABLE[13])
X#define ROM_EthernetPacketPut                                                         ((long (*)(unsigned long ulBase,                                                         unsigned char *pucBuf,                                                        long lBufLen))ROM_ETHERNETTABLE[13])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetIntEnable                                                 \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_ETHERNETTABLE[14])
X#define ROM_EthernetIntEnable                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_ETHERNETTABLE[14])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetIntDisable                                                \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_ETHERNETTABLE[15])
X#define ROM_EthernetIntDisable                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_ETHERNETTABLE[15])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetIntStatus                                                 \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            tBoolean bMasked))ROM_ETHERNETTABLE[16])
X#define ROM_EthernetIntStatus                                                         ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_ETHERNETTABLE[16])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetPHYWrite                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned char ucRegAddr,                                   \
N                   unsigned long ulData))ROM_ETHERNETTABLE[17])
X#define ROM_EthernetPHYWrite                                                          ((void (*)(unsigned long ulBase,                                                         unsigned char ucRegAddr,                                                      unsigned long ulData))ROM_ETHERNETTABLE[17])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_EthernetPHYRead                                                   \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned char ucRegAddr))ROM_ETHERNETTABLE[18])
X#define ROM_EthernetPHYRead                                                           ((unsigned long (*)(unsigned long ulBase,                                                         unsigned char ucRegAddr))ROM_ETHERNETTABLE[18])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UpdateEthernet                                                    \
N        ((void (*)(unsigned long ulClock))ROM_ETHERNETTABLE[19])
X#define ROM_UpdateEthernet                                                            ((void (*)(unsigned long ulClock))ROM_ETHERNETTABLE[19])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L
S#define ROM_EthernetPHYAddrSet                                                \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned char ucAddr))ROM_ETHERNETTABLE[20])
X#define ROM_EthernetPHYAddrSet                                                        ((void (*)(unsigned long ulBase,                                                         unsigned char ucAddr))ROM_ETHERNETTABLE[20])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L
S#define ROM_EthernetPHYPowerOff                                               \
S        ((void (*)(unsigned long ulBase))ROM_ETHERNETTABLE[21])
X#define ROM_EthernetPHYPowerOff                                                       ((void (*)(unsigned long ulBase))ROM_ETHERNETTABLE[21])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L
S#define ROM_EthernetPHYPowerOn                                                \
S        ((void (*)(unsigned long ulBase))ROM_ETHERNETTABLE[22])
X#define ROM_EthernetPHYPowerOn                                                        ((void (*)(unsigned long ulBase))ROM_ETHERNETTABLE[22])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Fan API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanIntClear                                                       \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulFlags))ROM_FANTABLE[0])
X#define ROM_FanIntClear                                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulFlags))ROM_FANTABLE[0])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelConfigAuto                                              \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulConfig))ROM_FANTABLE[1])
X#define ROM_FanChannelConfigAuto                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulConfig))ROM_FANTABLE[1])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelConfigManual                                            \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulConfig))ROM_FANTABLE[2])
X#define ROM_FanChannelConfigManual                                                    ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulConfig))ROM_FANTABLE[2])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelDisable                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel))ROM_FANTABLE[3])
X#define ROM_FanChannelDisable                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_FANTABLE[3])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelDutyGet                                                 \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulChannel))ROM_FANTABLE[4])
X#define ROM_FanChannelDutyGet                                                         ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_FANTABLE[4])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelDutySet                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulDuty))ROM_FANTABLE[5])
X#define ROM_FanChannelDutySet                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulDuty))ROM_FANTABLE[5])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelEnable                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel))ROM_FANTABLE[6])
X#define ROM_FanChannelEnable                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_FANTABLE[6])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelRPMGet                                                  \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulChannel))ROM_FANTABLE[7])
X#define ROM_FanChannelRPMGet                                                          ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_FANTABLE[7])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelRPMSet                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulRPM))ROM_FANTABLE[8])
X#define ROM_FanChannelRPMSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulRPM))ROM_FANTABLE[8])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelStatus                                                  \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulChannel))ROM_FANTABLE[9])
X#define ROM_FanChannelStatus                                                          ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_FANTABLE[9])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanChannelsGet                                                    \
S        ((unsigned long (*)(unsigned long ulBase))ROM_FANTABLE[10])
X#define ROM_FanChannelsGet                                                            ((unsigned long (*)(unsigned long ulBase))ROM_FANTABLE[10])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanIntDisable                                                     \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulFlags))ROM_FANTABLE[11])
X#define ROM_FanIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulFlags))ROM_FANTABLE[11])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanIntEnable                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulFlags))ROM_FANTABLE[12])
X#define ROM_FanIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulFlags))ROM_FANTABLE[12])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FanIntStatus                                                      \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            tBoolean bMasked))ROM_FANTABLE[13])
X#define ROM_FanIntStatus                                                              ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_FANTABLE[13])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Flash API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashProgram                                                      \
N        ((long (*)(unsigned long *pulData,                                    \
N                   unsigned long ulAddress,                                   \
N                   unsigned long ulCount))ROM_FLASHTABLE[0])
X#define ROM_FlashProgram                                                              ((long (*)(unsigned long *pulData,                                                       unsigned long ulAddress,                                                      unsigned long ulCount))ROM_FLASHTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashUsecGet                                                      \
N        ((unsigned long (*)(void))ROM_FLASHTABLE[1])
X#define ROM_FlashUsecGet                                                              ((unsigned long (*)(void))ROM_FLASHTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashUsecSet                                                      \
N        ((void (*)(unsigned long ulClocks))ROM_FLASHTABLE[2])
X#define ROM_FlashUsecSet                                                              ((void (*)(unsigned long ulClocks))ROM_FLASHTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashErase                                                        \
N        ((long (*)(unsigned long ulAddress))ROM_FLASHTABLE[3])
X#define ROM_FlashErase                                                                ((long (*)(unsigned long ulAddress))ROM_FLASHTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashProtectGet                                                   \
N        ((tFlashProtection (*)(unsigned long ulAddress))ROM_FLASHTABLE[4])
X#define ROM_FlashProtectGet                                                           ((tFlashProtection (*)(unsigned long ulAddress))ROM_FLASHTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashProtectSet                                                   \
N        ((long (*)(unsigned long ulAddress,                                   \
N                   tFlashProtection eProtect))ROM_FLASHTABLE[5])
X#define ROM_FlashProtectSet                                                           ((long (*)(unsigned long ulAddress,                                                      tFlashProtection eProtect))ROM_FLASHTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashProtectSave                                                  \
N        ((long (*)(void))ROM_FLASHTABLE[6])
X#define ROM_FlashProtectSave                                                          ((long (*)(void))ROM_FLASHTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashUserGet                                                      \
N        ((long (*)(unsigned long *pulUser0,                                   \
N                   unsigned long *pulUser1))ROM_FLASHTABLE[7])
X#define ROM_FlashUserGet                                                              ((long (*)(unsigned long *pulUser0,                                                      unsigned long *pulUser1))ROM_FLASHTABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashUserSet                                                      \
N        ((long (*)(unsigned long ulUser0,                                     \
N                   unsigned long ulUser1))ROM_FLASHTABLE[8])
X#define ROM_FlashUserSet                                                              ((long (*)(unsigned long ulUser0,                                                        unsigned long ulUser1))ROM_FLASHTABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashUserSave                                                     \
N        ((long (*)(void))ROM_FLASHTABLE[9])
X#define ROM_FlashUserSave                                                             ((long (*)(void))ROM_FLASHTABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashIntEnable                                                    \
N        ((void (*)(unsigned long ulIntFlags))ROM_FLASHTABLE[10])
X#define ROM_FlashIntEnable                                                            ((void (*)(unsigned long ulIntFlags))ROM_FLASHTABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashIntDisable                                                   \
N        ((void (*)(unsigned long ulIntFlags))ROM_FLASHTABLE[11])
X#define ROM_FlashIntDisable                                                           ((void (*)(unsigned long ulIntFlags))ROM_FLASHTABLE[11])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashIntStatus                                                    \
N        ((unsigned long (*)(tBoolean bMasked))ROM_FLASHTABLE[12])
X#define ROM_FlashIntStatus                                                            ((unsigned long (*)(tBoolean bMasked))ROM_FLASHTABLE[12])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_FlashIntClear                                                     \
N        ((void (*)(unsigned long ulIntFlags))ROM_FLASHTABLE[13])
X#define ROM_FlashIntClear                                                             ((void (*)(unsigned long ulIntFlags))ROM_FLASHTABLE[13])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the FPU API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FPUEnable                                                         \
S        ((void (*)(void))ROM_FPUTABLE[0])
X#define ROM_FPUEnable                                                                 ((void (*)(void))ROM_FPUTABLE[0])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FPUDisable                                                        \
S        ((void (*)(void))ROM_FPUTABLE[1])
X#define ROM_FPUDisable                                                                ((void (*)(void))ROM_FPUTABLE[1])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FPUFlushToZeroModeSet                                             \
S        ((void (*)(unsigned long ulMode))ROM_FPUTABLE[2])
X#define ROM_FPUFlushToZeroModeSet                                                     ((void (*)(unsigned long ulMode))ROM_FPUTABLE[2])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FPUHalfPrecisionModeSet                                           \
S        ((void (*)(unsigned long ulMode))ROM_FPUTABLE[3])
X#define ROM_FPUHalfPrecisionModeSet                                                   ((void (*)(unsigned long ulMode))ROM_FPUTABLE[3])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FPULazyStackingEnable                                             \
S        ((void (*)(void))ROM_FPUTABLE[4])
X#define ROM_FPULazyStackingEnable                                                     ((void (*)(void))ROM_FPUTABLE[4])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FPUNaNModeSet                                                     \
S        ((void (*)(unsigned long ulMode))ROM_FPUTABLE[5])
X#define ROM_FPUNaNModeSet                                                             ((void (*)(unsigned long ulMode))ROM_FPUTABLE[5])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FPURoundingModeSet                                                \
S        ((void (*)(unsigned long ulMode))ROM_FPUTABLE[6])
X#define ROM_FPURoundingModeSet                                                        ((void (*)(unsigned long ulMode))ROM_FPUTABLE[6])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FPUStackingDisable                                                \
S        ((void (*)(void))ROM_FPUTABLE[7])
X#define ROM_FPUStackingDisable                                                        ((void (*)(void))ROM_FPUTABLE[7])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_FPUStackingEnable                                                 \
S        ((void (*)(void))ROM_FPUTABLE[8])
X#define ROM_FPUStackingEnable                                                         ((void (*)(void))ROM_FPUTABLE[8])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the GPIO API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinWrite                                                      \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins,                                      \
N                   unsigned char ucVal))ROM_GPIOTABLE[0])
X#define ROM_GPIOPinWrite                                                              ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins,                                                         unsigned char ucVal))ROM_GPIOTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIODirModeSet                                                    \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins,                                      \
N                   unsigned long ulPinIO))ROM_GPIOTABLE[1])
X#define ROM_GPIODirModeSet                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins,                                                         unsigned long ulPinIO))ROM_GPIOTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIODirModeGet                                                    \
N        ((unsigned long (*)(unsigned long ulPort,                             \
N                            unsigned char ucPin))ROM_GPIOTABLE[2])
X#define ROM_GPIODirModeGet                                                            ((unsigned long (*)(unsigned long ulPort,                                                         unsigned char ucPin))ROM_GPIOTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOIntTypeSet                                                    \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins,                                      \
N                   unsigned long ulIntType))ROM_GPIOTABLE[3])
X#define ROM_GPIOIntTypeSet                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins,                                                         unsigned long ulIntType))ROM_GPIOTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOIntTypeGet                                                    \
N        ((unsigned long (*)(unsigned long ulPort,                             \
N                            unsigned char ucPin))ROM_GPIOTABLE[4])
X#define ROM_GPIOIntTypeGet                                                            ((unsigned long (*)(unsigned long ulPort,                                                         unsigned char ucPin))ROM_GPIOTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPadConfigSet                                                  \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins,                                      \
N                   unsigned long ulStrength,                                  \
N                   unsigned long ulPadType))ROM_GPIOTABLE[5])
X#define ROM_GPIOPadConfigSet                                                          ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins,                                                         unsigned long ulStrength,                                                     unsigned long ulPadType))ROM_GPIOTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPadConfigGet                                                  \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPin,                                       \
N                   unsigned long *pulStrength,                                \
N                   unsigned long *pulPadType))ROM_GPIOTABLE[6])
X#define ROM_GPIOPadConfigGet                                                          ((void (*)(unsigned long ulPort,                                                         unsigned char ucPin,                                                          unsigned long *pulStrength,                                                   unsigned long *pulPadType))ROM_GPIOTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinIntEnable                                                  \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[7])
X#define ROM_GPIOPinIntEnable                                                          ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinIntDisable                                                 \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[8])
X#define ROM_GPIOPinIntDisable                                                         ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinIntStatus                                                  \
N        ((long (*)(unsigned long ulPort,                                      \
N                   tBoolean bMasked))ROM_GPIOTABLE[9])
X#define ROM_GPIOPinIntStatus                                                          ((long (*)(unsigned long ulPort,                                                         tBoolean bMasked))ROM_GPIOTABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinIntClear                                                   \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[10])
X#define ROM_GPIOPinIntClear                                                           ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinRead                                                       \
N        ((long (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[11])
X#define ROM_GPIOPinRead                                                               ((long (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[11])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeCAN                                                    \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[12])
X#define ROM_GPIOPinTypeCAN                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[12])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeComparator                                             \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[13])
X#define ROM_GPIOPinTypeComparator                                                     ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[13])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeGPIOInput                                              \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[14])
X#define ROM_GPIOPinTypeGPIOInput                                                      ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[14])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeGPIOOutput                                             \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[15])
X#define ROM_GPIOPinTypeGPIOOutput                                                     ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[15])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeI2C                                                    \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[16])
X#define ROM_GPIOPinTypeI2C                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[16])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypePWM                                                    \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[17])
X#define ROM_GPIOPinTypePWM                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[17])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeQEI                                                    \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[18])
X#define ROM_GPIOPinTypeQEI                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[18])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeSSI                                                    \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[19])
X#define ROM_GPIOPinTypeSSI                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[19])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeTimer                                                  \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[20])
X#define ROM_GPIOPinTypeTimer                                                          ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[20])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeUART                                                   \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[21])
X#define ROM_GPIOPinTypeUART                                                           ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[21])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeGPIOOutputOD                                           \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[22])
X#define ROM_GPIOPinTypeGPIOOutputOD                                                   ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[22])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeADC                                                    \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[23])
X#define ROM_GPIOPinTypeADC                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[23])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_GPIOPinTypeUSBDigital                                             \
N        ((void (*)(unsigned long ulPort,                                      \
N                   unsigned char ucPins))ROM_GPIOTABLE[24])
X#define ROM_GPIOPinTypeUSBDigital                                                     ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[24])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_GPIOPinTypeI2S                                                    \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[25])
X#define ROM_GPIOPinTypeI2S                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[25])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_GPIOPinConfigure                                                  \
S        ((void (*)(unsigned long ulPinConfig))ROM_GPIOTABLE[26])
X#define ROM_GPIOPinConfigure                                                          ((void (*)(unsigned long ulPinConfig))ROM_GPIOTABLE[26])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_GPIOPinTypeEthernetLED                                            \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[27])
X#define ROM_GPIOPinTypeEthernetLED                                                    ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[27])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_GPIOPinTypeUSBAnalog                                              \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[28])
X#define ROM_GPIOPinTypeUSBAnalog                                                      ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[28])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L
S#define ROM_GPIOPinTypeEPI                                                    \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[29])
X#define ROM_GPIOPinTypeEPI                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[29])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L
S#define ROM_GPIOPinTypeEthernetMII                                            \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[30])
X#define ROM_GPIOPinTypeEthernetMII                                                    ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[30])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_GPIODMATriggerEnable                                              \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[31])
X#define ROM_GPIODMATriggerEnable                                                      ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[31])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_GPIODMATriggerDisable                                             \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[32])
X#define ROM_GPIODMATriggerDisable                                                     ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[32])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_GPIOADCTriggerEnable                                              \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[33])
X#define ROM_GPIOADCTriggerEnable                                                      ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[33])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_GPIOADCTriggerDisable                                             \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[34])
X#define ROM_GPIOADCTriggerDisable                                                     ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[34])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_GPIOPinTypeFan                                                    \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[35])
X#define ROM_GPIOPinTypeFan                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[35])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_GPIOPinTypeLPC                                                    \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[36])
X#define ROM_GPIOPinTypeLPC                                                            ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[36])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_GPIOPinTypePECIRx                                                 \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[37])
X#define ROM_GPIOPinTypePECIRx                                                         ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[37])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_GPIOPinTypePECITx                                                 \
S        ((void (*)(unsigned long ulPort,                                      \
S                   unsigned char ucPins))ROM_GPIOTABLE[38])
X#define ROM_GPIOPinTypePECITx                                                         ((void (*)(unsigned long ulPort,                                                         unsigned char ucPins))ROM_GPIOTABLE[38])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Hibernate API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateIntClear                                                 \
N        ((void (*)(unsigned long ulIntFlags))ROM_HIBERNATETABLE[0])
X#define ROM_HibernateIntClear                                                         ((void (*)(unsigned long ulIntFlags))ROM_HIBERNATETABLE[0])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateEnableExpClk                                             \
N        ((void (*)(unsigned long ulHibClk))ROM_HIBERNATETABLE[1])
X#define ROM_HibernateEnableExpClk                                                     ((void (*)(unsigned long ulHibClk))ROM_HIBERNATETABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateDisable                                                  \
N        ((void (*)(void))ROM_HIBERNATETABLE[2])
X#define ROM_HibernateDisable                                                          ((void (*)(void))ROM_HIBERNATETABLE[2])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateClockSelect                                              \
N        ((void (*)(unsigned long ulClockInput))ROM_HIBERNATETABLE[3])
X#define ROM_HibernateClockSelect                                                      ((void (*)(unsigned long ulClockInput))ROM_HIBERNATETABLE[3])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCEnable                                                \
N        ((void (*)(void))ROM_HIBERNATETABLE[4])
X#define ROM_HibernateRTCEnable                                                        ((void (*)(void))ROM_HIBERNATETABLE[4])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCDisable                                               \
N        ((void (*)(void))ROM_HIBERNATETABLE[5])
X#define ROM_HibernateRTCDisable                                                       ((void (*)(void))ROM_HIBERNATETABLE[5])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateWakeSet                                                  \
N        ((void (*)(unsigned long ulWakeFlags))ROM_HIBERNATETABLE[6])
X#define ROM_HibernateWakeSet                                                          ((void (*)(unsigned long ulWakeFlags))ROM_HIBERNATETABLE[6])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateWakeGet                                                  \
N        ((unsigned long (*)(void))ROM_HIBERNATETABLE[7])
X#define ROM_HibernateWakeGet                                                          ((unsigned long (*)(void))ROM_HIBERNATETABLE[7])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateLowBatSet                                                \
N        ((void (*)(unsigned long ulLowBatFlags))ROM_HIBERNATETABLE[8])
X#define ROM_HibernateLowBatSet                                                        ((void (*)(unsigned long ulLowBatFlags))ROM_HIBERNATETABLE[8])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateLowBatGet                                                \
N        ((unsigned long (*)(void))ROM_HIBERNATETABLE[9])
X#define ROM_HibernateLowBatGet                                                        ((unsigned long (*)(void))ROM_HIBERNATETABLE[9])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCSet                                                   \
N        ((void (*)(unsigned long ulRTCValue))ROM_HIBERNATETABLE[10])
X#define ROM_HibernateRTCSet                                                           ((void (*)(unsigned long ulRTCValue))ROM_HIBERNATETABLE[10])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCGet                                                   \
N        ((unsigned long (*)(void))ROM_HIBERNATETABLE[11])
X#define ROM_HibernateRTCGet                                                           ((unsigned long (*)(void))ROM_HIBERNATETABLE[11])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCMatch0Set                                             \
N        ((void (*)(unsigned long ulMatch))ROM_HIBERNATETABLE[12])
X#define ROM_HibernateRTCMatch0Set                                                     ((void (*)(unsigned long ulMatch))ROM_HIBERNATETABLE[12])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCMatch0Get                                             \
N        ((unsigned long (*)(void))ROM_HIBERNATETABLE[13])
X#define ROM_HibernateRTCMatch0Get                                                     ((unsigned long (*)(void))ROM_HIBERNATETABLE[13])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCMatch1Set                                             \
N        ((void (*)(unsigned long ulMatch))ROM_HIBERNATETABLE[14])
X#define ROM_HibernateRTCMatch1Set                                                     ((void (*)(unsigned long ulMatch))ROM_HIBERNATETABLE[14])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCMatch1Get                                             \
N        ((unsigned long (*)(void))ROM_HIBERNATETABLE[15])
X#define ROM_HibernateRTCMatch1Get                                                     ((unsigned long (*)(void))ROM_HIBERNATETABLE[15])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCTrimSet                                               \
N        ((void (*)(unsigned long ulTrim))ROM_HIBERNATETABLE[16])
X#define ROM_HibernateRTCTrimSet                                                       ((void (*)(unsigned long ulTrim))ROM_HIBERNATETABLE[16])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRTCTrimGet                                               \
N        ((unsigned long (*)(void))ROM_HIBERNATETABLE[17])
X#define ROM_HibernateRTCTrimGet                                                       ((unsigned long (*)(void))ROM_HIBERNATETABLE[17])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateDataSet                                                  \
N        ((void (*)(unsigned long *pulData,                                    \
N                   unsigned long ulCount))ROM_HIBERNATETABLE[18])
X#define ROM_HibernateDataSet                                                          ((void (*)(unsigned long *pulData,                                                       unsigned long ulCount))ROM_HIBERNATETABLE[18])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateDataGet                                                  \
N        ((void (*)(unsigned long *pulData,                                    \
N                   unsigned long ulCount))ROM_HIBERNATETABLE[19])
X#define ROM_HibernateDataGet                                                          ((void (*)(unsigned long *pulData,                                                       unsigned long ulCount))ROM_HIBERNATETABLE[19])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateRequest                                                  \
N        ((void (*)(void))ROM_HIBERNATETABLE[20])
X#define ROM_HibernateRequest                                                          ((void (*)(void))ROM_HIBERNATETABLE[20])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateIntEnable                                                \
N        ((void (*)(unsigned long ulIntFlags))ROM_HIBERNATETABLE[21])
X#define ROM_HibernateIntEnable                                                        ((void (*)(unsigned long ulIntFlags))ROM_HIBERNATETABLE[21])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateIntDisable                                               \
N        ((void (*)(unsigned long ulIntFlags))ROM_HIBERNATETABLE[22])
X#define ROM_HibernateIntDisable                                                       ((void (*)(unsigned long ulIntFlags))ROM_HIBERNATETABLE[22])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateIntStatus                                                \
N        ((unsigned long (*)(tBoolean bMasked))ROM_HIBERNATETABLE[23])
X#define ROM_HibernateIntStatus                                                        ((unsigned long (*)(tBoolean bMasked))ROM_HIBERNATETABLE[23])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_HibernateIsActive                                                 \
N        ((unsigned long (*)(void))ROM_HIBERNATETABLE[24])
X#define ROM_HibernateIsActive                                                         ((unsigned long (*)(void))ROM_HIBERNATETABLE[24])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_HibernateRTCSSMatch0Set                                           \
S        ((void (*)(unsigned long ulMatch))ROM_HIBERNATETABLE[25])
X#define ROM_HibernateRTCSSMatch0Set                                                   ((void (*)(unsigned long ulMatch))ROM_HIBERNATETABLE[25])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_HibernateRTCSSMatch0Get                                           \
S        ((unsigned long (*)(void))ROM_HIBERNATETABLE[26])
X#define ROM_HibernateRTCSSMatch0Get                                                   ((unsigned long (*)(void))ROM_HIBERNATETABLE[26])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_HibernateRTCSSGet                                                 \
S        ((unsigned long (*)(void))ROM_HIBERNATETABLE[27])
X#define ROM_HibernateRTCSSGet                                                         ((unsigned long (*)(void))ROM_HIBERNATETABLE[27])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_HibernateClockConfig                                              \
S        ((void (*)(unsigned long ulConfig))ROM_HIBERNATETABLE[28])
X#define ROM_HibernateClockConfig                                                      ((void (*)(unsigned long ulConfig))ROM_HIBERNATETABLE[28])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_HibernateBatCheckStart                                            \
S        ((void (*)(void))ROM_HIBERNATETABLE[29])
X#define ROM_HibernateBatCheckStart                                                    ((void (*)(void))ROM_HIBERNATETABLE[29])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_HibernateBatCheckDone                                             \
S        ((unsigned long (*)(void))ROM_HIBERNATETABLE[30])
X#define ROM_HibernateBatCheckDone                                                     ((unsigned long (*)(void))ROM_HIBERNATETABLE[30])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the I2C API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterDataPut                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned char ucData))ROM_I2CTABLE[0])
X#define ROM_I2CMasterDataPut                                                          ((void (*)(unsigned long ulBase,                                                         unsigned char ucData))ROM_I2CTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterInitExpClk                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulI2CClk,                                    \
N                   tBoolean bFast))ROM_I2CTABLE[1])
X#define ROM_I2CMasterInitExpClk                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulI2CClk,                                                       tBoolean bFast))ROM_I2CTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveInit                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned char ucSlaveAddr))ROM_I2CTABLE[2])
X#define ROM_I2CSlaveInit                                                              ((void (*)(unsigned long ulBase,                                                         unsigned char ucSlaveAddr))ROM_I2CTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterEnable                                                   \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[3])
X#define ROM_I2CMasterEnable                                                           ((void (*)(unsigned long ulBase))ROM_I2CTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveEnable                                                    \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[4])
X#define ROM_I2CSlaveEnable                                                            ((void (*)(unsigned long ulBase))ROM_I2CTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterDisable                                                  \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[5])
X#define ROM_I2CMasterDisable                                                          ((void (*)(unsigned long ulBase))ROM_I2CTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveDisable                                                   \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[6])
X#define ROM_I2CSlaveDisable                                                           ((void (*)(unsigned long ulBase))ROM_I2CTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterIntEnable                                                \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[7])
X#define ROM_I2CMasterIntEnable                                                        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveIntEnable                                                 \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[8])
X#define ROM_I2CSlaveIntEnable                                                         ((void (*)(unsigned long ulBase))ROM_I2CTABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterIntDisable                                               \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[9])
X#define ROM_I2CMasterIntDisable                                                       ((void (*)(unsigned long ulBase))ROM_I2CTABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveIntDisable                                                \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[10])
X#define ROM_I2CSlaveIntDisable                                                        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterIntStatus                                                \
N        ((tBoolean (*)(unsigned long ulBase,                                  \
N                       tBoolean bMasked))ROM_I2CTABLE[11])
X#define ROM_I2CMasterIntStatus                                                        ((tBoolean (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_I2CTABLE[11])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveIntStatus                                                 \
N        ((tBoolean (*)(unsigned long ulBase,                                  \
N                       tBoolean bMasked))ROM_I2CTABLE[12])
X#define ROM_I2CSlaveIntStatus                                                         ((tBoolean (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_I2CTABLE[12])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterIntClear                                                 \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[13])
X#define ROM_I2CMasterIntClear                                                         ((void (*)(unsigned long ulBase))ROM_I2CTABLE[13])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveIntClear                                                  \
N        ((void (*)(unsigned long ulBase))ROM_I2CTABLE[14])
X#define ROM_I2CSlaveIntClear                                                          ((void (*)(unsigned long ulBase))ROM_I2CTABLE[14])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterSlaveAddrSet                                             \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned char ucSlaveAddr,                                 \
N                   tBoolean bReceive))ROM_I2CTABLE[15])
X#define ROM_I2CMasterSlaveAddrSet                                                     ((void (*)(unsigned long ulBase,                                                         unsigned char ucSlaveAddr,                                                    tBoolean bReceive))ROM_I2CTABLE[15])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterBusy                                                     \
N        ((tBoolean (*)(unsigned long ulBase))ROM_I2CTABLE[16])
X#define ROM_I2CMasterBusy                                                             ((tBoolean (*)(unsigned long ulBase))ROM_I2CTABLE[16])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterBusBusy                                                  \
N        ((tBoolean (*)(unsigned long ulBase))ROM_I2CTABLE[17])
X#define ROM_I2CMasterBusBusy                                                          ((tBoolean (*)(unsigned long ulBase))ROM_I2CTABLE[17])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterControl                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulCmd))ROM_I2CTABLE[18])
X#define ROM_I2CMasterControl                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulCmd))ROM_I2CTABLE[18])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterErr                                                      \
N        ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[19])
X#define ROM_I2CMasterErr                                                              ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[19])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CMasterDataGet                                                  \
N        ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[20])
X#define ROM_I2CMasterDataGet                                                          ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[20])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveStatus                                                    \
N        ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[21])
X#define ROM_I2CSlaveStatus                                                            ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[21])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveDataPut                                                   \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned char ucData))ROM_I2CTABLE[22])
X#define ROM_I2CSlaveDataPut                                                           ((void (*)(unsigned long ulBase,                                                         unsigned char ucData))ROM_I2CTABLE[22])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_I2CSlaveDataGet                                                   \
N        ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[23])
X#define ROM_I2CSlaveDataGet                                                           ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[23])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UpdateI2C                                                         \
N        ((void (*)(void))ROM_I2CTABLE[24])
X#define ROM_UpdateI2C                                                                 ((void (*)(void))ROM_I2CTABLE[24])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_I2CSlaveIntEnableEx                                               \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_I2CTABLE[25])
X#define ROM_I2CSlaveIntEnableEx                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_I2CTABLE[25])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_I2CSlaveIntDisableEx                                              \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_I2CTABLE[26])
X#define ROM_I2CSlaveIntDisableEx                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_I2CTABLE[26])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_I2CSlaveIntStatusEx                                               \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            tBoolean bMasked))ROM_I2CTABLE[27])
X#define ROM_I2CSlaveIntStatusEx                                                       ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_I2CTABLE[27])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_I2CSlaveIntClearEx                                                \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_I2CTABLE[28])
X#define ROM_I2CSlaveIntClearEx                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_I2CTABLE[28])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_I2CMasterIntEnableEx                                              \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_I2CTABLE[29])
X#define ROM_I2CMasterIntEnableEx                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_I2CTABLE[29])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_I2CMasterIntDisableEx                                             \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_I2CTABLE[30])
X#define ROM_I2CMasterIntDisableEx                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_I2CTABLE[30])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_I2CMasterIntStatusEx                                              \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            tBoolean bMasked))ROM_I2CTABLE[31])
X#define ROM_I2CMasterIntStatusEx                                                      ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_I2CTABLE[31])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_I2CMasterIntClearEx                                               \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_I2CTABLE[32])
X#define ROM_I2CMasterIntClearEx                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_I2CTABLE[32])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_I2CMasterTimeoutSet                                               \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulValue))ROM_I2CTABLE[33])
X#define ROM_I2CMasterTimeoutSet                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulValue))ROM_I2CTABLE[33])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_I2CSlaveACKOverride                                               \
S        ((void (*)(unsigned long ulBase,                                      \
S                   tBoolean bEnable))ROM_I2CTABLE[34])
X#define ROM_I2CSlaveACKOverride                                                       ((void (*)(unsigned long ulBase,                                                         tBoolean bEnable))ROM_I2CTABLE[34])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_I2CSlaveACKValueSet                                               \
S        ((void (*)(unsigned long ulBase,                                      \
S                   tBoolean bACK))ROM_I2CTABLE[35])
X#define ROM_I2CSlaveACKValueSet                                                       ((void (*)(unsigned long ulBase,                                                         tBoolean bACK))ROM_I2CTABLE[35])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_I2CSlaveAddressSet                                                \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned char ucAddrNum,                                   \
S                   unsigned char ucSlaveAddr))ROM_I2CTABLE[37])
X#define ROM_I2CSlaveAddressSet                                                        ((void (*)(unsigned long ulBase,                                                         unsigned char ucAddrNum,                                                      unsigned char ucSlaveAddr))ROM_I2CTABLE[37])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_I2CMasterLineStateGet                                             \
S        ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[38])
X#define ROM_I2CMasterLineStateGet                                                     ((unsigned long (*)(unsigned long ulBase))ROM_I2CTABLE[38])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the I2S API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SIntStatus                                                      \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            tBoolean bMasked))ROM_I2STABLE[0])
X#define ROM_I2SIntStatus                                                              ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_I2STABLE[0])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxEnable                                                       \
S        ((void (*)(unsigned long ulBase))ROM_I2STABLE[1])
X#define ROM_I2STxEnable                                                               ((void (*)(unsigned long ulBase))ROM_I2STABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxDisable                                                      \
S        ((void (*)(unsigned long ulBase))ROM_I2STABLE[2])
X#define ROM_I2STxDisable                                                              ((void (*)(unsigned long ulBase))ROM_I2STABLE[2])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxDataPut                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulData))ROM_I2STABLE[3])
X#define ROM_I2STxDataPut                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulData))ROM_I2STABLE[3])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxDataPutNonBlocking                                           \
S        ((long (*)(unsigned long ulBase,                                      \
S                   unsigned long ulData))ROM_I2STABLE[4])
X#define ROM_I2STxDataPutNonBlocking                                                   ((long (*)(unsigned long ulBase,                                                         unsigned long ulData))ROM_I2STABLE[4])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxConfigSet                                                    \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig))ROM_I2STABLE[5])
X#define ROM_I2STxConfigSet                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig))ROM_I2STABLE[5])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxFIFOLimitSet                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulLevel))ROM_I2STABLE[6])
X#define ROM_I2STxFIFOLimitSet                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulLevel))ROM_I2STABLE[6])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxFIFOLimitGet                                                 \
S        ((unsigned long (*)(unsigned long ulBase))ROM_I2STABLE[7])
X#define ROM_I2STxFIFOLimitGet                                                         ((unsigned long (*)(unsigned long ulBase))ROM_I2STABLE[7])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxFIFOLevelGet                                                 \
S        ((unsigned long (*)(unsigned long ulBase))ROM_I2STABLE[8])
X#define ROM_I2STxFIFOLevelGet                                                         ((unsigned long (*)(unsigned long ulBase))ROM_I2STABLE[8])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SRxEnable                                                       \
S        ((void (*)(unsigned long ulBase))ROM_I2STABLE[9])
X#define ROM_I2SRxEnable                                                               ((void (*)(unsigned long ulBase))ROM_I2STABLE[9])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SRxDisable                                                      \
S        ((void (*)(unsigned long ulBase))ROM_I2STABLE[10])
X#define ROM_I2SRxDisable                                                              ((void (*)(unsigned long ulBase))ROM_I2STABLE[10])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SRxDataGet                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long *pulData))ROM_I2STABLE[11])
X#define ROM_I2SRxDataGet                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long *pulData))ROM_I2STABLE[11])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SRxDataGetNonBlocking                                           \
S        ((long (*)(unsigned long ulBase,                                      \
S                   unsigned long *pulData))ROM_I2STABLE[12])
X#define ROM_I2SRxDataGetNonBlocking                                                   ((long (*)(unsigned long ulBase,                                                         unsigned long *pulData))ROM_I2STABLE[12])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SRxConfigSet                                                    \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig))ROM_I2STABLE[13])
X#define ROM_I2SRxConfigSet                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig))ROM_I2STABLE[13])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SRxFIFOLimitSet                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulLevel))ROM_I2STABLE[14])
X#define ROM_I2SRxFIFOLimitSet                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulLevel))ROM_I2STABLE[14])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SRxFIFOLimitGet                                                 \
S        ((unsigned long (*)(unsigned long ulBase))ROM_I2STABLE[15])
X#define ROM_I2SRxFIFOLimitGet                                                         ((unsigned long (*)(unsigned long ulBase))ROM_I2STABLE[15])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SRxFIFOLevelGet                                                 \
S        ((unsigned long (*)(unsigned long ulBase))ROM_I2STABLE[16])
X#define ROM_I2SRxFIFOLevelGet                                                         ((unsigned long (*)(unsigned long ulBase))ROM_I2STABLE[16])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxRxEnable                                                     \
S        ((void (*)(unsigned long ulBase))ROM_I2STABLE[17])
X#define ROM_I2STxRxEnable                                                             ((void (*)(unsigned long ulBase))ROM_I2STABLE[17])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxRxDisable                                                    \
S        ((void (*)(unsigned long ulBase))ROM_I2STABLE[18])
X#define ROM_I2STxRxDisable                                                            ((void (*)(unsigned long ulBase))ROM_I2STABLE[18])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2STxRxConfigSet                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig))ROM_I2STABLE[19])
X#define ROM_I2STxRxConfigSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig))ROM_I2STABLE[19])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SMasterClockSelect                                              \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulMClock))ROM_I2STABLE[20])
X#define ROM_I2SMasterClockSelect                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulMClock))ROM_I2STABLE[20])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SIntEnable                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_I2STABLE[21])
X#define ROM_I2SIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_I2STABLE[21])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SIntDisable                                                     \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_I2STABLE[22])
X#define ROM_I2SIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_I2STABLE[22])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_I2SIntClear                                                       \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_I2STABLE[23])
X#define ROM_I2SIntClear                                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_I2STABLE[23])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Interrupt API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_IntEnable                                                         \
N        ((void (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[0])
X#define ROM_IntEnable                                                                 ((void (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[0])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_IntMasterEnable                                                   \
N        ((tBoolean (*)(void))ROM_INTERRUPTTABLE[1])
X#define ROM_IntMasterEnable                                                           ((tBoolean (*)(void))ROM_INTERRUPTTABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_IntMasterDisable                                                  \
N        ((tBoolean (*)(void))ROM_INTERRUPTTABLE[2])
X#define ROM_IntMasterDisable                                                          ((tBoolean (*)(void))ROM_INTERRUPTTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_IntDisable                                                        \
N        ((void (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[3])
X#define ROM_IntDisable                                                                ((void (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_IntPriorityGroupingSet                                            \
N        ((void (*)(unsigned long ulBits))ROM_INTERRUPTTABLE[4])
X#define ROM_IntPriorityGroupingSet                                                    ((void (*)(unsigned long ulBits))ROM_INTERRUPTTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_IntPriorityGroupingGet                                            \
N        ((unsigned long (*)(void))ROM_INTERRUPTTABLE[5])
X#define ROM_IntPriorityGroupingGet                                                    ((unsigned long (*)(void))ROM_INTERRUPTTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_IntPrioritySet                                                    \
N        ((void (*)(unsigned long ulInterrupt,                                 \
N                   unsigned char ucPriority))ROM_INTERRUPTTABLE[6])
X#define ROM_IntPrioritySet                                                            ((void (*)(unsigned long ulInterrupt,                                                    unsigned char ucPriority))ROM_INTERRUPTTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_IntPriorityGet                                                    \
N        ((long (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[7])
X#define ROM_IntPriorityGet                                                            ((long (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[7])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_IntPendSet                                                        \
S        ((void (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[8])
X#define ROM_IntPendSet                                                                ((void (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[8])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_IntPendClear                                                      \
S        ((void (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[9])
X#define ROM_IntPendClear                                                              ((void (*)(unsigned long ulInterrupt))ROM_INTERRUPTTABLE[9])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_IntPriorityMaskSet                                                \
S        ((void (*)(unsigned long ulPriorityMask))ROM_INTERRUPTTABLE[10])
X#define ROM_IntPriorityMaskSet                                                        ((void (*)(unsigned long ulPriorityMask))ROM_INTERRUPTTABLE[10])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_IntPriorityMaskGet                                                \
S        ((unsigned long (*)(void))ROM_INTERRUPTTABLE[11])
X#define ROM_IntPriorityMaskGet                                                        ((unsigned long (*)(void))ROM_INTERRUPTTABLE[11])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the LPC API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCIntClear                                                       \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_LPCTABLE[0])
X#define ROM_LPCIntClear                                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_LPCTABLE[0])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCByteRead                                                       \
S        ((unsigned char (*)(unsigned long ulBase,                             \
S                            unsigned long ulOffset))ROM_LPCTABLE[1])
X#define ROM_LPCByteRead                                                               ((unsigned char (*)(unsigned long ulBase,                                                         unsigned long ulOffset))ROM_LPCTABLE[1])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCByteWrite                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulOffset,                                    \
S                   unsigned char ucData))ROM_LPCTABLE[2])
X#define ROM_LPCByteWrite                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulOffset,                                                       unsigned char ucData))ROM_LPCTABLE[2])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelConfigCOMxSet                                           \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulConfig,                                    \
S                   unsigned long ulAddress,                                   \
S                   unsigned long ulOffset,                                    \
S                   unsigned long ulCOMxMode))ROM_LPCTABLE[3])
X#define ROM_LPCChannelConfigCOMxSet                                                   ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulConfig,                                                       unsigned long ulAddress,                                                      unsigned long ulOffset,                                                       unsigned long ulCOMxMode))ROM_LPCTABLE[3])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelConfigGet                                               \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulChannel,                          \
S                            unsigned long *pulAddress,                        \
S                            unsigned long *pulOffset,                         \
S                            unsigned long *pulCOMxMode))ROM_LPCTABLE[4])
X#define ROM_LPCChannelConfigGet                                                       ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long *pulAddress,                                                    unsigned long *pulOffset,                                                     unsigned long *pulCOMxMode))ROM_LPCTABLE[4])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelConfigEPSet                                             \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulConfig,                                    \
S                   unsigned long ulAddress,                                   \
S                   unsigned long ulOffset))ROM_LPCTABLE[5])
X#define ROM_LPCChannelConfigEPSet                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulConfig,                                                       unsigned long ulAddress,                                                      unsigned long ulOffset))ROM_LPCTABLE[5])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelConfigMBSet                                             \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulConfig,                                    \
S                   unsigned long ulAddress,                                   \
S                   unsigned long ulOffset))ROM_LPCTABLE[6])
X#define ROM_LPCChannelConfigMBSet                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulConfig,                                                       unsigned long ulAddress,                                                      unsigned long ulOffset))ROM_LPCTABLE[6])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelDMAConfigGet                                            \
S        ((unsigned long (*)(unsigned long ulBase))ROM_LPCTABLE[7])
X#define ROM_LPCChannelDMAConfigGet                                                    ((unsigned long (*)(unsigned long ulBase))ROM_LPCTABLE[7])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelDMAConfigSet                                            \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig,                                    \
S                   unsigned long ulMask))ROM_LPCTABLE[8])
X#define ROM_LPCChannelDMAConfigSet                                                    ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig,                                                       unsigned long ulMask))ROM_LPCTABLE[8])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelDisable                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel))ROM_LPCTABLE[9])
X#define ROM_LPCChannelDisable                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_LPCTABLE[9])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelEnable                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel))ROM_LPCTABLE[10])
X#define ROM_LPCChannelEnable                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_LPCTABLE[10])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelStatusClear                                             \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulStatus))ROM_LPCTABLE[11])
X#define ROM_LPCChannelStatusClear                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulStatus))ROM_LPCTABLE[11])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelStatusGet                                               \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulChannel))ROM_LPCTABLE[12])
X#define ROM_LPCChannelStatusGet                                                       ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_LPCTABLE[12])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelStatusSet                                               \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulChannel,                                   \
S                   unsigned long ulStatus))ROM_LPCTABLE[13])
X#define ROM_LPCChannelStatusSet                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulChannel,                                                      unsigned long ulStatus))ROM_LPCTABLE[13])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCCOMxIntClear                                                   \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_LPCTABLE[14])
X#define ROM_LPCCOMxIntClear                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_LPCTABLE[14])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCCOMxIntDisable                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_LPCTABLE[15])
X#define ROM_LPCCOMxIntDisable                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_LPCTABLE[15])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCCOMxIntEnable                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_LPCTABLE[16])
X#define ROM_LPCCOMxIntEnable                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_LPCTABLE[16])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCCOMxIntStatus                                                  \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            tBoolean bMasked))ROM_LPCTABLE[17])
X#define ROM_LPCCOMxIntStatus                                                          ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_LPCTABLE[17])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCConfigGet                                                      \
S        ((unsigned long (*)(unsigned long ulBase))ROM_LPCTABLE[18])
X#define ROM_LPCConfigGet                                                              ((unsigned long (*)(unsigned long ulBase))ROM_LPCTABLE[18])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCConfigSet                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulConfig))ROM_LPCTABLE[19])
X#define ROM_LPCConfigSet                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig))ROM_LPCTABLE[19])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCHalfWordRead                                                   \
S        ((unsigned short (*)(unsigned long ulBase,                            \
S                             unsigned long ulOffset))ROM_LPCTABLE[20])
X#define ROM_LPCHalfWordRead                                                           ((unsigned short (*)(unsigned long ulBase,                                                         unsigned long ulOffset))ROM_LPCTABLE[20])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCHalfWordWrite                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulOffset,                                    \
S                   unsigned short usData))ROM_LPCTABLE[21])
X#define ROM_LPCHalfWordWrite                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulOffset,                                                       unsigned short usData))ROM_LPCTABLE[21])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCIRQClear                                                       \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIRQ))ROM_LPCTABLE[22])
X#define ROM_LPCIRQClear                                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulIRQ))ROM_LPCTABLE[22])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCIRQConfig                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   tBoolean bIRQPulse,                                        \
S                   tBoolean bIRQOnChange))ROM_LPCTABLE[23])
X#define ROM_LPCIRQConfig                                                              ((void (*)(unsigned long ulBase,                                                         tBoolean bIRQPulse,                                                           tBoolean bIRQOnChange))ROM_LPCTABLE[23])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCIRQGet                                                         \
S        ((unsigned long (*)(unsigned long ulBase))ROM_LPCTABLE[24])
X#define ROM_LPCIRQGet                                                                 ((unsigned long (*)(unsigned long ulBase))ROM_LPCTABLE[24])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCIRQSend                                                        \
S        ((void (*)(unsigned long ulBase))ROM_LPCTABLE[25])
X#define ROM_LPCIRQSend                                                                ((void (*)(unsigned long ulBase))ROM_LPCTABLE[25])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCIRQSet                                                         \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIRQ))ROM_LPCTABLE[26])
X#define ROM_LPCIRQSet                                                                 ((void (*)(unsigned long ulBase,                                                         unsigned long ulIRQ))ROM_LPCTABLE[26])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCIntDisable                                                     \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_LPCTABLE[27])
X#define ROM_LPCIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_LPCTABLE[27])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCIntEnable                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_LPCTABLE[28])
X#define ROM_LPCIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_LPCTABLE[28])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCIntStatus                                                      \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            tBoolean bMasked))ROM_LPCTABLE[29])
X#define ROM_LPCIntStatus                                                              ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_LPCTABLE[29])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCSCIAssert                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulCount))ROM_LPCTABLE[30])
X#define ROM_LPCSCIAssert                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulCount))ROM_LPCTABLE[30])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCStatusGet                                                      \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long *pulCount,                          \
S                            unsigned long *pulPoolSize))ROM_LPCTABLE[31])
X#define ROM_LPCStatusGet                                                              ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long *pulCount,                                                      unsigned long *pulPoolSize))ROM_LPCTABLE[31])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCWordRead                                                       \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulOffset))ROM_LPCTABLE[32])
X#define ROM_LPCWordRead                                                               ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulOffset))ROM_LPCTABLE[32])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCWordWrite                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulOffset,                                    \
S                   unsigned long ulData))ROM_LPCTABLE[33])
X#define ROM_LPCWordWrite                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulOffset,                                                       unsigned long ulData))ROM_LPCTABLE[33])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCChannelPoolAddressGet                                          \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulChannel))ROM_LPCTABLE[34])
X#define ROM_LPCChannelPoolAddressGet                                                  ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulChannel))ROM_LPCTABLE[34])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCStatusBlockAddressGet                                          \
S        ((unsigned (*)(unsigned long ulBase))ROM_LPCTABLE[35])
X#define ROM_LPCStatusBlockAddressGet                                                  ((unsigned (*)(unsigned long ulBase))ROM_LPCTABLE[35])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_LPCStatusBlockAddressSet                                          \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulAddress,                                   \
S                   tBoolean bEnabled))ROM_LPCTABLE[36])
X#define ROM_LPCStatusBlockAddressSet                                                  ((void (*)(unsigned long ulBase,                                                         unsigned long ulAddress,                                                      tBoolean bEnabled))ROM_LPCTABLE[36])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the MPU API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_MPUEnable                                                         \
N        ((void (*)(unsigned long ulMPUConfig))ROM_MPUTABLE[0])
X#define ROM_MPUEnable                                                                 ((void (*)(unsigned long ulMPUConfig))ROM_MPUTABLE[0])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_MPUDisable                                                        \
N        ((void (*)(void))ROM_MPUTABLE[1])
X#define ROM_MPUDisable                                                                ((void (*)(void))ROM_MPUTABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_MPURegionCountGet                                                 \
N        ((unsigned long (*)(void))ROM_MPUTABLE[2])
X#define ROM_MPURegionCountGet                                                         ((unsigned long (*)(void))ROM_MPUTABLE[2])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_MPURegionEnable                                                   \
N        ((void (*)(unsigned long ulRegion))ROM_MPUTABLE[3])
X#define ROM_MPURegionEnable                                                           ((void (*)(unsigned long ulRegion))ROM_MPUTABLE[3])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_MPURegionDisable                                                  \
N        ((void (*)(unsigned long ulRegion))ROM_MPUTABLE[4])
X#define ROM_MPURegionDisable                                                          ((void (*)(unsigned long ulRegion))ROM_MPUTABLE[4])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_MPURegionSet                                                      \
N        ((void (*)(unsigned long ulRegion,                                    \
N                   unsigned long ulAddr,                                      \
N                   unsigned long ulFlags))ROM_MPUTABLE[5])
X#define ROM_MPURegionSet                                                              ((void (*)(unsigned long ulRegion,                                                       unsigned long ulAddr,                                                         unsigned long ulFlags))ROM_MPUTABLE[5])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_MPURegionGet                                                      \
N        ((void (*)(unsigned long ulRegion,                                    \
N                   unsigned long *pulAddr,                                    \
N                   unsigned long *pulFlags))ROM_MPUTABLE[6])
X#define ROM_MPURegionGet                                                              ((void (*)(unsigned long ulRegion,                                                       unsigned long *pulAddr,                                                       unsigned long *pulFlags))ROM_MPUTABLE[6])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the PECI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIIntClear                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_PECITABLE[0])
X#define ROM_PECIIntClear                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_PECITABLE[0])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIAdvCmdSend                                                    \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned char ucCmd,                                       \
S                   unsigned char ucHidRe,                                     \
S                   unsigned char ucDomain,                                    \
S                   unsigned char ucProcAdd,                                   \
S                   unsigned long ulArg,                                       \
S                   unsigned char ucSize,                                      \
S                   unsigned long ulData0,                                     \
S                   unsigned long ulData1))ROM_PECITABLE[1])
X#define ROM_PECIAdvCmdSend                                                            ((void (*)(unsigned long ulBase,                                                         unsigned char ucCmd,                                                          unsigned char ucHidRe,                                                        unsigned char ucDomain,                                                       unsigned char ucProcAdd,                                                      unsigned long ulArg,                                                          unsigned char ucSize,                                                         unsigned long ulData0,                                                        unsigned long ulData1))ROM_PECITABLE[1])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIAdvCmdSendNonBlocking                                         \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned char ucCmd,                              \
S                            unsigned char ucHidRe,                            \
S                            unsigned char ucDomain,                           \
S                            unsigned char ucProcAdd,                          \
S                            unsigned long ulArg,                              \
S                            unsigned char ucSize,                             \
S                            unsigned long ulData0,                            \
S                            unsigned long ulData1))ROM_PECITABLE[2])
X#define ROM_PECIAdvCmdSendNonBlocking                                                 ((unsigned long (*)(unsigned long ulBase,                                                         unsigned char ucCmd,                                                          unsigned char ucHidRe,                                                        unsigned char ucDomain,                                                       unsigned char ucProcAdd,                                                      unsigned long ulArg,                                                          unsigned char ucSize,                                                         unsigned long ulData0,                                                        unsigned long ulData1))ROM_PECITABLE[2])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIAdvCmdStatusGet                                               \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long *pulData0,                          \
S                            unsigned long *pulData1))ROM_PECITABLE[3])
X#define ROM_PECIAdvCmdStatusGet                                                       ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long *pulData0,                                                      unsigned long *pulData1))ROM_PECITABLE[3])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIConfigGet                                                     \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulPECIClk,                                   \
S                   unsigned long *pulBaud,                                    \
S                   unsigned long *pulPoll,                                    \
S                   unsigned long *pulOffset,                                  \
S                   unsigned long *pulRetry))ROM_PECITABLE[4])
X#define ROM_PECIConfigGet                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulPECIClk,                                                      unsigned long *pulBaud,                                                       unsigned long *pulPoll,                                                       unsigned long *pulOffset,                                                     unsigned long *pulRetry))ROM_PECITABLE[4])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIConfigSet                                                     \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulPECIClk,                                   \
S                   unsigned long ulBaud,                                      \
S                   unsigned long ulPoll,                                      \
S                   unsigned long ulOffset,                                    \
S                   unsigned long ulRetry))ROM_PECITABLE[5])
X#define ROM_PECIConfigSet                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulPECIClk,                                                      unsigned long ulBaud,                                                         unsigned long ulPoll,                                                         unsigned long ulOffset,                                                       unsigned long ulRetry))ROM_PECITABLE[5])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIDomainMaxReadClear                                            \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulDomain))ROM_PECITABLE[6])
X#define ROM_PECIDomainMaxReadClear                                                    ((void (*)(unsigned long ulBase,                                                         unsigned long ulDomain))ROM_PECITABLE[6])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIDomainValueClear                                              \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulDomain))ROM_PECITABLE[7])
X#define ROM_PECIDomainValueClear                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulDomain))ROM_PECITABLE[7])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIDomainConfigGet                                               \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulDomain,                                    \
S                   unsigned long *pulHigh,                                    \
S                   unsigned long *pulLow))ROM_PECITABLE[8])
X#define ROM_PECIDomainConfigGet                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulDomain,                                                       unsigned long *pulHigh,                                                       unsigned long *pulLow))ROM_PECITABLE[8])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIDomainConfigSet                                               \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulDomain,                                    \
S                   unsigned long ulHigh,                                      \
S                   unsigned long ulLow))ROM_PECITABLE[9])
X#define ROM_PECIDomainConfigSet                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulDomain,                                                       unsigned long ulHigh,                                                         unsigned long ulLow))ROM_PECITABLE[9])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIDomainDisable                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulDomain))ROM_PECITABLE[10])
X#define ROM_PECIDomainDisable                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulDomain))ROM_PECITABLE[10])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIDomainEnable                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulDomain))ROM_PECITABLE[11])
X#define ROM_PECIDomainEnable                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulDomain))ROM_PECITABLE[11])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIDomainMaxReadGet                                              \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulDomain))ROM_PECITABLE[12])
X#define ROM_PECIDomainMaxReadGet                                                      ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulDomain))ROM_PECITABLE[12])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIDomainValueGet                                                \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulDomain))ROM_PECITABLE[13])
X#define ROM_PECIDomainValueGet                                                        ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulDomain))ROM_PECITABLE[13])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIIntDisable                                                    \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_PECITABLE[14])
X#define ROM_PECIIntDisable                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_PECITABLE[14])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIIntEnable                                                     \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags,                                  \
S                   unsigned long ulIntMode))ROM_PECITABLE[15])
X#define ROM_PECIIntEnable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags,                                                     unsigned long ulIntMode))ROM_PECITABLE[15])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIIntStatus                                                     \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            tBoolean bMasked))ROM_PECITABLE[16])
X#define ROM_PECIIntStatus                                                             ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_PECITABLE[16])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIBypassEnable                                                  \
S        ((void (*)(unsigned long ulBase))ROM_PECITABLE[17])
X#define ROM_PECIBypassEnable                                                          ((void (*)(unsigned long ulBase))ROM_PECITABLE[17])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_PECIBypassDisable                                                 \
S        ((void (*)(unsigned long ulBase))ROM_PECITABLE[18])
X#define ROM_PECIBypassDisable                                                         ((void (*)(unsigned long ulBase))ROM_PECITABLE[18])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the PWM API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMPulseWidthSet                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulPWMOut,                                    \
N                   unsigned long ulWidth))ROM_PWMTABLE[0])
X#define ROM_PWMPulseWidthSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulPWMOut,                                                       unsigned long ulWidth))ROM_PWMTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenConfigure                                                   \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen,                                       \
N                   unsigned long ulConfig))ROM_PWMTABLE[1])
X#define ROM_PWMGenConfigure                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulConfig))ROM_PWMTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenPeriodSet                                                   \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen,                                       \
N                   unsigned long ulPeriod))ROM_PWMTABLE[2])
X#define ROM_PWMGenPeriodSet                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulPeriod))ROM_PWMTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenPeriodGet                                                   \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulGen))ROM_PWMTABLE[3])
X#define ROM_PWMGenPeriodGet                                                           ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulGen))ROM_PWMTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenEnable                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen))ROM_PWMTABLE[4])
X#define ROM_PWMGenEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen))ROM_PWMTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenDisable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen))ROM_PWMTABLE[5])
X#define ROM_PWMGenDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen))ROM_PWMTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMPulseWidthGet                                                  \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulPWMOut))ROM_PWMTABLE[6])
X#define ROM_PWMPulseWidthGet                                                          ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulPWMOut))ROM_PWMTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMDeadBandEnable                                                 \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen,                                       \
N                   unsigned short usRise,                                     \
N                   unsigned short usFall))ROM_PWMTABLE[7])
X#define ROM_PWMDeadBandEnable                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned short usRise,                                                        unsigned short usFall))ROM_PWMTABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMDeadBandDisable                                                \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen))ROM_PWMTABLE[8])
X#define ROM_PWMDeadBandDisable                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen))ROM_PWMTABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMSyncUpdate                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGenBits))ROM_PWMTABLE[9])
X#define ROM_PWMSyncUpdate                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulGenBits))ROM_PWMTABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMSyncTimeBase                                                   \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGenBits))ROM_PWMTABLE[10])
X#define ROM_PWMSyncTimeBase                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long ulGenBits))ROM_PWMTABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMOutputState                                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulPWMOutBits,                                \
N                   tBoolean bEnable))ROM_PWMTABLE[11])
X#define ROM_PWMOutputState                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulPWMOutBits,                                                   tBoolean bEnable))ROM_PWMTABLE[11])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMOutputInvert                                                   \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulPWMOutBits,                                \
N                   tBoolean bInvert))ROM_PWMTABLE[12])
X#define ROM_PWMOutputInvert                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long ulPWMOutBits,                                                   tBoolean bInvert))ROM_PWMTABLE[12])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMOutputFault                                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulPWMOutBits,                                \
N                   tBoolean bFaultSuppress))ROM_PWMTABLE[13])
X#define ROM_PWMOutputFault                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulPWMOutBits,                                                   tBoolean bFaultSuppress))ROM_PWMTABLE[13])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenIntTrigEnable                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen,                                       \
N                   unsigned long ulIntTrig))ROM_PWMTABLE[14])
X#define ROM_PWMGenIntTrigEnable                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulIntTrig))ROM_PWMTABLE[14])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenIntTrigDisable                                              \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen,                                       \
N                   unsigned long ulIntTrig))ROM_PWMTABLE[15])
X#define ROM_PWMGenIntTrigDisable                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulIntTrig))ROM_PWMTABLE[15])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenIntStatus                                                   \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulGen,                              \
N                            tBoolean bMasked))ROM_PWMTABLE[16])
X#define ROM_PWMGenIntStatus                                                           ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          tBoolean bMasked))ROM_PWMTABLE[16])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenIntClear                                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen,                                       \
N                   unsigned long ulInts))ROM_PWMTABLE[17])
X#define ROM_PWMGenIntClear                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulInts))ROM_PWMTABLE[17])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMIntEnable                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGenFault))ROM_PWMTABLE[18])
X#define ROM_PWMIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulGenFault))ROM_PWMTABLE[18])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMIntDisable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGenFault))ROM_PWMTABLE[19])
X#define ROM_PWMIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulGenFault))ROM_PWMTABLE[19])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMFaultIntClear                                                  \
N        ((void (*)(unsigned long ulBase))ROM_PWMTABLE[20])
X#define ROM_PWMFaultIntClear                                                          ((void (*)(unsigned long ulBase))ROM_PWMTABLE[20])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMIntStatus                                                      \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            tBoolean bMasked))ROM_PWMTABLE[21])
X#define ROM_PWMIntStatus                                                              ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_PWMTABLE[21])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMOutputFaultLevel                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulPWMOutBits,                                \
N                   tBoolean bDriveHigh))ROM_PWMTABLE[22])
X#define ROM_PWMOutputFaultLevel                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulPWMOutBits,                                                   tBoolean bDriveHigh))ROM_PWMTABLE[22])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMFaultIntClearExt                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulFaultInts))ROM_PWMTABLE[23])
X#define ROM_PWMFaultIntClearExt                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulFaultInts))ROM_PWMTABLE[23])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenFaultConfigure                                              \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen,                                       \
N                   unsigned long ulMinFaultPeriod,                            \
N                   unsigned long ulFaultSenses))ROM_PWMTABLE[24])
X#define ROM_PWMGenFaultConfigure                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulMinFaultPeriod,                                               unsigned long ulFaultSenses))ROM_PWMTABLE[24])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenFaultTriggerSet                                             \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen,                                       \
N                   unsigned long ulGroup,                                     \
N                   unsigned long ulFaultTriggers))ROM_PWMTABLE[25])
X#define ROM_PWMGenFaultTriggerSet                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulGroup,                                                        unsigned long ulFaultTriggers))ROM_PWMTABLE[25])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenFaultTriggerGet                                             \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulGen,                              \
N                            unsigned long ulGroup))ROM_PWMTABLE[26])
X#define ROM_PWMGenFaultTriggerGet                                                     ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulGroup))ROM_PWMTABLE[26])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenFaultStatus                                                 \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulGen,                              \
N                            unsigned long ulGroup))ROM_PWMTABLE[27])
X#define ROM_PWMGenFaultStatus                                                         ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulGroup))ROM_PWMTABLE[27])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_PWMGenFaultClear                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulGen,                                       \
N                   unsigned long ulGroup,                                     \
N                   unsigned long ulFaultTriggers))ROM_PWMTABLE[28])
X#define ROM_PWMGenFaultClear                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulGen,                                                          unsigned long ulGroup,                                                        unsigned long ulFaultTriggers))ROM_PWMTABLE[28])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the QEI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIPositionGet                                                    \
N        ((unsigned long (*)(unsigned long ulBase))ROM_QEITABLE[0])
X#define ROM_QEIPositionGet                                                            ((unsigned long (*)(unsigned long ulBase))ROM_QEITABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIEnable                                                         \
N        ((void (*)(unsigned long ulBase))ROM_QEITABLE[1])
X#define ROM_QEIEnable                                                                 ((void (*)(unsigned long ulBase))ROM_QEITABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIDisable                                                        \
N        ((void (*)(unsigned long ulBase))ROM_QEITABLE[2])
X#define ROM_QEIDisable                                                                ((void (*)(unsigned long ulBase))ROM_QEITABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIConfigure                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulConfig,                                    \
N                   unsigned long ulMaxPosition))ROM_QEITABLE[3])
X#define ROM_QEIConfigure                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig,                                                       unsigned long ulMaxPosition))ROM_QEITABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIPositionSet                                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulPosition))ROM_QEITABLE[4])
X#define ROM_QEIPositionSet                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulPosition))ROM_QEITABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIDirectionGet                                                   \
N        ((long (*)(unsigned long ulBase))ROM_QEITABLE[5])
X#define ROM_QEIDirectionGet                                                           ((long (*)(unsigned long ulBase))ROM_QEITABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIErrorGet                                                       \
N        ((tBoolean (*)(unsigned long ulBase))ROM_QEITABLE[6])
X#define ROM_QEIErrorGet                                                               ((tBoolean (*)(unsigned long ulBase))ROM_QEITABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIVelocityEnable                                                 \
N        ((void (*)(unsigned long ulBase))ROM_QEITABLE[7])
X#define ROM_QEIVelocityEnable                                                         ((void (*)(unsigned long ulBase))ROM_QEITABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIVelocityDisable                                                \
N        ((void (*)(unsigned long ulBase))ROM_QEITABLE[8])
X#define ROM_QEIVelocityDisable                                                        ((void (*)(unsigned long ulBase))ROM_QEITABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIVelocityConfigure                                              \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulPreDiv,                                    \
N                   unsigned long ulPeriod))ROM_QEITABLE[9])
X#define ROM_QEIVelocityConfigure                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulPreDiv,                                                       unsigned long ulPeriod))ROM_QEITABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIVelocityGet                                                    \
N        ((unsigned long (*)(unsigned long ulBase))ROM_QEITABLE[10])
X#define ROM_QEIVelocityGet                                                            ((unsigned long (*)(unsigned long ulBase))ROM_QEITABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIIntEnable                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_QEITABLE[11])
X#define ROM_QEIIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_QEITABLE[11])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIIntDisable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_QEITABLE[12])
X#define ROM_QEIIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_QEITABLE[12])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIIntStatus                                                      \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            tBoolean bMasked))ROM_QEITABLE[13])
X#define ROM_QEIIntStatus                                                              ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_QEITABLE[13])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_QEIIntClear                                                       \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_QEITABLE[14])
X#define ROM_QEIIntClear                                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_QEITABLE[14])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SMBus API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterIntProcess                                             \
S        ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[0])
X#define ROM_SMBusMasterIntProcess                                                     ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[0])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusARPDisable                                                   \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[1])
X#define ROM_SMBusARPDisable                                                           ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[1])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusARPEnable                                                    \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[2])
X#define ROM_SMBusARPEnable                                                            ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[2])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusARPUDIDPacketDecode                                          \
S        ((void (*)(tSMBusUDID *pUDID,                                         \
S                   unsigned char *pucAddress,                                 \
S                   unsigned char *pucData))ROM_SMBUSTABLE[3])
X#define ROM_SMBusARPUDIDPacketDecode                                                  ((void (*)(tSMBusUDID *pUDID,                                                            unsigned char *pucAddress,                                                    unsigned char *pucData))ROM_SMBUSTABLE[3])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusARPUDIDPacketEncode                                          \
S        ((void (*)(tSMBusUDID *pUDID,                                         \
S                   unsigned char ucAddress,                                   \
S                   unsigned char *pucData))ROM_SMBUSTABLE[4])
X#define ROM_SMBusARPUDIDPacketEncode                                                  ((void (*)(tSMBusUDID *pUDID,                                                            unsigned char ucAddress,                                                      unsigned char *pucData))ROM_SMBUSTABLE[4])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterARPAssignAddress                                       \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char *pucData))ROM_SMBUSTABLE[5])
X#define ROM_SMBusMasterARPAssignAddress                                               ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char *pucData))ROM_SMBUSTABLE[5])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterARPGetUDIDDir                                          \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char *pucData))ROM_SMBUSTABLE[6])
X#define ROM_SMBusMasterARPGetUDIDDir                                                  ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char *pucData))ROM_SMBUSTABLE[6])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterARPGetUDIDGen                                          \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char *pucData))ROM_SMBUSTABLE[7])
X#define ROM_SMBusMasterARPGetUDIDGen                                                  ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char *pucData))ROM_SMBUSTABLE[7])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterARPNotifyMaster                                        \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char *pucData))ROM_SMBUSTABLE[8])
X#define ROM_SMBusMasterARPNotifyMaster                                                ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char *pucData))ROM_SMBUSTABLE[8])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterARPPrepareToARP                                        \
S        ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[9])
X#define ROM_SMBusMasterARPPrepareToARP                                                ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[9])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterARPResetDeviceDir                                      \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress))ROM_SMBUSTABLE[10])
X#define ROM_SMBusMasterARPResetDeviceDir                                              ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress))ROM_SMBUSTABLE[10])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterARPResetDeviceGen                                      \
S        ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[11])
X#define ROM_SMBusMasterARPResetDeviceGen                                              ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[11])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterBlockProcessCall                                       \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char ucCommand,                           \
S                           unsigned char *pucTxData,                          \
S                           unsigned char ucTxSize,                            \
S                           unsigned char *pucRxData))ROM_SMBUSTABLE[12])
X#define ROM_SMBusMasterBlockProcessCall                                               ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char ucCommand,                                                      unsigned char *pucTxData,                                                     unsigned char ucTxSize,                                                       unsigned char *pucRxData))ROM_SMBUSTABLE[12])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterBlockWrite                                             \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char ucCommand,                           \
S                           unsigned char *pucData,                            \
S                           unsigned char ucSize))ROM_SMBUSTABLE[14])
X#define ROM_SMBusMasterBlockWrite                                                     ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char ucCommand,                                                      unsigned char *pucData,                                                       unsigned char ucSize))ROM_SMBUSTABLE[14])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterByteReceive                                            \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char *pucData))ROM_SMBUSTABLE[15])
X#define ROM_SMBusMasterByteReceive                                                    ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char *pucData))ROM_SMBUSTABLE[15])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterByteSend                                               \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char ucData))ROM_SMBUSTABLE[16])
X#define ROM_SMBusMasterByteSend                                                       ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char ucData))ROM_SMBUSTABLE[16])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterByteWordRead                                           \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char ucCommand,                           \
S                           unsigned char *pucData,                            \
S                           unsigned char ucSize))ROM_SMBUSTABLE[17])
X#define ROM_SMBusMasterByteWordRead                                                   ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char ucCommand,                                                      unsigned char *pucData,                                                       unsigned char ucSize))ROM_SMBUSTABLE[17])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterByteWordWrite                                          \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char ucCommand,                           \
S                           unsigned char *pucData,                            \
S                           unsigned char ucSize))ROM_SMBUSTABLE[18])
X#define ROM_SMBusMasterByteWordWrite                                                  ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char ucCommand,                                                      unsigned char *pucData,                                                       unsigned char ucSize))ROM_SMBUSTABLE[18])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterHostNotify                                             \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucOwnSlaveAddress,                   \
S                           unsigned char *pucData))ROM_SMBUSTABLE[19])
X#define ROM_SMBusMasterHostNotify                                                     ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucOwnSlaveAddress,                                              unsigned char *pucData))ROM_SMBUSTABLE[19])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterI2CRead                                                \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char *pucData,                            \
S                           unsigned char ucSize))ROM_SMBUSTABLE[20])
X#define ROM_SMBusMasterI2CRead                                                        ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char *pucData,                                                       unsigned char ucSize))ROM_SMBUSTABLE[20])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterI2CWrite                                               \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char *pucData,                            \
S                           unsigned char ucSize))ROM_SMBUSTABLE[21])
X#define ROM_SMBusMasterI2CWrite                                                       ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char *pucData,                                                       unsigned char ucSize))ROM_SMBUSTABLE[21])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterI2CWriteRead                                           \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char *pucTxData,                          \
S                           unsigned char ucTxSize,                            \
S                           unsigned char *pucRxData,                          \
S                           unsigned char ucRxSize))ROM_SMBUSTABLE[22])
X#define ROM_SMBusMasterI2CWriteRead                                                   ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char *pucTxData,                                                     unsigned char ucTxSize,                                                       unsigned char *pucRxData,                                                     unsigned char ucRxSize))ROM_SMBUSTABLE[22])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterInit                                                   \
S        ((void (*)(tSMBus *pSMBus,                                            \
S                   unsigned long ulI2CBase,                                   \
S                   unsigned long ulSMBusClock))ROM_SMBUSTABLE[23])
X#define ROM_SMBusMasterInit                                                           ((void (*)(tSMBus *pSMBus,                                                               unsigned long ulI2CBase,                                                      unsigned long ulSMBusClock))ROM_SMBUSTABLE[23])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterIntEnable                                              \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[24])
X#define ROM_SMBusMasterIntEnable                                                      ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[24])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterProcessCall                                            \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           unsigned char ucCommand,                           \
S                           unsigned char *pucTxData,                          \
S                           unsigned char *pucRxData))ROM_SMBUSTABLE[25])
X#define ROM_SMBusMasterProcessCall                                                    ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                unsigned char ucCommand,                                                      unsigned char *pucTxData,                                                     unsigned char *pucRxData))ROM_SMBUSTABLE[25])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusMasterQuickCommand                                           \
S        ((tSMBusStatus (*)(tSMBus *pSMBus,                                    \
S                           unsigned char ucTargetAddress,                     \
S                           tBoolean bData))ROM_SMBUSTABLE[26])
X#define ROM_SMBusMasterQuickCommand                                                   ((tSMBusStatus (*)(tSMBus *pSMBus,                                                               unsigned char ucTargetAddress,                                                tBoolean bData))ROM_SMBUSTABLE[26])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusPECDisable                                                   \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[27])
X#define ROM_SMBusPECDisable                                                           ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[27])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusPECEnable                                                    \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[28])
X#define ROM_SMBusPECEnable                                                            ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[28])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusRxPacketSizeGet                                              \
S        ((unsigned char (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[29])
X#define ROM_SMBusRxPacketSizeGet                                                      ((unsigned char (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[29])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveACKSend                                                 \
S        ((void (*)(tSMBus *pSMBus,                                            \
S                   tBoolean bACK))ROM_SMBUSTABLE[30])
X#define ROM_SMBusSlaveACKSend                                                         ((void (*)(tSMBus *pSMBus,                                                               tBoolean bACK))ROM_SMBUSTABLE[30])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveAddressSet                                              \
S        ((void (*)(tSMBus *pSMBus,                                            \
S                   unsigned char ucAddressNum,                                \
S                   unsigned char ucSlaveAddress))ROM_SMBUSTABLE[31])
X#define ROM_SMBusSlaveAddressSet                                                      ((void (*)(tSMBus *pSMBus,                                                               unsigned char ucAddressNum,                                                   unsigned char ucSlaveAddress))ROM_SMBUSTABLE[31])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveARPFlagARGet                                            \
S        ((tBoolean (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[32])
X#define ROM_SMBusSlaveARPFlagARGet                                                    ((tBoolean (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[32])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveARPFlagARSet                                            \
S        ((void (*)(tSMBus *pSMBus,                                            \
S                   tBoolean bValue))ROM_SMBUSTABLE[33])
X#define ROM_SMBusSlaveARPFlagARSet                                                    ((void (*)(tSMBus *pSMBus,                                                               tBoolean bValue))ROM_SMBUSTABLE[33])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveARPFlagAVGet                                            \
S        ((tBoolean (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[34])
X#define ROM_SMBusSlaveARPFlagAVGet                                                    ((tBoolean (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[34])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveARPFlagAVSet                                            \
S        ((void (*)(tSMBus *pSMBus,                                            \
S                   tBoolean bValue))ROM_SMBUSTABLE[35])
X#define ROM_SMBusSlaveARPFlagAVSet                                                    ((void (*)(tSMBus *pSMBus,                                                               tBoolean bValue))ROM_SMBUSTABLE[35])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveBlockTransferDisable                                    \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[36])
X#define ROM_SMBusSlaveBlockTransferDisable                                            ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[36])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveBlockTransferEnable                                     \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[37])
X#define ROM_SMBusSlaveBlockTransferEnable                                             ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[37])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveCommandGet                                              \
S        ((unsigned char (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[38])
X#define ROM_SMBusSlaveCommandGet                                                      ((unsigned char (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[38])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveI2CDisable                                              \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[39])
X#define ROM_SMBusSlaveI2CDisable                                                      ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[39])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveI2CEnable                                               \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[40])
X#define ROM_SMBusSlaveI2CEnable                                                       ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[40])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveInit                                                    \
S        ((void (*)(tSMBus *pSMBus,                                            \
S                   unsigned long ulI2CBase))ROM_SMBUSTABLE[41])
X#define ROM_SMBusSlaveInit                                                            ((void (*)(tSMBus *pSMBus,                                                               unsigned long ulI2CBase))ROM_SMBUSTABLE[41])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveIntAddressGet                                           \
S        ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[42])
X#define ROM_SMBusSlaveIntAddressGet                                                   ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[42])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveIntEnable                                               \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[43])
X#define ROM_SMBusSlaveIntEnable                                                       ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[43])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveIntProcess                                              \
S        ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[44])
X#define ROM_SMBusSlaveIntProcess                                                      ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[44])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveManualACKDisable                                        \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[45])
X#define ROM_SMBusSlaveManualACKDisable                                                ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[45])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveManualACKEnable                                         \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[46])
X#define ROM_SMBusSlaveManualACKEnable                                                 ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[46])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveManualACKStatusGet                                      \
S        ((tBoolean (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[47])
X#define ROM_SMBusSlaveManualACKStatusGet                                              ((tBoolean (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[47])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveProcessCallDisable                                      \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[48])
X#define ROM_SMBusSlaveProcessCallDisable                                              ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[48])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveProcessCallEnable                                       \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[49])
X#define ROM_SMBusSlaveProcessCallEnable                                               ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[49])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveRxBufferSet                                             \
S        ((void (*)(tSMBus *pSMBus,                                            \
S                   unsigned char *pucData,                                    \
S                   unsigned char ucSize))ROM_SMBUSTABLE[50])
X#define ROM_SMBusSlaveRxBufferSet                                                     ((void (*)(tSMBus *pSMBus,                                                               unsigned char *pucData,                                                       unsigned char ucSize))ROM_SMBUSTABLE[50])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveTransferInit                                            \
S        ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[51])
X#define ROM_SMBusSlaveTransferInit                                                    ((void (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[51])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveTxBufferSet                                             \
S        ((void (*)(tSMBus *pSMBus,                                            \
S                   unsigned char *pucData,                                    \
S                   unsigned char ucSize))ROM_SMBUSTABLE[52])
X#define ROM_SMBusSlaveTxBufferSet                                                     ((void (*)(tSMBus *pSMBus,                                                               unsigned char *pucData,                                                       unsigned char ucSize))ROM_SMBUSTABLE[52])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusSlaveUDIDSet                                                 \
S        ((void (*)(tSMBus *pSMBus,                                            \
S                   tSMBusUDID *pUDID))ROM_SMBUSTABLE[53])
X#define ROM_SMBusSlaveUDIDSet                                                         ((void (*)(tSMBus *pSMBus,                                                               tSMBusUDID *pUDID))ROM_SMBUSTABLE[53])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SMBusStatusGet                                                    \
S        ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[54])
X#define ROM_SMBusStatusGet                                                            ((tSMBusStatus (*)(tSMBus *pSMBus))ROM_SMBUSTABLE[54])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SSI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIDataPut                                                        \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulData))ROM_SSITABLE[0])
X#define ROM_SSIDataPut                                                                ((void (*)(unsigned long ulBase,                                                         unsigned long ulData))ROM_SSITABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIConfigSetExpClk                                                \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulSSIClk,                                    \
N                   unsigned long ulProtocol,                                  \
N                   unsigned long ulMode,                                      \
N                   unsigned long ulBitRate,                                   \
N                   unsigned long ulDataWidth))ROM_SSITABLE[1])
X#define ROM_SSIConfigSetExpClk                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulSSIClk,                                                       unsigned long ulProtocol,                                                     unsigned long ulMode,                                                         unsigned long ulBitRate,                                                      unsigned long ulDataWidth))ROM_SSITABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIEnable                                                         \
N        ((void (*)(unsigned long ulBase))ROM_SSITABLE[2])
X#define ROM_SSIEnable                                                                 ((void (*)(unsigned long ulBase))ROM_SSITABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIDisable                                                        \
N        ((void (*)(unsigned long ulBase))ROM_SSITABLE[3])
X#define ROM_SSIDisable                                                                ((void (*)(unsigned long ulBase))ROM_SSITABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIIntEnable                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_SSITABLE[4])
X#define ROM_SSIIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_SSITABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIIntDisable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_SSITABLE[5])
X#define ROM_SSIIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_SSITABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIIntStatus                                                      \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            tBoolean bMasked))ROM_SSITABLE[6])
X#define ROM_SSIIntStatus                                                              ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_SSITABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIIntClear                                                       \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_SSITABLE[7])
X#define ROM_SSIIntClear                                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_SSITABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIDataPutNonBlocking                                             \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned long ulData))ROM_SSITABLE[8])
X#define ROM_SSIDataPutNonBlocking                                                     ((long (*)(unsigned long ulBase,                                                         unsigned long ulData))ROM_SSITABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIDataGet                                                        \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long *pulData))ROM_SSITABLE[9])
X#define ROM_SSIDataGet                                                                ((void (*)(unsigned long ulBase,                                                         unsigned long *pulData))ROM_SSITABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIDataGetNonBlocking                                             \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned long *pulData))ROM_SSITABLE[10])
X#define ROM_SSIDataGetNonBlocking                                                     ((long (*)(unsigned long ulBase,                                                         unsigned long *pulData))ROM_SSITABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UpdateSSI                                                         \
N        ((void (*)(void))ROM_SSITABLE[11])
X#define ROM_UpdateSSI                                                                 ((void (*)(void))ROM_SSITABLE[11])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIDMAEnable                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulDMAFlags))ROM_SSITABLE[12])
X#define ROM_SSIDMAEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulDMAFlags))ROM_SSITABLE[12])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SSIDMADisable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulDMAFlags))ROM_SSITABLE[13])
X#define ROM_SSIDMADisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulDMAFlags))ROM_SSITABLE[13])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_SSIBusy                                                           \
S        ((tBoolean (*)(unsigned long ulBase))ROM_SSITABLE[14])
X#define ROM_SSIBusy                                                                   ((tBoolean (*)(unsigned long ulBase))ROM_SSITABLE[14])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SSIClockSourceGet                                                 \
S        ((unsigned long (*)(unsigned long ulBase))ROM_SSITABLE[15])
X#define ROM_SSIClockSourceGet                                                         ((unsigned long (*)(unsigned long ulBase))ROM_SSITABLE[15])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SSIClockSourceSet                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulSource))ROM_SSITABLE[16])
X#define ROM_SSIClockSourceSet                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulSource))ROM_SSITABLE[16])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SysCtl API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlSleep                                                       \
N        ((void (*)(void))ROM_SYSCTLTABLE[0])
X#define ROM_SysCtlSleep                                                               ((void (*)(void))ROM_SYSCTLTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlSRAMSizeGet                                                 \
N        ((unsigned long (*)(void))ROM_SYSCTLTABLE[1])
X#define ROM_SysCtlSRAMSizeGet                                                         ((unsigned long (*)(void))ROM_SYSCTLTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlFlashSizeGet                                                \
N        ((unsigned long (*)(void))ROM_SYSCTLTABLE[2])
X#define ROM_SysCtlFlashSizeGet                                                        ((unsigned long (*)(void))ROM_SYSCTLTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPinPresent                                                  \
N        ((tBoolean (*)(unsigned long ulPin))ROM_SYSCTLTABLE[3])
X#define ROM_SysCtlPinPresent                                                          ((tBoolean (*)(unsigned long ulPin))ROM_SYSCTLTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPeripheralPresent                                           \
N        ((tBoolean (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[4])
X#define ROM_SysCtlPeripheralPresent                                                   ((tBoolean (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPeripheralReset                                             \
N        ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[5])
X#define ROM_SysCtlPeripheralReset                                                     ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPeripheralEnable                                            \
N        ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[6])
X#define ROM_SysCtlPeripheralEnable                                                    ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPeripheralDisable                                           \
N        ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[7])
X#define ROM_SysCtlPeripheralDisable                                                   ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPeripheralSleepEnable                                       \
N        ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[8])
X#define ROM_SysCtlPeripheralSleepEnable                                               ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPeripheralSleepDisable                                      \
N        ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[9])
X#define ROM_SysCtlPeripheralSleepDisable                                              ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPeripheralDeepSleepEnable                                   \
N        ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[10])
X#define ROM_SysCtlPeripheralDeepSleepEnable                                           ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPeripheralDeepSleepDisable                                  \
N        ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[11])
X#define ROM_SysCtlPeripheralDeepSleepDisable                                          ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[11])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPeripheralClockGating                                       \
N        ((void (*)(tBoolean bEnable))ROM_SYSCTLTABLE[12])
X#define ROM_SysCtlPeripheralClockGating                                               ((void (*)(tBoolean bEnable))ROM_SYSCTLTABLE[12])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlIntEnable                                                   \
N        ((void (*)(unsigned long ulInts))ROM_SYSCTLTABLE[13])
X#define ROM_SysCtlIntEnable                                                           ((void (*)(unsigned long ulInts))ROM_SYSCTLTABLE[13])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlIntDisable                                                  \
N        ((void (*)(unsigned long ulInts))ROM_SYSCTLTABLE[14])
X#define ROM_SysCtlIntDisable                                                          ((void (*)(unsigned long ulInts))ROM_SYSCTLTABLE[14])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlIntClear                                                    \
N        ((void (*)(unsigned long ulInts))ROM_SYSCTLTABLE[15])
X#define ROM_SysCtlIntClear                                                            ((void (*)(unsigned long ulInts))ROM_SYSCTLTABLE[15])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlIntStatus                                                   \
N        ((unsigned long (*)(tBoolean bMasked))ROM_SYSCTLTABLE[16])
X#define ROM_SysCtlIntStatus                                                           ((unsigned long (*)(tBoolean bMasked))ROM_SYSCTLTABLE[16])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlLDOSet                                                      \
N        ((void (*)(unsigned long ulVoltage))ROM_SYSCTLTABLE[17])
X#define ROM_SysCtlLDOSet                                                              ((void (*)(unsigned long ulVoltage))ROM_SYSCTLTABLE[17])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlLDOGet                                                      \
N        ((unsigned long (*)(void))ROM_SYSCTLTABLE[18])
X#define ROM_SysCtlLDOGet                                                              ((unsigned long (*)(void))ROM_SYSCTLTABLE[18])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlReset                                                       \
N        ((void (*)(void))ROM_SYSCTLTABLE[19])
X#define ROM_SysCtlReset                                                               ((void (*)(void))ROM_SYSCTLTABLE[19])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlDeepSleep                                                   \
N        ((void (*)(void))ROM_SYSCTLTABLE[20])
X#define ROM_SysCtlDeepSleep                                                           ((void (*)(void))ROM_SYSCTLTABLE[20])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlResetCauseGet                                               \
N        ((unsigned long (*)(void))ROM_SYSCTLTABLE[21])
X#define ROM_SysCtlResetCauseGet                                                       ((unsigned long (*)(void))ROM_SYSCTLTABLE[21])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlResetCauseClear                                             \
N        ((void (*)(unsigned long ulCauses))ROM_SYSCTLTABLE[22])
X#define ROM_SysCtlResetCauseClear                                                     ((void (*)(unsigned long ulCauses))ROM_SYSCTLTABLE[22])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlClockSet                                                    \
N        ((void (*)(unsigned long ulConfig))ROM_SYSCTLTABLE[23])
X#define ROM_SysCtlClockSet                                                            ((void (*)(unsigned long ulConfig))ROM_SYSCTLTABLE[23])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlClockGet                                                    \
N        ((unsigned long (*)(void))ROM_SYSCTLTABLE[24])
X#define ROM_SysCtlClockGet                                                            ((unsigned long (*)(void))ROM_SYSCTLTABLE[24])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPWMClockSet                                                 \
N        ((void (*)(unsigned long ulConfig))ROM_SYSCTLTABLE[25])
X#define ROM_SysCtlPWMClockSet                                                         ((void (*)(unsigned long ulConfig))ROM_SYSCTLTABLE[25])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlPWMClockGet                                                 \
N        ((unsigned long (*)(void))ROM_SYSCTLTABLE[26])
X#define ROM_SysCtlPWMClockGet                                                         ((unsigned long (*)(void))ROM_SYSCTLTABLE[26])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlADCSpeedSet                                                 \
N        ((void (*)(unsigned long ulSpeed))ROM_SYSCTLTABLE[27])
X#define ROM_SysCtlADCSpeedSet                                                         ((void (*)(unsigned long ulSpeed))ROM_SYSCTLTABLE[27])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlADCSpeedGet                                                 \
N        ((unsigned long (*)(void))ROM_SYSCTLTABLE[28])
X#define ROM_SysCtlADCSpeedGet                                                         ((unsigned long (*)(void))ROM_SYSCTLTABLE[28])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlGPIOAHBEnable                                               \
N        ((void (*)(unsigned long ulGPIOPeripheral))ROM_SYSCTLTABLE[29])
X#define ROM_SysCtlGPIOAHBEnable                                                       ((void (*)(unsigned long ulGPIOPeripheral))ROM_SYSCTLTABLE[29])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlGPIOAHBDisable                                              \
N        ((void (*)(unsigned long ulGPIOPeripheral))ROM_SYSCTLTABLE[30])
X#define ROM_SysCtlGPIOAHBDisable                                                      ((void (*)(unsigned long ulGPIOPeripheral))ROM_SYSCTLTABLE[30])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlUSBPLLEnable                                                \
N        ((void (*)(void))ROM_SYSCTLTABLE[31])
X#define ROM_SysCtlUSBPLLEnable                                                        ((void (*)(void))ROM_SYSCTLTABLE[31])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysCtlUSBPLLDisable                                               \
N        ((void (*)(void))ROM_SYSCTLTABLE[32])
X#define ROM_SysCtlUSBPLLDisable                                                       ((void (*)(void))ROM_SYSCTLTABLE[32])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_SysCtlI2SMClkSet                                                  \
S        ((unsigned long (*)(unsigned long ulInputClock,                       \
S                            unsigned long ulMClk))ROM_SYSCTLTABLE[33])
X#define ROM_SysCtlI2SMClkSet                                                          ((unsigned long (*)(unsigned long ulInputClock,                                                   unsigned long ulMClk))ROM_SYSCTLTABLE[33])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_SysCtlDelay                                                       \
S        ((void (*)(unsigned long ulCount))ROM_SYSCTLTABLE[34])
X#define ROM_SysCtlDelay                                                               ((void (*)(unsigned long ulCount))ROM_SYSCTLTABLE[34])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysCtlPeripheralReady                                             \
S        ((tBoolean (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[35])
X#define ROM_SysCtlPeripheralReady                                                     ((tBoolean (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[35])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysCtlPeripheralPowerOn                                           \
S        ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[36])
X#define ROM_SysCtlPeripheralPowerOn                                                   ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[36])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysCtlPeripheralPowerOff                                          \
S        ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[37])
X#define ROM_SysCtlPeripheralPowerOff                                                  ((void (*)(unsigned long ulPeripheral))ROM_SYSCTLTABLE[37])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysCtlMOSCConfigSet                                               \
S        ((void (*)(unsigned long ulConfig))ROM_SYSCTLTABLE[44])
X#define ROM_SysCtlMOSCConfigSet                                                       ((void (*)(unsigned long ulConfig))ROM_SYSCTLTABLE[44])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysCtlPIOSCCalibrate                                              \
S        ((unsigned long (*)(unsigned long ulType))ROM_SYSCTLTABLE[45])
X#define ROM_SysCtlPIOSCCalibrate                                                      ((unsigned long (*)(unsigned long ulType))ROM_SYSCTLTABLE[45])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysCtlDeepSleepClockSet                                           \
S        ((void (*)(unsigned long ulConfig))ROM_SYSCTLTABLE[46])
X#define ROM_SysCtlDeepSleepClockSet                                                   ((void (*)(unsigned long ulConfig))ROM_SYSCTLTABLE[46])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SysExc API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysExcIntStatus                                                   \
S        ((unsigned long (*)(tBoolean bMasked))ROM_SYSEXCTABLE[0])
X#define ROM_SysExcIntStatus                                                           ((unsigned long (*)(tBoolean bMasked))ROM_SYSEXCTABLE[0])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysExcIntClear                                                    \
S        ((void (*)(unsigned long ulIntFlags))ROM_SYSEXCTABLE[1])
X#define ROM_SysExcIntClear                                                            ((void (*)(unsigned long ulIntFlags))ROM_SYSEXCTABLE[1])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysExcIntDisable                                                  \
S        ((void (*)(unsigned long ulIntFlags))ROM_SYSEXCTABLE[2])
X#define ROM_SysExcIntDisable                                                          ((void (*)(unsigned long ulIntFlags))ROM_SYSEXCTABLE[2])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_SysExcIntEnable                                                   \
S        ((void (*)(unsigned long ulIntFlags))ROM_SYSEXCTABLE[3])
X#define ROM_SysExcIntEnable                                                           ((void (*)(unsigned long ulIntFlags))ROM_SYSEXCTABLE[3])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SysTick API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysTickValueGet                                                   \
N        ((unsigned long (*)(void))ROM_SYSTICKTABLE[0])
X#define ROM_SysTickValueGet                                                           ((unsigned long (*)(void))ROM_SYSTICKTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysTickEnable                                                     \
N        ((void (*)(void))ROM_SYSTICKTABLE[1])
X#define ROM_SysTickEnable                                                             ((void (*)(void))ROM_SYSTICKTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysTickDisable                                                    \
N        ((void (*)(void))ROM_SYSTICKTABLE[2])
X#define ROM_SysTickDisable                                                            ((void (*)(void))ROM_SYSTICKTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysTickIntEnable                                                  \
N        ((void (*)(void))ROM_SYSTICKTABLE[3])
X#define ROM_SysTickIntEnable                                                          ((void (*)(void))ROM_SYSTICKTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysTickIntDisable                                                 \
N        ((void (*)(void))ROM_SYSTICKTABLE[4])
X#define ROM_SysTickIntDisable                                                         ((void (*)(void))ROM_SYSTICKTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysTickPeriodSet                                                  \
N        ((void (*)(unsigned long ulPeriod))ROM_SYSTICKTABLE[5])
X#define ROM_SysTickPeriodSet                                                          ((void (*)(unsigned long ulPeriod))ROM_SYSTICKTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_SysTickPeriodGet                                                  \
N        ((unsigned long (*)(void))ROM_SYSTICKTABLE[6])
X#define ROM_SysTickPeriodGet                                                          ((unsigned long (*)(void))ROM_SYSTICKTABLE[6])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Timer API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerIntClear                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_TIMERTABLE[0])
X#define ROM_TimerIntClear                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_TIMERTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerEnable                                                       \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulTimer))ROM_TIMERTABLE[1])
X#define ROM_TimerEnable                                                               ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer))ROM_TIMERTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerDisable                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulTimer))ROM_TIMERTABLE[2])
X#define ROM_TimerDisable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer))ROM_TIMERTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerConfigure                                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulConfig))ROM_TIMERTABLE[3])
X#define ROM_TimerConfigure                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulConfig))ROM_TIMERTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerControlLevel                                                 \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulTimer,                                     \
N                   tBoolean bInvert))ROM_TIMERTABLE[4])
X#define ROM_TimerControlLevel                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer,                                                        tBoolean bInvert))ROM_TIMERTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerControlTrigger                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulTimer,                                     \
N                   tBoolean bEnable))ROM_TIMERTABLE[5])
X#define ROM_TimerControlTrigger                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer,                                                        tBoolean bEnable))ROM_TIMERTABLE[5])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_TimerControlEvent                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulTimer,                                     \
S                   unsigned long ulEvent))ROM_TIMERTABLE[6])
X#define ROM_TimerControlEvent                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer,                                                        unsigned long ulEvent))ROM_TIMERTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerControlStall                                                 \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulTimer,                                     \
N                   tBoolean bStall))ROM_TIMERTABLE[7])
X#define ROM_TimerControlStall                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer,                                                        tBoolean bStall))ROM_TIMERTABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerRTCEnable                                                    \
N        ((void (*)(unsigned long ulBase))ROM_TIMERTABLE[8])
X#define ROM_TimerRTCEnable                                                            ((void (*)(unsigned long ulBase))ROM_TIMERTABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerRTCDisable                                                   \
N        ((void (*)(unsigned long ulBase))ROM_TIMERTABLE[9])
X#define ROM_TimerRTCDisable                                                           ((void (*)(unsigned long ulBase))ROM_TIMERTABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerPrescaleSet                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulTimer,                                     \
N                   unsigned long ulValue))ROM_TIMERTABLE[10])
X#define ROM_TimerPrescaleSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer,                                                        unsigned long ulValue))ROM_TIMERTABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerPrescaleGet                                                  \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulTimer))ROM_TIMERTABLE[11])
X#define ROM_TimerPrescaleGet                                                          ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulTimer))ROM_TIMERTABLE[11])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_TimerPrescaleMatchSet                                             \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulTimer,                                     \
S                   unsigned long ulValue))ROM_TIMERTABLE[12])
X#define ROM_TimerPrescaleMatchSet                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer,                                                        unsigned long ulValue))ROM_TIMERTABLE[12])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_TimerPrescaleMatchGet                                             \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulTimer))ROM_TIMERTABLE[13])
X#define ROM_TimerPrescaleMatchGet                                                     ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulTimer))ROM_TIMERTABLE[13])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerLoadSet                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulTimer,                                     \
N                   unsigned long ulValue))ROM_TIMERTABLE[14])
X#define ROM_TimerLoadSet                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer,                                                        unsigned long ulValue))ROM_TIMERTABLE[14])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerLoadGet                                                      \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulTimer))ROM_TIMERTABLE[15])
X#define ROM_TimerLoadGet                                                              ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulTimer))ROM_TIMERTABLE[15])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerValueGet                                                     \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulTimer))ROM_TIMERTABLE[16])
X#define ROM_TimerValueGet                                                             ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulTimer))ROM_TIMERTABLE[16])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerMatchSet                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulTimer,                                     \
N                   unsigned long ulValue))ROM_TIMERTABLE[17])
X#define ROM_TimerMatchSet                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer,                                                        unsigned long ulValue))ROM_TIMERTABLE[17])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerMatchGet                                                     \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulTimer))ROM_TIMERTABLE[18])
X#define ROM_TimerMatchGet                                                             ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulTimer))ROM_TIMERTABLE[18])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerIntEnable                                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_TIMERTABLE[19])
X#define ROM_TimerIntEnable                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_TIMERTABLE[19])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerIntDisable                                                   \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_TIMERTABLE[20])
X#define ROM_TimerIntDisable                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_TIMERTABLE[20])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_TimerIntStatus                                                    \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            tBoolean bMasked))ROM_TIMERTABLE[21])
X#define ROM_TimerIntStatus                                                            ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_TIMERTABLE[21])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_TimerControlWaitOnTrigger                                         \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulTimer,                                     \
S                   tBoolean bWait))ROM_TIMERTABLE[22])
X#define ROM_TimerControlWaitOnTrigger                                                 ((void (*)(unsigned long ulBase,                                                         unsigned long ulTimer,                                                        tBoolean bWait))ROM_TIMERTABLE[22])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_TimerLoadSet64                                                    \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long long ullValue))ROM_TIMERTABLE[23])
X#define ROM_TimerLoadSet64                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long long ullValue))ROM_TIMERTABLE[23])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_TimerLoadGet64                                                    \
S        ((unsigned long long (*)(unsigned long ulBase))ROM_TIMERTABLE[24])
X#define ROM_TimerLoadGet64                                                            ((unsigned long long (*)(unsigned long ulBase))ROM_TIMERTABLE[24])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_TimerValueGet64                                                   \
S        ((unsigned long long (*)(unsigned long ulBase))ROM_TIMERTABLE[25])
X#define ROM_TimerValueGet64                                                           ((unsigned long long (*)(unsigned long ulBase))ROM_TIMERTABLE[25])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_TimerMatchSet64                                                   \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long long ullValue))ROM_TIMERTABLE[26])
X#define ROM_TimerMatchSet64                                                           ((void (*)(unsigned long ulBase,                                                         unsigned long long ullValue))ROM_TIMERTABLE[26])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_TimerMatchGet64                                                   \
S        ((unsigned long long (*)(unsigned long ulBase))ROM_TIMERTABLE[27])
X#define ROM_TimerMatchGet64                                                           ((unsigned long long (*)(unsigned long ulBase))ROM_TIMERTABLE[27])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the UART API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTCharPut                                                       \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned char ucData))ROM_UARTTABLE[0])
X#define ROM_UARTCharPut                                                               ((void (*)(unsigned long ulBase,                                                         unsigned char ucData))ROM_UARTTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTParityModeSet                                                 \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulParity))ROM_UARTTABLE[1])
X#define ROM_UARTParityModeSet                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulParity))ROM_UARTTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTParityModeGet                                                 \
N        ((unsigned long (*)(unsigned long ulBase))ROM_UARTTABLE[2])
X#define ROM_UARTParityModeGet                                                         ((unsigned long (*)(unsigned long ulBase))ROM_UARTTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTFIFOLevelSet                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulTxLevel,                                   \
N                   unsigned long ulRxLevel))ROM_UARTTABLE[3])
X#define ROM_UARTFIFOLevelSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulTxLevel,                                                      unsigned long ulRxLevel))ROM_UARTTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTFIFOLevelGet                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long *pulTxLevel,                                 \
N                   unsigned long *pulRxLevel))ROM_UARTTABLE[4])
X#define ROM_UARTFIFOLevelGet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long *pulTxLevel,                                                    unsigned long *pulRxLevel))ROM_UARTTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTConfigSetExpClk                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulUARTClk,                                   \
N                   unsigned long ulBaud,                                      \
N                   unsigned long ulConfig))ROM_UARTTABLE[5])
X#define ROM_UARTConfigSetExpClk                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulUARTClk,                                                      unsigned long ulBaud,                                                         unsigned long ulConfig))ROM_UARTTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTConfigGetExpClk                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulUARTClk,                                   \
N                   unsigned long *pulBaud,                                    \
N                   unsigned long *pulConfig))ROM_UARTTABLE[6])
X#define ROM_UARTConfigGetExpClk                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulUARTClk,                                                      unsigned long *pulBaud,                                                       unsigned long *pulConfig))ROM_UARTTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTEnable                                                        \
N        ((void (*)(unsigned long ulBase))ROM_UARTTABLE[7])
X#define ROM_UARTEnable                                                                ((void (*)(unsigned long ulBase))ROM_UARTTABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTDisable                                                       \
N        ((void (*)(unsigned long ulBase))ROM_UARTTABLE[8])
X#define ROM_UARTDisable                                                               ((void (*)(unsigned long ulBase))ROM_UARTTABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTEnableSIR                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   tBoolean bLowPower))ROM_UARTTABLE[9])
X#define ROM_UARTEnableSIR                                                             ((void (*)(unsigned long ulBase,                                                         tBoolean bLowPower))ROM_UARTTABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTDisableSIR                                                    \
N        ((void (*)(unsigned long ulBase))ROM_UARTTABLE[10])
X#define ROM_UARTDisableSIR                                                            ((void (*)(unsigned long ulBase))ROM_UARTTABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTCharsAvail                                                    \
N        ((tBoolean (*)(unsigned long ulBase))ROM_UARTTABLE[11])
X#define ROM_UARTCharsAvail                                                            ((tBoolean (*)(unsigned long ulBase))ROM_UARTTABLE[11])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTSpaceAvail                                                    \
N        ((tBoolean (*)(unsigned long ulBase))ROM_UARTTABLE[12])
X#define ROM_UARTSpaceAvail                                                            ((tBoolean (*)(unsigned long ulBase))ROM_UARTTABLE[12])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTCharGetNonBlocking                                            \
N        ((long (*)(unsigned long ulBase))ROM_UARTTABLE[13])
X#define ROM_UARTCharGetNonBlocking                                                    ((long (*)(unsigned long ulBase))ROM_UARTTABLE[13])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTCharGet                                                       \
N        ((long (*)(unsigned long ulBase))ROM_UARTTABLE[14])
X#define ROM_UARTCharGet                                                               ((long (*)(unsigned long ulBase))ROM_UARTTABLE[14])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTCharPutNonBlocking                                            \
N        ((tBoolean (*)(unsigned long ulBase,                                  \
N                       unsigned char ucData))ROM_UARTTABLE[15])
X#define ROM_UARTCharPutNonBlocking                                                    ((tBoolean (*)(unsigned long ulBase,                                                         unsigned char ucData))ROM_UARTTABLE[15])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTBreakCtl                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   tBoolean bBreakState))ROM_UARTTABLE[16])
X#define ROM_UARTBreakCtl                                                              ((void (*)(unsigned long ulBase,                                                         tBoolean bBreakState))ROM_UARTTABLE[16])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTIntEnable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_UARTTABLE[17])
X#define ROM_UARTIntEnable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_UARTTABLE[17])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTIntDisable                                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_UARTTABLE[18])
X#define ROM_UARTIntDisable                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_UARTTABLE[18])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTIntStatus                                                     \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            tBoolean bMasked))ROM_UARTTABLE[19])
X#define ROM_UARTIntStatus                                                             ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_UARTTABLE[19])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTIntClear                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_UARTTABLE[20])
X#define ROM_UARTIntClear                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_UARTTABLE[20])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UpdateUART                                                        \
N        ((void (*)(void))ROM_UARTTABLE[21])
X#define ROM_UpdateUART                                                                ((void (*)(void))ROM_UARTTABLE[21])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTDMAEnable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulDMAFlags))ROM_UARTTABLE[22])
X#define ROM_UARTDMAEnable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulDMAFlags))ROM_UARTTABLE[22])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_UARTDMADisable                                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulDMAFlags))ROM_UARTTABLE[23])
X#define ROM_UARTDMADisable                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulDMAFlags))ROM_UARTTABLE[23])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_UARTFIFOEnable                                                    \
S        ((void (*)(unsigned long ulBase))ROM_UARTTABLE[24])
X#define ROM_UARTFIFOEnable                                                            ((void (*)(unsigned long ulBase))ROM_UARTTABLE[24])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_UARTFIFODisable                                                   \
S        ((void (*)(unsigned long ulBase))ROM_UARTTABLE[25])
X#define ROM_UARTFIFODisable                                                           ((void (*)(unsigned long ulBase))ROM_UARTTABLE[25])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_UARTBusy                                                          \
S        ((tBoolean (*)(unsigned long ulBase))ROM_UARTTABLE[26])
X#define ROM_UARTBusy                                                                  ((tBoolean (*)(unsigned long ulBase))ROM_UARTTABLE[26])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_UARTTxIntModeSet                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulMode))ROM_UARTTABLE[27])
X#define ROM_UARTTxIntModeSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulMode))ROM_UARTTABLE[27])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_UARTTxIntModeGet                                                  \
S        ((unsigned long (*)(unsigned long ulBase))ROM_UARTTABLE[28])
X#define ROM_UARTTxIntModeGet                                                          ((unsigned long (*)(unsigned long ulBase))ROM_UARTTABLE[28])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_UARTRxErrorGet                                                    \
S        ((unsigned long (*)(unsigned long ulBase))ROM_UARTTABLE[29])
X#define ROM_UARTRxErrorGet                                                            ((unsigned long (*)(unsigned long ulBase))ROM_UARTTABLE[29])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_UARTRxErrorClear                                                  \
S        ((void (*)(unsigned long ulBase))ROM_UARTTABLE[30])
X#define ROM_UARTRxErrorClear                                                          ((void (*)(unsigned long ulBase))ROM_UARTTABLE[30])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_UARTClockSourceSet                                                \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulSource))ROM_UARTTABLE[31])
X#define ROM_UARTClockSourceSet                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulSource))ROM_UARTTABLE[31])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_UARTClockSourceGet                                                \
S        ((unsigned long (*)(unsigned long ulBase))ROM_UARTTABLE[32])
X#define ROM_UARTClockSourceGet                                                        ((unsigned long (*)(unsigned long ulBase))ROM_UARTTABLE[32])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_UART9BitEnable                                                    \
S        ((void (*)(unsigned long ulBase))ROM_UARTTABLE[33])
X#define ROM_UART9BitEnable                                                            ((void (*)(unsigned long ulBase))ROM_UARTTABLE[33])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_UART9BitDisable                                                   \
S        ((void (*)(unsigned long ulBase))ROM_UARTTABLE[34])
X#define ROM_UART9BitDisable                                                           ((void (*)(unsigned long ulBase))ROM_UARTTABLE[34])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_UART9BitAddrSet                                                   \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned char ucAddr,                                      \
S                   unsigned char ucMask))ROM_UARTTABLE[35])
X#define ROM_UART9BitAddrSet                                                           ((void (*)(unsigned long ulBase,                                                         unsigned char ucAddr,                                                         unsigned char ucMask))ROM_UARTTABLE[35])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_UART9BitAddrSend                                                  \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned char ucAddr))ROM_UARTTABLE[36])
X#define ROM_UART9BitAddrSend                                                          ((void (*)(unsigned long ulBase,                                                         unsigned char ucAddr))ROM_UARTTABLE[36])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the uDMA API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelTransferSet                                            \
N        ((void (*)(unsigned long ulChannelStructIndex,                        \
N                   unsigned long ulMode,                                      \
N                   void *pvSrcAddr,                                           \
N                   void *pvDstAddr,                                           \
N                   unsigned long ulTransferSize))ROM_UDMATABLE[0])
X#define ROM_uDMAChannelTransferSet                                                    ((void (*)(unsigned long ulChannelStructIndex,                                           unsigned long ulMode,                                                         void *pvSrcAddr,                                                              void *pvDstAddr,                                                              unsigned long ulTransferSize))ROM_UDMATABLE[0])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAEnable                                                        \
N        ((void (*)(void))ROM_UDMATABLE[1])
X#define ROM_uDMAEnable                                                                ((void (*)(void))ROM_UDMATABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMADisable                                                       \
N        ((void (*)(void))ROM_UDMATABLE[2])
X#define ROM_uDMADisable                                                               ((void (*)(void))ROM_UDMATABLE[2])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAErrorStatusGet                                                \
N        ((unsigned long (*)(void))ROM_UDMATABLE[3])
X#define ROM_uDMAErrorStatusGet                                                        ((unsigned long (*)(void))ROM_UDMATABLE[3])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAErrorStatusClear                                              \
N        ((void (*)(void))ROM_UDMATABLE[4])
X#define ROM_uDMAErrorStatusClear                                                      ((void (*)(void))ROM_UDMATABLE[4])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelEnable                                                 \
N        ((void (*)(unsigned long ulChannelNum))ROM_UDMATABLE[5])
X#define ROM_uDMAChannelEnable                                                         ((void (*)(unsigned long ulChannelNum))ROM_UDMATABLE[5])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelDisable                                                \
N        ((void (*)(unsigned long ulChannelNum))ROM_UDMATABLE[6])
X#define ROM_uDMAChannelDisable                                                        ((void (*)(unsigned long ulChannelNum))ROM_UDMATABLE[6])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelIsEnabled                                              \
N        ((tBoolean (*)(unsigned long ulChannelNum))ROM_UDMATABLE[7])
X#define ROM_uDMAChannelIsEnabled                                                      ((tBoolean (*)(unsigned long ulChannelNum))ROM_UDMATABLE[7])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAControlBaseSet                                                \
N        ((void (*)(void *pControlTable))ROM_UDMATABLE[8])
X#define ROM_uDMAControlBaseSet                                                        ((void (*)(void *pControlTable))ROM_UDMATABLE[8])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAControlBaseGet                                                \
N        ((void * (*)(void))ROM_UDMATABLE[9])
X#define ROM_uDMAControlBaseGet                                                        ((void * (*)(void))ROM_UDMATABLE[9])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelRequest                                                \
N        ((void (*)(unsigned long ulChannelNum))ROM_UDMATABLE[10])
X#define ROM_uDMAChannelRequest                                                        ((void (*)(unsigned long ulChannelNum))ROM_UDMATABLE[10])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelAttributeEnable                                        \
N        ((void (*)(unsigned long ulChannelNum,                                \
N                   unsigned long ulAttr))ROM_UDMATABLE[11])
X#define ROM_uDMAChannelAttributeEnable                                                ((void (*)(unsigned long ulChannelNum,                                                   unsigned long ulAttr))ROM_UDMATABLE[11])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelAttributeDisable                                       \
N        ((void (*)(unsigned long ulChannelNum,                                \
N                   unsigned long ulAttr))ROM_UDMATABLE[12])
X#define ROM_uDMAChannelAttributeDisable                                               ((void (*)(unsigned long ulChannelNum,                                                   unsigned long ulAttr))ROM_UDMATABLE[12])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelAttributeGet                                           \
N        ((unsigned long (*)(unsigned long ulChannelNum))ROM_UDMATABLE[13])
X#define ROM_uDMAChannelAttributeGet                                                   ((unsigned long (*)(unsigned long ulChannelNum))ROM_UDMATABLE[13])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelControlSet                                             \
N        ((void (*)(unsigned long ulChannelStructIndex,                        \
N                   unsigned long ulControl))ROM_UDMATABLE[14])
X#define ROM_uDMAChannelControlSet                                                     ((void (*)(unsigned long ulChannelStructIndex,                                           unsigned long ulControl))ROM_UDMATABLE[14])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L
S#define ROM_uDMAChannelSizeGet                                                \
S        ((unsigned long (*)(unsigned long ulChannelStructIndex))ROM_UDMATABLE[15])
X#define ROM_uDMAChannelSizeGet                                                        ((unsigned long (*)(unsigned long ulChannelStructIndex))ROM_UDMATABLE[15])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_uDMAChannelModeGet                                                \
N        ((unsigned long (*)(unsigned long ulChannelStructIndex))ROM_UDMATABLE[16])
X#define ROM_uDMAChannelModeGet                                                        ((unsigned long (*)(unsigned long ulChannelStructIndex))ROM_UDMATABLE[16])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_uDMAChannelSelectSecondary                                        \
S        ((void (*)(unsigned long ulSecPeriphs))ROM_UDMATABLE[17])
X#define ROM_uDMAChannelSelectSecondary                                                ((void (*)(unsigned long ulSecPeriphs))ROM_UDMATABLE[17])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_uDMAChannelSelectDefault                                          \
S        ((void (*)(unsigned long ulDefPeriphs))ROM_UDMATABLE[18])
X#define ROM_uDMAChannelSelectDefault                                                  ((void (*)(unsigned long ulDefPeriphs))ROM_UDMATABLE[18])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_uDMAIntStatus                                                     \
S        ((unsigned long (*)(void))ROM_UDMATABLE[19])
X#define ROM_uDMAIntStatus                                                             ((unsigned long (*)(void))ROM_UDMATABLE[19])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_uDMAIntClear                                                      \
S        ((void (*)(unsigned long ulChanMask))ROM_UDMATABLE[20])
X#define ROM_uDMAIntClear                                                              ((void (*)(unsigned long ulChanMask))ROM_UDMATABLE[20])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_uDMAControlAlternateBaseGet                                       \
S        ((void * (*)(void))ROM_UDMATABLE[21])
X#define ROM_uDMAControlAlternateBaseGet                                               ((void * (*)(void))ROM_UDMATABLE[21])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_uDMAChannelScatterGatherSet                                       \
S        ((void (*)(unsigned long ulChannelNum,                                \
S                   unsigned ulTaskCount,                                      \
S                   void *pvTaskList,                                          \
S                   unsigned long ulIsPeriphSG))ROM_UDMATABLE[22])
X#define ROM_uDMAChannelScatterGatherSet                                               ((void (*)(unsigned long ulChannelNum,                                                   unsigned ulTaskCount,                                                         void *pvTaskList,                                                             unsigned long ulIsPeriphSG))ROM_UDMATABLE[22])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_uDMAChannelAssign                                                 \
S        ((void (*)(unsigned long ulMapping))ROM_UDMATABLE[23])
X#define ROM_uDMAChannelAssign                                                         ((void (*)(unsigned long ulMapping))ROM_UDMATABLE[23])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the USB API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBIntStatus                                                      \
N        ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[0])
X#define ROM_USBIntStatus                                                              ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[0])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBDevAddrGet                                                     \
N        ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[1])
X#define ROM_USBDevAddrGet                                                             ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBDevAddrSet                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulAddress))ROM_USBTABLE[2])
X#define ROM_USBDevAddrSet                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulAddress))ROM_USBTABLE[2])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBDevConnect                                                     \
N        ((void (*)(unsigned long ulBase))ROM_USBTABLE[3])
X#define ROM_USBDevConnect                                                             ((void (*)(unsigned long ulBase))ROM_USBTABLE[3])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBDevDisconnect                                                  \
N        ((void (*)(unsigned long ulBase))ROM_USBTABLE[4])
X#define ROM_USBDevDisconnect                                                          ((void (*)(unsigned long ulBase))ROM_USBTABLE[4])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBDevEndpointConfigSet                                           \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long ulMaxPacketSize,                             \
N                   unsigned long ulFlags))ROM_USBTABLE[5])
X#define ROM_USBDevEndpointConfigSet                                                   ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulMaxPacketSize,                                                unsigned long ulFlags))ROM_USBTABLE[5])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBDevEndpointDataAck                                             \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   tBoolean bIsLastPacket))ROM_USBTABLE[6])
X#define ROM_USBDevEndpointDataAck                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     tBoolean bIsLastPacket))ROM_USBTABLE[6])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBDevEndpointStall                                               \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long ulFlags))ROM_USBTABLE[7])
X#define ROM_USBDevEndpointStall                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[7])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_USBDevEndpointStallClear                                          \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulEndpoint,                                  \
S                   unsigned long ulFlags))ROM_USBTABLE[8])
X#define ROM_USBDevEndpointStallClear                                                  ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[8])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBDevEndpointStatusClear                                         \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long ulFlags))ROM_USBTABLE[9])
X#define ROM_USBDevEndpointStatusClear                                                 ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[9])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBEndpointDataGet                                                \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned char *pucData,                                    \
N                   unsigned long *pulSize))ROM_USBTABLE[10])
X#define ROM_USBEndpointDataGet                                                        ((long (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned char *pucData,                                                       unsigned long *pulSize))ROM_USBTABLE[10])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBEndpointDataPut                                                \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned char *pucData,                                    \
N                   unsigned long ulSize))ROM_USBTABLE[11])
X#define ROM_USBEndpointDataPut                                                        ((long (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned char *pucData,                                                       unsigned long ulSize))ROM_USBTABLE[11])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBEndpointDataSend                                               \
N        ((long (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long ulTransType))ROM_USBTABLE[12])
X#define ROM_USBEndpointDataSend                                                       ((long (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulTransType))ROM_USBTABLE[12])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBEndpointDataToggleClear                                        \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long ulFlags))ROM_USBTABLE[13])
X#define ROM_USBEndpointDataToggleClear                                                ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[13])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBEndpointStatus                                                 \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulEndpoint))ROM_USBTABLE[14])
X#define ROM_USBEndpointStatus                                                         ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint))ROM_USBTABLE[14])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBFIFOAddrGet                                                    \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulEndpoint))ROM_USBTABLE[15])
X#define ROM_USBFIFOAddrGet                                                            ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint))ROM_USBTABLE[15])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBFIFOConfigGet                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long *pulFIFOAddress,                             \
N                   unsigned long *pulFIFOSize,                                \
N                   unsigned long ulFlags))ROM_USBTABLE[16])
X#define ROM_USBFIFOConfigGet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long *pulFIFOAddress,                                                unsigned long *pulFIFOSize,                                                   unsigned long ulFlags))ROM_USBTABLE[16])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBFIFOConfigSet                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long ulFIFOAddress,                               \
N                   unsigned long ulFIFOSize,                                  \
N                   unsigned long ulFlags))ROM_USBTABLE[17])
X#define ROM_USBFIFOConfigSet                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFIFOAddress,                                                  unsigned long ulFIFOSize,                                                     unsigned long ulFlags))ROM_USBTABLE[17])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_USBFIFOFlush                                                      \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulEndpoint,                                  \
S                   unsigned long ulFlags))ROM_USBTABLE[18])
X#define ROM_USBFIFOFlush                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[18])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBFrameNumberGet                                                 \
N        ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[19])
X#define ROM_USBFrameNumberGet                                                         ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[19])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostAddrGet                                                    \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulEndpoint,                         \
N                            unsigned long ulFlags))ROM_USBTABLE[20])
X#define ROM_USBHostAddrGet                                                            ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[20])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostAddrSet                                                    \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long ulAddr,                                      \
N                   unsigned long ulFlags))ROM_USBTABLE[21])
X#define ROM_USBHostAddrSet                                                            ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulAddr,                                                         unsigned long ulFlags))ROM_USBTABLE[21])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostEndpointDataAck                                            \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint))ROM_USBTABLE[23])
X#define ROM_USBHostEndpointDataAck                                                    ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint))ROM_USBTABLE[23])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostEndpointDataToggle                                         \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   tBoolean bDataToggle,                                      \
N                   unsigned long ulFlags))ROM_USBTABLE[24])
X#define ROM_USBHostEndpointDataToggle                                                 ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     tBoolean bDataToggle,                                                         unsigned long ulFlags))ROM_USBTABLE[24])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostEndpointStatusClear                                        \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long ulFlags))ROM_USBTABLE[25])
X#define ROM_USBHostEndpointStatusClear                                                ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[25])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostHubAddrGet                                                 \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            unsigned long ulEndpoint,                         \
N                            unsigned long ulFlags))ROM_USBTABLE[26])
X#define ROM_USBHostHubAddrGet                                                         ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[26])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostHubAddrSet                                                 \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint,                                  \
N                   unsigned long ulAddr,                                      \
N                   unsigned long ulFlags))ROM_USBTABLE[27])
X#define ROM_USBHostHubAddrSet                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulAddr,                                                         unsigned long ulFlags))ROM_USBTABLE[27])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostPwrDisable                                                 \
N        ((void (*)(unsigned long ulBase))ROM_USBTABLE[28])
X#define ROM_USBHostPwrDisable                                                         ((void (*)(unsigned long ulBase))ROM_USBTABLE[28])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostPwrEnable                                                  \
N        ((void (*)(unsigned long ulBase))ROM_USBTABLE[29])
X#define ROM_USBHostPwrEnable                                                          ((void (*)(unsigned long ulBase))ROM_USBTABLE[29])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostPwrConfig                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulFlags))ROM_USBTABLE[30])
X#define ROM_USBHostPwrConfig                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulFlags))ROM_USBTABLE[30])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostPwrFaultDisable                                            \
N        ((void (*)(unsigned long ulBase))ROM_USBTABLE[31])
X#define ROM_USBHostPwrFaultDisable                                                    ((void (*)(unsigned long ulBase))ROM_USBTABLE[31])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostPwrFaultEnable                                             \
N        ((void (*)(unsigned long ulBase))ROM_USBTABLE[32])
X#define ROM_USBHostPwrFaultEnable                                                     ((void (*)(unsigned long ulBase))ROM_USBTABLE[32])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostRequestIN                                                  \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulEndpoint))ROM_USBTABLE[33])
X#define ROM_USBHostRequestIN                                                          ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint))ROM_USBTABLE[33])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostRequestStatus                                              \
N        ((void (*)(unsigned long ulBase))ROM_USBTABLE[34])
X#define ROM_USBHostRequestStatus                                                      ((void (*)(unsigned long ulBase))ROM_USBTABLE[34])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostReset                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   tBoolean bStart))ROM_USBTABLE[35])
X#define ROM_USBHostReset                                                              ((void (*)(unsigned long ulBase,                                                         tBoolean bStart))ROM_USBTABLE[35])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostResume                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   tBoolean bStart))ROM_USBTABLE[36])
X#define ROM_USBHostResume                                                             ((void (*)(unsigned long ulBase,                                                         tBoolean bStart))ROM_USBTABLE[36])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostSpeedGet                                                   \
N        ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[37])
X#define ROM_USBHostSpeedGet                                                           ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[37])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBHostSuspend                                                    \
N        ((void (*)(unsigned long ulBase))ROM_USBTABLE[38])
X#define ROM_USBHostSuspend                                                            ((void (*)(unsigned long ulBase))ROM_USBTABLE[38])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBIntDisable                                                     \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_USBTABLE[39])
X#define ROM_USBIntDisable                                                             ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_USBTABLE[39])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_USBIntEnable                                                      \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulIntFlags))ROM_USBTABLE[40])
X#define ROM_USBIntEnable                                                              ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_USBTABLE[40])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBDevEndpointConfigGet                                           \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulEndpoint,                                  \
S                   unsigned long *pulMaxPacketSize,                           \
S                   unsigned long *pulFlags))ROM_USBTABLE[41])
X#define ROM_USBDevEndpointConfigGet                                                   ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long *pulMaxPacketSize,                                              unsigned long *pulFlags))ROM_USBTABLE[41])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_USBEndpointDMAEnable                                              \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulEndpoint,                                  \
S                   unsigned long ulFlags))ROM_USBTABLE[42])
X#define ROM_USBEndpointDMAEnable                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[42])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_USBEndpointDMADisable                                             \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulEndpoint,                                  \
S                   unsigned long ulFlags))ROM_USBTABLE[43])
X#define ROM_USBEndpointDMADisable                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulFlags))ROM_USBTABLE[43])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBEndpointDataAvail                                              \
S        ((unsigned long (*)(unsigned long ulBase,                             \
S                            unsigned long ulEndpoint))ROM_USBTABLE[44])
X#define ROM_USBEndpointDataAvail                                                      ((unsigned long (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint))ROM_USBTABLE[44])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBOTGHostRequest                                                 \
S        ((void (*)(unsigned long ulBase,                                      \
S                   tBoolean bHNP))ROM_USBTABLE[45])
X#define ROM_USBOTGHostRequest                                                         ((void (*)(unsigned long ulBase,                                                         tBoolean bHNP))ROM_USBTABLE[45])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBModeGet                                                        \
S        ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[46])
X#define ROM_USBModeGet                                                                ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[46])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBEndpointDMAChannel                                             \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulEndpoint,                                  \
S                   unsigned long ulChannel))ROM_USBTABLE[47])
X#define ROM_USBEndpointDMAChannel                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulEndpoint,                                                     unsigned long ulChannel))ROM_USBTABLE[47])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBIntDisableControl                                              \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_USBTABLE[48])
X#define ROM_USBIntDisableControl                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_USBTABLE[48])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBIntEnableControl                                               \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_USBTABLE[49])
X#define ROM_USBIntEnableControl                                                       ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_USBTABLE[49])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBIntStatusControl                                               \
S        ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[50])
X#define ROM_USBIntStatusControl                                                       ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[50])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBIntDisableEndpoint                                             \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_USBTABLE[51])
X#define ROM_USBIntDisableEndpoint                                                     ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_USBTABLE[51])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBIntEnableEndpoint                                              \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulIntFlags))ROM_USBTABLE[52])
X#define ROM_USBIntEnableEndpoint                                                      ((void (*)(unsigned long ulBase,                                                         unsigned long ulIntFlags))ROM_USBTABLE[52])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L ||     0L ||     0L
S#define ROM_USBIntStatusEndpoint                                              \
S        ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[53])
X#define ROM_USBIntStatusEndpoint                                                      ((unsigned long (*)(unsigned long ulBase))ROM_USBTABLE[53])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_USBHostMode                                                       \
S        ((void (*)(unsigned long ulBase))ROM_USBTABLE[54])
X#define ROM_USBHostMode                                                               ((void (*)(unsigned long ulBase))ROM_USBTABLE[54])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_USBDevMode                                                        \
S        ((void (*)(unsigned long ulBase))ROM_USBTABLE[55])
X#define ROM_USBDevMode                                                                ((void (*)(unsigned long ulBase))ROM_USBTABLE[55])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_USBPHYPowerOff                                                    \
S        ((void (*)(unsigned long ulBase))ROM_USBTABLE[56])
X#define ROM_USBPHYPowerOff                                                            ((void (*)(unsigned long ulBase))ROM_USBTABLE[56])
N#endif
N#if defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     0L ||     0L
S#define ROM_USBPHYPowerOn                                                     \
S        ((void (*)(unsigned long ulBase))ROM_USBTABLE[57])
X#define ROM_USBPHYPowerOn                                                             ((void (*)(unsigned long ulBase))ROM_USBTABLE[57])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_USBOTGMode                                                        \
S        ((void (*)(unsigned long ulBase))ROM_USBTABLE[59])
X#define ROM_USBOTGMode                                                                ((void (*)(unsigned long ulBase))ROM_USBTABLE[59])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Watchdog API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogIntClear                                                  \
N        ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[0])
X#define ROM_WatchdogIntClear                                                          ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[0])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogRunning                                                   \
N        ((tBoolean (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[1])
X#define ROM_WatchdogRunning                                                           ((tBoolean (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[1])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogEnable                                                    \
N        ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[2])
X#define ROM_WatchdogEnable                                                            ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[2])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogResetEnable                                               \
N        ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[3])
X#define ROM_WatchdogResetEnable                                                       ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[3])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogResetDisable                                              \
N        ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[4])
X#define ROM_WatchdogResetDisable                                                      ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[4])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogLock                                                      \
N        ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[5])
X#define ROM_WatchdogLock                                                              ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[5])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogUnlock                                                    \
N        ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[6])
X#define ROM_WatchdogUnlock                                                            ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[6])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogLockState                                                 \
N        ((tBoolean (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[7])
X#define ROM_WatchdogLockState                                                         ((tBoolean (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[7])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogReloadSet                                                 \
N        ((void (*)(unsigned long ulBase,                                      \
N                   unsigned long ulLoadVal))ROM_WATCHDOGTABLE[8])
X#define ROM_WatchdogReloadSet                                                         ((void (*)(unsigned long ulBase,                                                         unsigned long ulLoadVal))ROM_WATCHDOGTABLE[8])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogReloadGet                                                 \
N        ((unsigned long (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[9])
X#define ROM_WatchdogReloadGet                                                         ((unsigned long (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[9])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogValueGet                                                  \
N        ((unsigned long (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[10])
X#define ROM_WatchdogValueGet                                                          ((unsigned long (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[10])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogIntEnable                                                 \
N        ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[11])
X#define ROM_WatchdogIntEnable                                                         ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[11])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogIntStatus                                                 \
N        ((unsigned long (*)(unsigned long ulBase,                             \
N                            tBoolean bMasked))ROM_WATCHDOGTABLE[12])
X#define ROM_WatchdogIntStatus                                                         ((unsigned long (*)(unsigned long ulBase,                                                         tBoolean bMasked))ROM_WATCHDOGTABLE[12])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogStallEnable                                               \
N        ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[13])
X#define ROM_WatchdogStallEnable                                                       ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[13])
N#endif
N#if defined(TARGET_IS_DUSTDEVIL_RA0) || \
N    defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L ||     1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_WatchdogStallDisable                                              \
N        ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[14])
X#define ROM_WatchdogStallDisable                                                      ((void (*)(unsigned long ulBase))ROM_WATCHDOGTABLE[14])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_WatchdogIntTypeSet                                                \
S        ((void (*)(unsigned long ulBase,                                      \
S                   unsigned long ulType))ROM_WATCHDOGTABLE[15])
X#define ROM_WatchdogIntTypeSet                                                        ((void (*)(unsigned long ulBase,                                                         unsigned long ulType))ROM_WATCHDOGTABLE[15])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Software API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_Crc16Array                                                        \
N        ((unsigned short (*)(unsigned long ulWordLen,                         \
N                             const unsigned long *pulData))ROM_SOFTWARETABLE[1])
X#define ROM_Crc16Array                                                                ((unsigned short (*)(unsigned long ulWordLen,                                                      const unsigned long *pulData))ROM_SOFTWARETABLE[1])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_Crc16Array3                                                       \
N        ((void (*)(unsigned long ulWordLen,                                   \
N                   const unsigned long *pulData,                              \
N                   unsigned short *pusCrc3))ROM_SOFTWARETABLE[2])
X#define ROM_Crc16Array3                                                               ((void (*)(unsigned long ulWordLen,                                                      const unsigned long *pulData,                                                 unsigned short *pusCrc3))ROM_SOFTWARETABLE[2])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_Crc16                                                             \
S        ((unsigned short (*)(unsigned short usCrc,                            \
S                             const unsigned char *pucData,                    \
S                             unsigned long ulCount))ROM_SOFTWARETABLE[3])
X#define ROM_Crc16                                                                     ((unsigned short (*)(unsigned short usCrc,                                                         const unsigned char *pucData,                                                 unsigned long ulCount))ROM_SOFTWARETABLE[3])
N#endif
N#if defined(TARGET_IS_BLIZZARD_RA1)
X#if 0L
S#define ROM_Crc8CCITT                                                         \
S        ((unsigned char (*)(unsigned char ucCrc,                              \
S                            const unsigned char *pucData,                     \
S                            unsigned long ulCount))ROM_SOFTWARETABLE[4])
X#define ROM_Crc8CCITT                                                                 ((unsigned char (*)(unsigned char ucCrc,                                                          const unsigned char *pucData,                                                 unsigned long ulCount))ROM_SOFTWARETABLE[4])
N#endif
N#if defined(TARGET_IS_TEMPEST_RB1) || \
N    defined(TARGET_IS_TEMPEST_RC1) || \
N    defined(TARGET_IS_TEMPEST_RC3) || \
N    defined(TARGET_IS_TEMPEST_RC5) || \
N    defined(TARGET_IS_FIRESTORM_RA2) || \
N    defined(TARGET_IS_BLIZZARD_RA1)
X#if 1L ||     0L ||     0L ||     0L ||     0L ||     0L
N#define ROM_pvAESTable                                                        \
N        ((void *)&(ROM_SOFTWARETABLE[7]))
X#define ROM_pvAESTable                                                                ((void *)&(ROM_SOFTWARETABLE[7]))
N#endif
N
N//*****************************************************************************
N//
N// Deprecated ROM functions.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N#ifdef ROM_FlashIntStatus
N#define ROM_FlashIntGetStatus \
N        ROM_FlashIntStatus
X#define ROM_FlashIntGetStatus         ROM_FlashIntStatus
N#endif
N#ifdef ROM_USBDevEndpointConfigSet
N#define ROM_USBDevEndpointConfig \
N        ROM_USBDevEndpointConfigSet
X#define ROM_USBDevEndpointConfig         ROM_USBDevEndpointConfigSet
N#endif
N#ifdef ROM_USBHostPwrConfig
N#define ROM_USBHostPwrFaultConfig \
N        ROM_USBHostPwrConfig
X#define ROM_USBHostPwrFaultConfig         ROM_USBHostPwrConfig
N#endif
N#endif
N
N#endif // __ROM_H__
L 33 "..\..\..\utils\uartstdio.c" 2
N#include "driverlib/rom_map.h"
L 1 "..\..\..\driverlib/rom_map.h" 1
N//*****************************************************************************
N//
N// rom_map.h - Macros to facilitate calling functions in the ROM when they are
N//             available and in flash otherwise.
N//
N// Copyright (c) 2008-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __ROM_MAP_H__
N#define __ROM_MAP_H__
N
N//*****************************************************************************
N//
N// Macros for the ADC API.
N//
N//*****************************************************************************
N#ifdef ROM_ADCSequenceDataGet
N#define MAP_ADCSequenceDataGet \
N        ROM_ADCSequenceDataGet
X#define MAP_ADCSequenceDataGet         ROM_ADCSequenceDataGet
N#else
S#define MAP_ADCSequenceDataGet \
S        ADCSequenceDataGet
X#define MAP_ADCSequenceDataGet         ADCSequenceDataGet
N#endif
N#ifdef ROM_ADCIntDisable
N#define MAP_ADCIntDisable \
N        ROM_ADCIntDisable
X#define MAP_ADCIntDisable         ROM_ADCIntDisable
N#else
S#define MAP_ADCIntDisable \
S        ADCIntDisable
X#define MAP_ADCIntDisable         ADCIntDisable
N#endif
N#ifdef ROM_ADCIntEnable
N#define MAP_ADCIntEnable \
N        ROM_ADCIntEnable
X#define MAP_ADCIntEnable         ROM_ADCIntEnable
N#else
S#define MAP_ADCIntEnable \
S        ADCIntEnable
X#define MAP_ADCIntEnable         ADCIntEnable
N#endif
N#ifdef ROM_ADCIntStatus
N#define MAP_ADCIntStatus \
N        ROM_ADCIntStatus
X#define MAP_ADCIntStatus         ROM_ADCIntStatus
N#else
S#define MAP_ADCIntStatus \
S        ADCIntStatus
X#define MAP_ADCIntStatus         ADCIntStatus
N#endif
N#ifdef ROM_ADCIntClear
N#define MAP_ADCIntClear \
N        ROM_ADCIntClear
X#define MAP_ADCIntClear         ROM_ADCIntClear
N#else
S#define MAP_ADCIntClear \
S        ADCIntClear
X#define MAP_ADCIntClear         ADCIntClear
N#endif
N#ifdef ROM_ADCSequenceEnable
N#define MAP_ADCSequenceEnable \
N        ROM_ADCSequenceEnable
X#define MAP_ADCSequenceEnable         ROM_ADCSequenceEnable
N#else
S#define MAP_ADCSequenceEnable \
S        ADCSequenceEnable
X#define MAP_ADCSequenceEnable         ADCSequenceEnable
N#endif
N#ifdef ROM_ADCSequenceDisable
N#define MAP_ADCSequenceDisable \
N        ROM_ADCSequenceDisable
X#define MAP_ADCSequenceDisable         ROM_ADCSequenceDisable
N#else
S#define MAP_ADCSequenceDisable \
S        ADCSequenceDisable
X#define MAP_ADCSequenceDisable         ADCSequenceDisable
N#endif
N#ifdef ROM_ADCSequenceConfigure
N#define MAP_ADCSequenceConfigure \
N        ROM_ADCSequenceConfigure
X#define MAP_ADCSequenceConfigure         ROM_ADCSequenceConfigure
N#else
S#define MAP_ADCSequenceConfigure \
S        ADCSequenceConfigure
X#define MAP_ADCSequenceConfigure         ADCSequenceConfigure
N#endif
N#ifdef ROM_ADCSequenceStepConfigure
N#define MAP_ADCSequenceStepConfigure \
N        ROM_ADCSequenceStepConfigure
X#define MAP_ADCSequenceStepConfigure         ROM_ADCSequenceStepConfigure
N#else
S#define MAP_ADCSequenceStepConfigure \
S        ADCSequenceStepConfigure
X#define MAP_ADCSequenceStepConfigure         ADCSequenceStepConfigure
N#endif
N#ifdef ROM_ADCSequenceOverflow
N#define MAP_ADCSequenceOverflow \
N        ROM_ADCSequenceOverflow
X#define MAP_ADCSequenceOverflow         ROM_ADCSequenceOverflow
N#else
S#define MAP_ADCSequenceOverflow \
S        ADCSequenceOverflow
X#define MAP_ADCSequenceOverflow         ADCSequenceOverflow
N#endif
N#ifdef ROM_ADCSequenceOverflowClear
N#define MAP_ADCSequenceOverflowClear \
N        ROM_ADCSequenceOverflowClear
X#define MAP_ADCSequenceOverflowClear         ROM_ADCSequenceOverflowClear
N#else
S#define MAP_ADCSequenceOverflowClear \
S        ADCSequenceOverflowClear
X#define MAP_ADCSequenceOverflowClear         ADCSequenceOverflowClear
N#endif
N#ifdef ROM_ADCSequenceUnderflow
N#define MAP_ADCSequenceUnderflow \
N        ROM_ADCSequenceUnderflow
X#define MAP_ADCSequenceUnderflow         ROM_ADCSequenceUnderflow
N#else
S#define MAP_ADCSequenceUnderflow \
S        ADCSequenceUnderflow
X#define MAP_ADCSequenceUnderflow         ADCSequenceUnderflow
N#endif
N#ifdef ROM_ADCSequenceUnderflowClear
N#define MAP_ADCSequenceUnderflowClear \
N        ROM_ADCSequenceUnderflowClear
X#define MAP_ADCSequenceUnderflowClear         ROM_ADCSequenceUnderflowClear
N#else
S#define MAP_ADCSequenceUnderflowClear \
S        ADCSequenceUnderflowClear
X#define MAP_ADCSequenceUnderflowClear         ADCSequenceUnderflowClear
N#endif
N#ifdef ROM_ADCProcessorTrigger
N#define MAP_ADCProcessorTrigger \
N        ROM_ADCProcessorTrigger
X#define MAP_ADCProcessorTrigger         ROM_ADCProcessorTrigger
N#else
S#define MAP_ADCProcessorTrigger \
S        ADCProcessorTrigger
X#define MAP_ADCProcessorTrigger         ADCProcessorTrigger
N#endif
N#ifdef ROM_ADCHardwareOversampleConfigure
N#define MAP_ADCHardwareOversampleConfigure \
N        ROM_ADCHardwareOversampleConfigure
X#define MAP_ADCHardwareOversampleConfigure         ROM_ADCHardwareOversampleConfigure
N#else
S#define MAP_ADCHardwareOversampleConfigure \
S        ADCHardwareOversampleConfigure
X#define MAP_ADCHardwareOversampleConfigure         ADCHardwareOversampleConfigure
N#endif
N#ifdef ROM_ADCComparatorConfigure
S#define MAP_ADCComparatorConfigure \
S        ROM_ADCComparatorConfigure
X#define MAP_ADCComparatorConfigure         ROM_ADCComparatorConfigure
N#else
N#define MAP_ADCComparatorConfigure \
N        ADCComparatorConfigure
X#define MAP_ADCComparatorConfigure         ADCComparatorConfigure
N#endif
N#ifdef ROM_ADCComparatorRegionSet
S#define MAP_ADCComparatorRegionSet \
S        ROM_ADCComparatorRegionSet
X#define MAP_ADCComparatorRegionSet         ROM_ADCComparatorRegionSet
N#else
N#define MAP_ADCComparatorRegionSet \
N        ADCComparatorRegionSet
X#define MAP_ADCComparatorRegionSet         ADCComparatorRegionSet
N#endif
N#ifdef ROM_ADCComparatorReset
S#define MAP_ADCComparatorReset \
S        ROM_ADCComparatorReset
X#define MAP_ADCComparatorReset         ROM_ADCComparatorReset
N#else
N#define MAP_ADCComparatorReset \
N        ADCComparatorReset
X#define MAP_ADCComparatorReset         ADCComparatorReset
N#endif
N#ifdef ROM_ADCComparatorIntDisable
S#define MAP_ADCComparatorIntDisable \
S        ROM_ADCComparatorIntDisable
X#define MAP_ADCComparatorIntDisable         ROM_ADCComparatorIntDisable
N#else
N#define MAP_ADCComparatorIntDisable \
N        ADCComparatorIntDisable
X#define MAP_ADCComparatorIntDisable         ADCComparatorIntDisable
N#endif
N#ifdef ROM_ADCComparatorIntEnable
S#define MAP_ADCComparatorIntEnable \
S        ROM_ADCComparatorIntEnable
X#define MAP_ADCComparatorIntEnable         ROM_ADCComparatorIntEnable
N#else
N#define MAP_ADCComparatorIntEnable \
N        ADCComparatorIntEnable
X#define MAP_ADCComparatorIntEnable         ADCComparatorIntEnable
N#endif
N#ifdef ROM_ADCComparatorIntStatus
S#define MAP_ADCComparatorIntStatus \
S        ROM_ADCComparatorIntStatus
X#define MAP_ADCComparatorIntStatus         ROM_ADCComparatorIntStatus
N#else
N#define MAP_ADCComparatorIntStatus \
N        ADCComparatorIntStatus
X#define MAP_ADCComparatorIntStatus         ADCComparatorIntStatus
N#endif
N#ifdef ROM_ADCComparatorIntClear
S#define MAP_ADCComparatorIntClear \
S        ROM_ADCComparatorIntClear
X#define MAP_ADCComparatorIntClear         ROM_ADCComparatorIntClear
N#else
N#define MAP_ADCComparatorIntClear \
N        ADCComparatorIntClear
X#define MAP_ADCComparatorIntClear         ADCComparatorIntClear
N#endif
N#ifdef ROM_ADCReferenceSet
S#define MAP_ADCReferenceSet \
S        ROM_ADCReferenceSet
X#define MAP_ADCReferenceSet         ROM_ADCReferenceSet
N#else
N#define MAP_ADCReferenceSet \
N        ADCReferenceSet
X#define MAP_ADCReferenceSet         ADCReferenceSet
N#endif
N#ifdef ROM_ADCReferenceGet
S#define MAP_ADCReferenceGet \
S        ROM_ADCReferenceGet
X#define MAP_ADCReferenceGet         ROM_ADCReferenceGet
N#else
N#define MAP_ADCReferenceGet \
N        ADCReferenceGet
X#define MAP_ADCReferenceGet         ADCReferenceGet
N#endif
N#ifdef ROM_ADCPhaseDelaySet
S#define MAP_ADCPhaseDelaySet \
S        ROM_ADCPhaseDelaySet
X#define MAP_ADCPhaseDelaySet         ROM_ADCPhaseDelaySet
N#else
N#define MAP_ADCPhaseDelaySet \
N        ADCPhaseDelaySet
X#define MAP_ADCPhaseDelaySet         ADCPhaseDelaySet
N#endif
N#ifdef ROM_ADCPhaseDelayGet
S#define MAP_ADCPhaseDelayGet \
S        ROM_ADCPhaseDelayGet
X#define MAP_ADCPhaseDelayGet         ROM_ADCPhaseDelayGet
N#else
N#define MAP_ADCPhaseDelayGet \
N        ADCPhaseDelayGet
X#define MAP_ADCPhaseDelayGet         ADCPhaseDelayGet
N#endif
N#ifdef ROM_ADCResolutionSet
S#define MAP_ADCResolutionSet \
S        ROM_ADCResolutionSet
X#define MAP_ADCResolutionSet         ROM_ADCResolutionSet
N#else
N#define MAP_ADCResolutionSet \
N        ADCResolutionSet
X#define MAP_ADCResolutionSet         ADCResolutionSet
N#endif
N#ifdef ROM_ADCResolutionGet
S#define MAP_ADCResolutionGet \
S        ROM_ADCResolutionGet
X#define MAP_ADCResolutionGet         ROM_ADCResolutionGet
N#else
N#define MAP_ADCResolutionGet \
N        ADCResolutionGet
X#define MAP_ADCResolutionGet         ADCResolutionGet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the CAN API.
N//
N//*****************************************************************************
N#ifdef ROM_CANIntClear
N#define MAP_CANIntClear \
N        ROM_CANIntClear
X#define MAP_CANIntClear         ROM_CANIntClear
N#else
S#define MAP_CANIntClear \
S        CANIntClear
X#define MAP_CANIntClear         CANIntClear
N#endif
N#ifdef ROM_CANInit
N#define MAP_CANInit \
N        ROM_CANInit
X#define MAP_CANInit         ROM_CANInit
N#else
S#define MAP_CANInit \
S        CANInit
X#define MAP_CANInit         CANInit
N#endif
N#ifdef ROM_CANEnable
N#define MAP_CANEnable \
N        ROM_CANEnable
X#define MAP_CANEnable         ROM_CANEnable
N#else
S#define MAP_CANEnable \
S        CANEnable
X#define MAP_CANEnable         CANEnable
N#endif
N#ifdef ROM_CANDisable
N#define MAP_CANDisable \
N        ROM_CANDisable
X#define MAP_CANDisable         ROM_CANDisable
N#else
S#define MAP_CANDisable \
S        CANDisable
X#define MAP_CANDisable         CANDisable
N#endif
N#ifdef ROM_CANBitTimingSet
N#define MAP_CANBitTimingSet \
N        ROM_CANBitTimingSet
X#define MAP_CANBitTimingSet         ROM_CANBitTimingSet
N#else
S#define MAP_CANBitTimingSet \
S        CANBitTimingSet
X#define MAP_CANBitTimingSet         CANBitTimingSet
N#endif
N#ifdef ROM_CANBitTimingGet
N#define MAP_CANBitTimingGet \
N        ROM_CANBitTimingGet
X#define MAP_CANBitTimingGet         ROM_CANBitTimingGet
N#else
S#define MAP_CANBitTimingGet \
S        CANBitTimingGet
X#define MAP_CANBitTimingGet         CANBitTimingGet
N#endif
N#ifdef ROM_CANMessageSet
N#define MAP_CANMessageSet \
N        ROM_CANMessageSet
X#define MAP_CANMessageSet         ROM_CANMessageSet
N#else
S#define MAP_CANMessageSet \
S        CANMessageSet
X#define MAP_CANMessageSet         CANMessageSet
N#endif
N#ifdef ROM_CANMessageGet
N#define MAP_CANMessageGet \
N        ROM_CANMessageGet
X#define MAP_CANMessageGet         ROM_CANMessageGet
N#else
S#define MAP_CANMessageGet \
S        CANMessageGet
X#define MAP_CANMessageGet         CANMessageGet
N#endif
N#ifdef ROM_CANStatusGet
N#define MAP_CANStatusGet \
N        ROM_CANStatusGet
X#define MAP_CANStatusGet         ROM_CANStatusGet
N#else
S#define MAP_CANStatusGet \
S        CANStatusGet
X#define MAP_CANStatusGet         CANStatusGet
N#endif
N#ifdef ROM_CANMessageClear
N#define MAP_CANMessageClear \
N        ROM_CANMessageClear
X#define MAP_CANMessageClear         ROM_CANMessageClear
N#else
S#define MAP_CANMessageClear \
S        CANMessageClear
X#define MAP_CANMessageClear         CANMessageClear
N#endif
N#ifdef ROM_CANIntEnable
N#define MAP_CANIntEnable \
N        ROM_CANIntEnable
X#define MAP_CANIntEnable         ROM_CANIntEnable
N#else
S#define MAP_CANIntEnable \
S        CANIntEnable
X#define MAP_CANIntEnable         CANIntEnable
N#endif
N#ifdef ROM_CANIntDisable
N#define MAP_CANIntDisable \
N        ROM_CANIntDisable
X#define MAP_CANIntDisable         ROM_CANIntDisable
N#else
S#define MAP_CANIntDisable \
S        CANIntDisable
X#define MAP_CANIntDisable         CANIntDisable
N#endif
N#ifdef ROM_CANIntStatus
N#define MAP_CANIntStatus \
N        ROM_CANIntStatus
X#define MAP_CANIntStatus         ROM_CANIntStatus
N#else
S#define MAP_CANIntStatus \
S        CANIntStatus
X#define MAP_CANIntStatus         CANIntStatus
N#endif
N#ifdef ROM_CANRetryGet
N#define MAP_CANRetryGet \
N        ROM_CANRetryGet
X#define MAP_CANRetryGet         ROM_CANRetryGet
N#else
S#define MAP_CANRetryGet \
S        CANRetryGet
X#define MAP_CANRetryGet         CANRetryGet
N#endif
N#ifdef ROM_CANRetrySet
N#define MAP_CANRetrySet \
N        ROM_CANRetrySet
X#define MAP_CANRetrySet         ROM_CANRetrySet
N#else
S#define MAP_CANRetrySet \
S        CANRetrySet
X#define MAP_CANRetrySet         CANRetrySet
N#endif
N#ifdef ROM_CANErrCntrGet
N#define MAP_CANErrCntrGet \
N        ROM_CANErrCntrGet
X#define MAP_CANErrCntrGet         ROM_CANErrCntrGet
N#else
S#define MAP_CANErrCntrGet \
S        CANErrCntrGet
X#define MAP_CANErrCntrGet         CANErrCntrGet
N#endif
N#ifdef ROM_CANBitRateSet
S#define MAP_CANBitRateSet \
S        ROM_CANBitRateSet
X#define MAP_CANBitRateSet         ROM_CANBitRateSet
N#else
N#define MAP_CANBitRateSet \
N        CANBitRateSet
X#define MAP_CANBitRateSet         CANBitRateSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Comparator API.
N//
N//*****************************************************************************
N#ifdef ROM_ComparatorIntClear
N#define MAP_ComparatorIntClear \
N        ROM_ComparatorIntClear
X#define MAP_ComparatorIntClear         ROM_ComparatorIntClear
N#else
S#define MAP_ComparatorIntClear \
S        ComparatorIntClear
X#define MAP_ComparatorIntClear         ComparatorIntClear
N#endif
N#ifdef ROM_ComparatorConfigure
N#define MAP_ComparatorConfigure \
N        ROM_ComparatorConfigure
X#define MAP_ComparatorConfigure         ROM_ComparatorConfigure
N#else
S#define MAP_ComparatorConfigure \
S        ComparatorConfigure
X#define MAP_ComparatorConfigure         ComparatorConfigure
N#endif
N#ifdef ROM_ComparatorRefSet
N#define MAP_ComparatorRefSet \
N        ROM_ComparatorRefSet
X#define MAP_ComparatorRefSet         ROM_ComparatorRefSet
N#else
S#define MAP_ComparatorRefSet \
S        ComparatorRefSet
X#define MAP_ComparatorRefSet         ComparatorRefSet
N#endif
N#ifdef ROM_ComparatorValueGet
N#define MAP_ComparatorValueGet \
N        ROM_ComparatorValueGet
X#define MAP_ComparatorValueGet         ROM_ComparatorValueGet
N#else
S#define MAP_ComparatorValueGet \
S        ComparatorValueGet
X#define MAP_ComparatorValueGet         ComparatorValueGet
N#endif
N#ifdef ROM_ComparatorIntEnable
N#define MAP_ComparatorIntEnable \
N        ROM_ComparatorIntEnable
X#define MAP_ComparatorIntEnable         ROM_ComparatorIntEnable
N#else
S#define MAP_ComparatorIntEnable \
S        ComparatorIntEnable
X#define MAP_ComparatorIntEnable         ComparatorIntEnable
N#endif
N#ifdef ROM_ComparatorIntDisable
N#define MAP_ComparatorIntDisable \
N        ROM_ComparatorIntDisable
X#define MAP_ComparatorIntDisable         ROM_ComparatorIntDisable
N#else
S#define MAP_ComparatorIntDisable \
S        ComparatorIntDisable
X#define MAP_ComparatorIntDisable         ComparatorIntDisable
N#endif
N#ifdef ROM_ComparatorIntStatus
N#define MAP_ComparatorIntStatus \
N        ROM_ComparatorIntStatus
X#define MAP_ComparatorIntStatus         ROM_ComparatorIntStatus
N#else
S#define MAP_ComparatorIntStatus \
S        ComparatorIntStatus
X#define MAP_ComparatorIntStatus         ComparatorIntStatus
N#endif
N
N//*****************************************************************************
N//
N// Macros for the EPI API.
N//
N//*****************************************************************************
N#ifdef ROM_EPIIntStatus
S#define MAP_EPIIntStatus \
S        ROM_EPIIntStatus
X#define MAP_EPIIntStatus         ROM_EPIIntStatus
N#else
N#define MAP_EPIIntStatus \
N        EPIIntStatus
X#define MAP_EPIIntStatus         EPIIntStatus
N#endif
N#ifdef ROM_EPIModeSet
S#define MAP_EPIModeSet \
S        ROM_EPIModeSet
X#define MAP_EPIModeSet         ROM_EPIModeSet
N#else
N#define MAP_EPIModeSet \
N        EPIModeSet
X#define MAP_EPIModeSet         EPIModeSet
N#endif
N#ifdef ROM_EPIDividerSet
S#define MAP_EPIDividerSet \
S        ROM_EPIDividerSet
X#define MAP_EPIDividerSet         ROM_EPIDividerSet
N#else
N#define MAP_EPIDividerSet \
N        EPIDividerSet
X#define MAP_EPIDividerSet         EPIDividerSet
N#endif
N#ifdef ROM_EPIConfigSDRAMSet
S#define MAP_EPIConfigSDRAMSet \
S        ROM_EPIConfigSDRAMSet
X#define MAP_EPIConfigSDRAMSet         ROM_EPIConfigSDRAMSet
N#else
N#define MAP_EPIConfigSDRAMSet \
N        EPIConfigSDRAMSet
X#define MAP_EPIConfigSDRAMSet         EPIConfigSDRAMSet
N#endif
N#ifdef ROM_EPIConfigGPModeSet
S#define MAP_EPIConfigGPModeSet \
S        ROM_EPIConfigGPModeSet
X#define MAP_EPIConfigGPModeSet         ROM_EPIConfigGPModeSet
N#else
N#define MAP_EPIConfigGPModeSet \
N        EPIConfigGPModeSet
X#define MAP_EPIConfigGPModeSet         EPIConfigGPModeSet
N#endif
N#ifdef ROM_EPIConfigHB8Set
S#define MAP_EPIConfigHB8Set \
S        ROM_EPIConfigHB8Set
X#define MAP_EPIConfigHB8Set         ROM_EPIConfigHB8Set
N#else
N#define MAP_EPIConfigHB8Set \
N        EPIConfigHB8Set
X#define MAP_EPIConfigHB8Set         EPIConfigHB8Set
N#endif
N#ifdef ROM_EPIConfigHB16Set
S#define MAP_EPIConfigHB16Set \
S        ROM_EPIConfigHB16Set
X#define MAP_EPIConfigHB16Set         ROM_EPIConfigHB16Set
N#else
N#define MAP_EPIConfigHB16Set \
N        EPIConfigHB16Set
X#define MAP_EPIConfigHB16Set         EPIConfigHB16Set
N#endif
N#ifdef ROM_EPIAddressMapSet
S#define MAP_EPIAddressMapSet \
S        ROM_EPIAddressMapSet
X#define MAP_EPIAddressMapSet         ROM_EPIAddressMapSet
N#else
N#define MAP_EPIAddressMapSet \
N        EPIAddressMapSet
X#define MAP_EPIAddressMapSet         EPIAddressMapSet
N#endif
N#ifdef ROM_EPINonBlockingReadConfigure
S#define MAP_EPINonBlockingReadConfigure \
S        ROM_EPINonBlockingReadConfigure
X#define MAP_EPINonBlockingReadConfigure         ROM_EPINonBlockingReadConfigure
N#else
N#define MAP_EPINonBlockingReadConfigure \
N        EPINonBlockingReadConfigure
X#define MAP_EPINonBlockingReadConfigure         EPINonBlockingReadConfigure
N#endif
N#ifdef ROM_EPINonBlockingReadStart
S#define MAP_EPINonBlockingReadStart \
S        ROM_EPINonBlockingReadStart
X#define MAP_EPINonBlockingReadStart         ROM_EPINonBlockingReadStart
N#else
N#define MAP_EPINonBlockingReadStart \
N        EPINonBlockingReadStart
X#define MAP_EPINonBlockingReadStart         EPINonBlockingReadStart
N#endif
N#ifdef ROM_EPINonBlockingReadStop
S#define MAP_EPINonBlockingReadStop \
S        ROM_EPINonBlockingReadStop
X#define MAP_EPINonBlockingReadStop         ROM_EPINonBlockingReadStop
N#else
N#define MAP_EPINonBlockingReadStop \
N        EPINonBlockingReadStop
X#define MAP_EPINonBlockingReadStop         EPINonBlockingReadStop
N#endif
N#ifdef ROM_EPINonBlockingReadCount
S#define MAP_EPINonBlockingReadCount \
S        ROM_EPINonBlockingReadCount
X#define MAP_EPINonBlockingReadCount         ROM_EPINonBlockingReadCount
N#else
N#define MAP_EPINonBlockingReadCount \
N        EPINonBlockingReadCount
X#define MAP_EPINonBlockingReadCount         EPINonBlockingReadCount
N#endif
N#ifdef ROM_EPINonBlockingReadAvail
S#define MAP_EPINonBlockingReadAvail \
S        ROM_EPINonBlockingReadAvail
X#define MAP_EPINonBlockingReadAvail         ROM_EPINonBlockingReadAvail
N#else
N#define MAP_EPINonBlockingReadAvail \
N        EPINonBlockingReadAvail
X#define MAP_EPINonBlockingReadAvail         EPINonBlockingReadAvail
N#endif
N#ifdef ROM_EPINonBlockingReadGet32
S#define MAP_EPINonBlockingReadGet32 \
S        ROM_EPINonBlockingReadGet32
X#define MAP_EPINonBlockingReadGet32         ROM_EPINonBlockingReadGet32
N#else
N#define MAP_EPINonBlockingReadGet32 \
N        EPINonBlockingReadGet32
X#define MAP_EPINonBlockingReadGet32         EPINonBlockingReadGet32
N#endif
N#ifdef ROM_EPINonBlockingReadGet16
S#define MAP_EPINonBlockingReadGet16 \
S        ROM_EPINonBlockingReadGet16
X#define MAP_EPINonBlockingReadGet16         ROM_EPINonBlockingReadGet16
N#else
N#define MAP_EPINonBlockingReadGet16 \
N        EPINonBlockingReadGet16
X#define MAP_EPINonBlockingReadGet16         EPINonBlockingReadGet16
N#endif
N#ifdef ROM_EPINonBlockingReadGet8
S#define MAP_EPINonBlockingReadGet8 \
S        ROM_EPINonBlockingReadGet8
X#define MAP_EPINonBlockingReadGet8         ROM_EPINonBlockingReadGet8
N#else
N#define MAP_EPINonBlockingReadGet8 \
N        EPINonBlockingReadGet8
X#define MAP_EPINonBlockingReadGet8         EPINonBlockingReadGet8
N#endif
N#ifdef ROM_EPIFIFOConfig
S#define MAP_EPIFIFOConfig \
S        ROM_EPIFIFOConfig
X#define MAP_EPIFIFOConfig         ROM_EPIFIFOConfig
N#else
N#define MAP_EPIFIFOConfig \
N        EPIFIFOConfig
X#define MAP_EPIFIFOConfig         EPIFIFOConfig
N#endif
N#ifdef ROM_EPIWriteFIFOCountGet
S#define MAP_EPIWriteFIFOCountGet \
S        ROM_EPIWriteFIFOCountGet
X#define MAP_EPIWriteFIFOCountGet         ROM_EPIWriteFIFOCountGet
N#else
N#define MAP_EPIWriteFIFOCountGet \
N        EPIWriteFIFOCountGet
X#define MAP_EPIWriteFIFOCountGet         EPIWriteFIFOCountGet
N#endif
N#ifdef ROM_EPIIntEnable
S#define MAP_EPIIntEnable \
S        ROM_EPIIntEnable
X#define MAP_EPIIntEnable         ROM_EPIIntEnable
N#else
N#define MAP_EPIIntEnable \
N        EPIIntEnable
X#define MAP_EPIIntEnable         EPIIntEnable
N#endif
N#ifdef ROM_EPIIntDisable
S#define MAP_EPIIntDisable \
S        ROM_EPIIntDisable
X#define MAP_EPIIntDisable         ROM_EPIIntDisable
N#else
N#define MAP_EPIIntDisable \
N        EPIIntDisable
X#define MAP_EPIIntDisable         EPIIntDisable
N#endif
N#ifdef ROM_EPIIntErrorStatus
S#define MAP_EPIIntErrorStatus \
S        ROM_EPIIntErrorStatus
X#define MAP_EPIIntErrorStatus         ROM_EPIIntErrorStatus
N#else
N#define MAP_EPIIntErrorStatus \
N        EPIIntErrorStatus
X#define MAP_EPIIntErrorStatus         EPIIntErrorStatus
N#endif
N#ifdef ROM_EPIIntErrorClear
S#define MAP_EPIIntErrorClear \
S        ROM_EPIIntErrorClear
X#define MAP_EPIIntErrorClear         ROM_EPIIntErrorClear
N#else
N#define MAP_EPIIntErrorClear \
N        EPIIntErrorClear
X#define MAP_EPIIntErrorClear         EPIIntErrorClear
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Ethernet API.
N//
N//*****************************************************************************
N#ifdef ROM_EthernetIntClear
N#define MAP_EthernetIntClear \
N        ROM_EthernetIntClear
X#define MAP_EthernetIntClear         ROM_EthernetIntClear
N#else
S#define MAP_EthernetIntClear \
S        EthernetIntClear
X#define MAP_EthernetIntClear         EthernetIntClear
N#endif
N#ifdef ROM_EthernetInitExpClk
N#define MAP_EthernetInitExpClk \
N        ROM_EthernetInitExpClk
X#define MAP_EthernetInitExpClk         ROM_EthernetInitExpClk
N#else
S#define MAP_EthernetInitExpClk \
S        EthernetInitExpClk
X#define MAP_EthernetInitExpClk         EthernetInitExpClk
N#endif
N#ifdef ROM_EthernetConfigSet
N#define MAP_EthernetConfigSet \
N        ROM_EthernetConfigSet
X#define MAP_EthernetConfigSet         ROM_EthernetConfigSet
N#else
S#define MAP_EthernetConfigSet \
S        EthernetConfigSet
X#define MAP_EthernetConfigSet         EthernetConfigSet
N#endif
N#ifdef ROM_EthernetConfigGet
N#define MAP_EthernetConfigGet \
N        ROM_EthernetConfigGet
X#define MAP_EthernetConfigGet         ROM_EthernetConfigGet
N#else
S#define MAP_EthernetConfigGet \
S        EthernetConfigGet
X#define MAP_EthernetConfigGet         EthernetConfigGet
N#endif
N#ifdef ROM_EthernetMACAddrSet
N#define MAP_EthernetMACAddrSet \
N        ROM_EthernetMACAddrSet
X#define MAP_EthernetMACAddrSet         ROM_EthernetMACAddrSet
N#else
S#define MAP_EthernetMACAddrSet \
S        EthernetMACAddrSet
X#define MAP_EthernetMACAddrSet         EthernetMACAddrSet
N#endif
N#ifdef ROM_EthernetMACAddrGet
N#define MAP_EthernetMACAddrGet \
N        ROM_EthernetMACAddrGet
X#define MAP_EthernetMACAddrGet         ROM_EthernetMACAddrGet
N#else
S#define MAP_EthernetMACAddrGet \
S        EthernetMACAddrGet
X#define MAP_EthernetMACAddrGet         EthernetMACAddrGet
N#endif
N#ifdef ROM_EthernetEnable
N#define MAP_EthernetEnable \
N        ROM_EthernetEnable
X#define MAP_EthernetEnable         ROM_EthernetEnable
N#else
S#define MAP_EthernetEnable \
S        EthernetEnable
X#define MAP_EthernetEnable         EthernetEnable
N#endif
N#ifdef ROM_EthernetDisable
N#define MAP_EthernetDisable \
N        ROM_EthernetDisable
X#define MAP_EthernetDisable         ROM_EthernetDisable
N#else
S#define MAP_EthernetDisable \
S        EthernetDisable
X#define MAP_EthernetDisable         EthernetDisable
N#endif
N#ifdef ROM_EthernetPacketAvail
N#define MAP_EthernetPacketAvail \
N        ROM_EthernetPacketAvail
X#define MAP_EthernetPacketAvail         ROM_EthernetPacketAvail
N#else
S#define MAP_EthernetPacketAvail \
S        EthernetPacketAvail
X#define MAP_EthernetPacketAvail         EthernetPacketAvail
N#endif
N#ifdef ROM_EthernetSpaceAvail
N#define MAP_EthernetSpaceAvail \
N        ROM_EthernetSpaceAvail
X#define MAP_EthernetSpaceAvail         ROM_EthernetSpaceAvail
N#else
S#define MAP_EthernetSpaceAvail \
S        EthernetSpaceAvail
X#define MAP_EthernetSpaceAvail         EthernetSpaceAvail
N#endif
N#ifdef ROM_EthernetPacketGetNonBlocking
N#define MAP_EthernetPacketGetNonBlocking \
N        ROM_EthernetPacketGetNonBlocking
X#define MAP_EthernetPacketGetNonBlocking         ROM_EthernetPacketGetNonBlocking
N#else
S#define MAP_EthernetPacketGetNonBlocking \
S        EthernetPacketGetNonBlocking
X#define MAP_EthernetPacketGetNonBlocking         EthernetPacketGetNonBlocking
N#endif
N#ifdef ROM_EthernetPacketGet
N#define MAP_EthernetPacketGet \
N        ROM_EthernetPacketGet
X#define MAP_EthernetPacketGet         ROM_EthernetPacketGet
N#else
S#define MAP_EthernetPacketGet \
S        EthernetPacketGet
X#define MAP_EthernetPacketGet         EthernetPacketGet
N#endif
N#ifdef ROM_EthernetPacketPutNonBlocking
N#define MAP_EthernetPacketPutNonBlocking \
N        ROM_EthernetPacketPutNonBlocking
X#define MAP_EthernetPacketPutNonBlocking         ROM_EthernetPacketPutNonBlocking
N#else
S#define MAP_EthernetPacketPutNonBlocking \
S        EthernetPacketPutNonBlocking
X#define MAP_EthernetPacketPutNonBlocking         EthernetPacketPutNonBlocking
N#endif
N#ifdef ROM_EthernetPacketPut
N#define MAP_EthernetPacketPut \
N        ROM_EthernetPacketPut
X#define MAP_EthernetPacketPut         ROM_EthernetPacketPut
N#else
S#define MAP_EthernetPacketPut \
S        EthernetPacketPut
X#define MAP_EthernetPacketPut         EthernetPacketPut
N#endif
N#ifdef ROM_EthernetIntEnable
N#define MAP_EthernetIntEnable \
N        ROM_EthernetIntEnable
X#define MAP_EthernetIntEnable         ROM_EthernetIntEnable
N#else
S#define MAP_EthernetIntEnable \
S        EthernetIntEnable
X#define MAP_EthernetIntEnable         EthernetIntEnable
N#endif
N#ifdef ROM_EthernetIntDisable
N#define MAP_EthernetIntDisable \
N        ROM_EthernetIntDisable
X#define MAP_EthernetIntDisable         ROM_EthernetIntDisable
N#else
S#define MAP_EthernetIntDisable \
S        EthernetIntDisable
X#define MAP_EthernetIntDisable         EthernetIntDisable
N#endif
N#ifdef ROM_EthernetIntStatus
N#define MAP_EthernetIntStatus \
N        ROM_EthernetIntStatus
X#define MAP_EthernetIntStatus         ROM_EthernetIntStatus
N#else
S#define MAP_EthernetIntStatus \
S        EthernetIntStatus
X#define MAP_EthernetIntStatus         EthernetIntStatus
N#endif
N#ifdef ROM_EthernetPHYWrite
N#define MAP_EthernetPHYWrite \
N        ROM_EthernetPHYWrite
X#define MAP_EthernetPHYWrite         ROM_EthernetPHYWrite
N#else
S#define MAP_EthernetPHYWrite \
S        EthernetPHYWrite
X#define MAP_EthernetPHYWrite         EthernetPHYWrite
N#endif
N#ifdef ROM_EthernetPHYRead
N#define MAP_EthernetPHYRead \
N        ROM_EthernetPHYRead
X#define MAP_EthernetPHYRead         ROM_EthernetPHYRead
N#else
S#define MAP_EthernetPHYRead \
S        EthernetPHYRead
X#define MAP_EthernetPHYRead         EthernetPHYRead
N#endif
N#ifdef ROM_EthernetPHYAddrSet
S#define MAP_EthernetPHYAddrSet \
S        ROM_EthernetPHYAddrSet
X#define MAP_EthernetPHYAddrSet         ROM_EthernetPHYAddrSet
N#else
N#define MAP_EthernetPHYAddrSet \
N        EthernetPHYAddrSet
X#define MAP_EthernetPHYAddrSet         EthernetPHYAddrSet
N#endif
N#ifdef ROM_EthernetPHYPowerOff
S#define MAP_EthernetPHYPowerOff \
S        ROM_EthernetPHYPowerOff
X#define MAP_EthernetPHYPowerOff         ROM_EthernetPHYPowerOff
N#else
N#define MAP_EthernetPHYPowerOff \
N        EthernetPHYPowerOff
X#define MAP_EthernetPHYPowerOff         EthernetPHYPowerOff
N#endif
N#ifdef ROM_EthernetPHYPowerOn
S#define MAP_EthernetPHYPowerOn \
S        ROM_EthernetPHYPowerOn
X#define MAP_EthernetPHYPowerOn         ROM_EthernetPHYPowerOn
N#else
N#define MAP_EthernetPHYPowerOn \
N        EthernetPHYPowerOn
X#define MAP_EthernetPHYPowerOn         EthernetPHYPowerOn
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Fan API.
N//
N//*****************************************************************************
N#ifdef ROM_FanIntClear
S#define MAP_FanIntClear \
S        ROM_FanIntClear
X#define MAP_FanIntClear         ROM_FanIntClear
N#else
N#define MAP_FanIntClear \
N        FanIntClear
X#define MAP_FanIntClear         FanIntClear
N#endif
N#ifdef ROM_FanChannelConfigAuto
S#define MAP_FanChannelConfigAuto \
S        ROM_FanChannelConfigAuto
X#define MAP_FanChannelConfigAuto         ROM_FanChannelConfigAuto
N#else
N#define MAP_FanChannelConfigAuto \
N        FanChannelConfigAuto
X#define MAP_FanChannelConfigAuto         FanChannelConfigAuto
N#endif
N#ifdef ROM_FanChannelConfigManual
S#define MAP_FanChannelConfigManual \
S        ROM_FanChannelConfigManual
X#define MAP_FanChannelConfigManual         ROM_FanChannelConfigManual
N#else
N#define MAP_FanChannelConfigManual \
N        FanChannelConfigManual
X#define MAP_FanChannelConfigManual         FanChannelConfigManual
N#endif
N#ifdef ROM_FanChannelDisable
S#define MAP_FanChannelDisable \
S        ROM_FanChannelDisable
X#define MAP_FanChannelDisable         ROM_FanChannelDisable
N#else
N#define MAP_FanChannelDisable \
N        FanChannelDisable
X#define MAP_FanChannelDisable         FanChannelDisable
N#endif
N#ifdef ROM_FanChannelDutyGet
S#define MAP_FanChannelDutyGet \
S        ROM_FanChannelDutyGet
X#define MAP_FanChannelDutyGet         ROM_FanChannelDutyGet
N#else
N#define MAP_FanChannelDutyGet \
N        FanChannelDutyGet
X#define MAP_FanChannelDutyGet         FanChannelDutyGet
N#endif
N#ifdef ROM_FanChannelDutySet
S#define MAP_FanChannelDutySet \
S        ROM_FanChannelDutySet
X#define MAP_FanChannelDutySet         ROM_FanChannelDutySet
N#else
N#define MAP_FanChannelDutySet \
N        FanChannelDutySet
X#define MAP_FanChannelDutySet         FanChannelDutySet
N#endif
N#ifdef ROM_FanChannelEnable
S#define MAP_FanChannelEnable \
S        ROM_FanChannelEnable
X#define MAP_FanChannelEnable         ROM_FanChannelEnable
N#else
N#define MAP_FanChannelEnable \
N        FanChannelEnable
X#define MAP_FanChannelEnable         FanChannelEnable
N#endif
N#ifdef ROM_FanChannelRPMGet
S#define MAP_FanChannelRPMGet \
S        ROM_FanChannelRPMGet
X#define MAP_FanChannelRPMGet         ROM_FanChannelRPMGet
N#else
N#define MAP_FanChannelRPMGet \
N        FanChannelRPMGet
X#define MAP_FanChannelRPMGet         FanChannelRPMGet
N#endif
N#ifdef ROM_FanChannelRPMSet
S#define MAP_FanChannelRPMSet \
S        ROM_FanChannelRPMSet
X#define MAP_FanChannelRPMSet         ROM_FanChannelRPMSet
N#else
N#define MAP_FanChannelRPMSet \
N        FanChannelRPMSet
X#define MAP_FanChannelRPMSet         FanChannelRPMSet
N#endif
N#ifdef ROM_FanChannelStatus
S#define MAP_FanChannelStatus \
S        ROM_FanChannelStatus
X#define MAP_FanChannelStatus         ROM_FanChannelStatus
N#else
N#define MAP_FanChannelStatus \
N        FanChannelStatus
X#define MAP_FanChannelStatus         FanChannelStatus
N#endif
N#ifdef ROM_FanChannelsGet
S#define MAP_FanChannelsGet \
S        ROM_FanChannelsGet
X#define MAP_FanChannelsGet         ROM_FanChannelsGet
N#else
N#define MAP_FanChannelsGet \
N        FanChannelsGet
X#define MAP_FanChannelsGet         FanChannelsGet
N#endif
N#ifdef ROM_FanIntDisable
S#define MAP_FanIntDisable \
S        ROM_FanIntDisable
X#define MAP_FanIntDisable         ROM_FanIntDisable
N#else
N#define MAP_FanIntDisable \
N        FanIntDisable
X#define MAP_FanIntDisable         FanIntDisable
N#endif
N#ifdef ROM_FanIntEnable
S#define MAP_FanIntEnable \
S        ROM_FanIntEnable
X#define MAP_FanIntEnable         ROM_FanIntEnable
N#else
N#define MAP_FanIntEnable \
N        FanIntEnable
X#define MAP_FanIntEnable         FanIntEnable
N#endif
N#ifdef ROM_FanIntStatus
S#define MAP_FanIntStatus \
S        ROM_FanIntStatus
X#define MAP_FanIntStatus         ROM_FanIntStatus
N#else
N#define MAP_FanIntStatus \
N        FanIntStatus
X#define MAP_FanIntStatus         FanIntStatus
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Flash API.
N//
N//*****************************************************************************
N#ifdef ROM_FlashProgram
N#define MAP_FlashProgram \
N        ROM_FlashProgram
X#define MAP_FlashProgram         ROM_FlashProgram
N#else
S#define MAP_FlashProgram \
S        FlashProgram
X#define MAP_FlashProgram         FlashProgram
N#endif
N#ifdef ROM_FlashUsecGet
N#define MAP_FlashUsecGet \
N        ROM_FlashUsecGet
X#define MAP_FlashUsecGet         ROM_FlashUsecGet
N#else
S#define MAP_FlashUsecGet \
S        FlashUsecGet
X#define MAP_FlashUsecGet         FlashUsecGet
N#endif
N#ifdef ROM_FlashUsecSet
N#define MAP_FlashUsecSet \
N        ROM_FlashUsecSet
X#define MAP_FlashUsecSet         ROM_FlashUsecSet
N#else
S#define MAP_FlashUsecSet \
S        FlashUsecSet
X#define MAP_FlashUsecSet         FlashUsecSet
N#endif
N#ifdef ROM_FlashErase
N#define MAP_FlashErase \
N        ROM_FlashErase
X#define MAP_FlashErase         ROM_FlashErase
N#else
S#define MAP_FlashErase \
S        FlashErase
X#define MAP_FlashErase         FlashErase
N#endif
N#ifdef ROM_FlashProtectGet
N#define MAP_FlashProtectGet \
N        ROM_FlashProtectGet
X#define MAP_FlashProtectGet         ROM_FlashProtectGet
N#else
S#define MAP_FlashProtectGet \
S        FlashProtectGet
X#define MAP_FlashProtectGet         FlashProtectGet
N#endif
N#ifdef ROM_FlashProtectSet
N#define MAP_FlashProtectSet \
N        ROM_FlashProtectSet
X#define MAP_FlashProtectSet         ROM_FlashProtectSet
N#else
S#define MAP_FlashProtectSet \
S        FlashProtectSet
X#define MAP_FlashProtectSet         FlashProtectSet
N#endif
N#ifdef ROM_FlashProtectSave
N#define MAP_FlashProtectSave \
N        ROM_FlashProtectSave
X#define MAP_FlashProtectSave         ROM_FlashProtectSave
N#else
S#define MAP_FlashProtectSave \
S        FlashProtectSave
X#define MAP_FlashProtectSave         FlashProtectSave
N#endif
N#ifdef ROM_FlashUserGet
N#define MAP_FlashUserGet \
N        ROM_FlashUserGet
X#define MAP_FlashUserGet         ROM_FlashUserGet
N#else
S#define MAP_FlashUserGet \
S        FlashUserGet
X#define MAP_FlashUserGet         FlashUserGet
N#endif
N#ifdef ROM_FlashUserSet
N#define MAP_FlashUserSet \
N        ROM_FlashUserSet
X#define MAP_FlashUserSet         ROM_FlashUserSet
N#else
S#define MAP_FlashUserSet \
S        FlashUserSet
X#define MAP_FlashUserSet         FlashUserSet
N#endif
N#ifdef ROM_FlashUserSave
N#define MAP_FlashUserSave \
N        ROM_FlashUserSave
X#define MAP_FlashUserSave         ROM_FlashUserSave
N#else
S#define MAP_FlashUserSave \
S        FlashUserSave
X#define MAP_FlashUserSave         FlashUserSave
N#endif
N#ifdef ROM_FlashIntEnable
N#define MAP_FlashIntEnable \
N        ROM_FlashIntEnable
X#define MAP_FlashIntEnable         ROM_FlashIntEnable
N#else
S#define MAP_FlashIntEnable \
S        FlashIntEnable
X#define MAP_FlashIntEnable         FlashIntEnable
N#endif
N#ifdef ROM_FlashIntDisable
N#define MAP_FlashIntDisable \
N        ROM_FlashIntDisable
X#define MAP_FlashIntDisable         ROM_FlashIntDisable
N#else
S#define MAP_FlashIntDisable \
S        FlashIntDisable
X#define MAP_FlashIntDisable         FlashIntDisable
N#endif
N#ifdef ROM_FlashIntStatus
N#define MAP_FlashIntStatus \
N        ROM_FlashIntStatus
X#define MAP_FlashIntStatus         ROM_FlashIntStatus
N#else
S#define MAP_FlashIntStatus \
S        FlashIntStatus
X#define MAP_FlashIntStatus         FlashIntStatus
N#endif
N#ifdef ROM_FlashIntClear
N#define MAP_FlashIntClear \
N        ROM_FlashIntClear
X#define MAP_FlashIntClear         ROM_FlashIntClear
N#else
S#define MAP_FlashIntClear \
S        FlashIntClear
X#define MAP_FlashIntClear         FlashIntClear
N#endif
N
N//*****************************************************************************
N//
N// Macros for the FPU API.
N//
N//*****************************************************************************
N#ifdef ROM_FPUEnable
S#define MAP_FPUEnable \
S        ROM_FPUEnable
X#define MAP_FPUEnable         ROM_FPUEnable
N#else
N#define MAP_FPUEnable \
N        FPUEnable
X#define MAP_FPUEnable         FPUEnable
N#endif
N#ifdef ROM_FPUDisable
S#define MAP_FPUDisable \
S        ROM_FPUDisable
X#define MAP_FPUDisable         ROM_FPUDisable
N#else
N#define MAP_FPUDisable \
N        FPUDisable
X#define MAP_FPUDisable         FPUDisable
N#endif
N#ifdef ROM_FPUFlushToZeroModeSet
S#define MAP_FPUFlushToZeroModeSet \
S        ROM_FPUFlushToZeroModeSet
X#define MAP_FPUFlushToZeroModeSet         ROM_FPUFlushToZeroModeSet
N#else
N#define MAP_FPUFlushToZeroModeSet \
N        FPUFlushToZeroModeSet
X#define MAP_FPUFlushToZeroModeSet         FPUFlushToZeroModeSet
N#endif
N#ifdef ROM_FPUHalfPrecisionModeSet
S#define MAP_FPUHalfPrecisionModeSet \
S        ROM_FPUHalfPrecisionModeSet
X#define MAP_FPUHalfPrecisionModeSet         ROM_FPUHalfPrecisionModeSet
N#else
N#define MAP_FPUHalfPrecisionModeSet \
N        FPUHalfPrecisionModeSet
X#define MAP_FPUHalfPrecisionModeSet         FPUHalfPrecisionModeSet
N#endif
N#ifdef ROM_FPULazyStackingEnable
S#define MAP_FPULazyStackingEnable \
S        ROM_FPULazyStackingEnable
X#define MAP_FPULazyStackingEnable         ROM_FPULazyStackingEnable
N#else
N#define MAP_FPULazyStackingEnable \
N        FPULazyStackingEnable
X#define MAP_FPULazyStackingEnable         FPULazyStackingEnable
N#endif
N#ifdef ROM_FPUNaNModeSet
S#define MAP_FPUNaNModeSet \
S        ROM_FPUNaNModeSet
X#define MAP_FPUNaNModeSet         ROM_FPUNaNModeSet
N#else
N#define MAP_FPUNaNModeSet \
N        FPUNaNModeSet
X#define MAP_FPUNaNModeSet         FPUNaNModeSet
N#endif
N#ifdef ROM_FPURoundingModeSet
S#define MAP_FPURoundingModeSet \
S        ROM_FPURoundingModeSet
X#define MAP_FPURoundingModeSet         ROM_FPURoundingModeSet
N#else
N#define MAP_FPURoundingModeSet \
N        FPURoundingModeSet
X#define MAP_FPURoundingModeSet         FPURoundingModeSet
N#endif
N#ifdef ROM_FPUStackingDisable
S#define MAP_FPUStackingDisable \
S        ROM_FPUStackingDisable
X#define MAP_FPUStackingDisable         ROM_FPUStackingDisable
N#else
N#define MAP_FPUStackingDisable \
N        FPUStackingDisable
X#define MAP_FPUStackingDisable         FPUStackingDisable
N#endif
N#ifdef ROM_FPUStackingEnable
S#define MAP_FPUStackingEnable \
S        ROM_FPUStackingEnable
X#define MAP_FPUStackingEnable         ROM_FPUStackingEnable
N#else
N#define MAP_FPUStackingEnable \
N        FPUStackingEnable
X#define MAP_FPUStackingEnable         FPUStackingEnable
N#endif
N
N//*****************************************************************************
N//
N// Macros for the GPIO API.
N//
N//*****************************************************************************
N#ifdef ROM_GPIOPinWrite
N#define MAP_GPIOPinWrite \
N        ROM_GPIOPinWrite
X#define MAP_GPIOPinWrite         ROM_GPIOPinWrite
N#else
S#define MAP_GPIOPinWrite \
S        GPIOPinWrite
X#define MAP_GPIOPinWrite         GPIOPinWrite
N#endif
N#ifdef ROM_GPIODirModeSet
N#define MAP_GPIODirModeSet \
N        ROM_GPIODirModeSet
X#define MAP_GPIODirModeSet         ROM_GPIODirModeSet
N#else
S#define MAP_GPIODirModeSet \
S        GPIODirModeSet
X#define MAP_GPIODirModeSet         GPIODirModeSet
N#endif
N#ifdef ROM_GPIODirModeGet
N#define MAP_GPIODirModeGet \
N        ROM_GPIODirModeGet
X#define MAP_GPIODirModeGet         ROM_GPIODirModeGet
N#else
S#define MAP_GPIODirModeGet \
S        GPIODirModeGet
X#define MAP_GPIODirModeGet         GPIODirModeGet
N#endif
N#ifdef ROM_GPIOIntTypeSet
N#define MAP_GPIOIntTypeSet \
N        ROM_GPIOIntTypeSet
X#define MAP_GPIOIntTypeSet         ROM_GPIOIntTypeSet
N#else
S#define MAP_GPIOIntTypeSet \
S        GPIOIntTypeSet
X#define MAP_GPIOIntTypeSet         GPIOIntTypeSet
N#endif
N#ifdef ROM_GPIOIntTypeGet
N#define MAP_GPIOIntTypeGet \
N        ROM_GPIOIntTypeGet
X#define MAP_GPIOIntTypeGet         ROM_GPIOIntTypeGet
N#else
S#define MAP_GPIOIntTypeGet \
S        GPIOIntTypeGet
X#define MAP_GPIOIntTypeGet         GPIOIntTypeGet
N#endif
N#ifdef ROM_GPIOPadConfigSet
N#define MAP_GPIOPadConfigSet \
N        ROM_GPIOPadConfigSet
X#define MAP_GPIOPadConfigSet         ROM_GPIOPadConfigSet
N#else
S#define MAP_GPIOPadConfigSet \
S        GPIOPadConfigSet
X#define MAP_GPIOPadConfigSet         GPIOPadConfigSet
N#endif
N#ifdef ROM_GPIOPadConfigGet
N#define MAP_GPIOPadConfigGet \
N        ROM_GPIOPadConfigGet
X#define MAP_GPIOPadConfigGet         ROM_GPIOPadConfigGet
N#else
S#define MAP_GPIOPadConfigGet \
S        GPIOPadConfigGet
X#define MAP_GPIOPadConfigGet         GPIOPadConfigGet
N#endif
N#ifdef ROM_GPIOPinIntEnable
N#define MAP_GPIOPinIntEnable \
N        ROM_GPIOPinIntEnable
X#define MAP_GPIOPinIntEnable         ROM_GPIOPinIntEnable
N#else
S#define MAP_GPIOPinIntEnable \
S        GPIOPinIntEnable
X#define MAP_GPIOPinIntEnable         GPIOPinIntEnable
N#endif
N#ifdef ROM_GPIOPinIntDisable
N#define MAP_GPIOPinIntDisable \
N        ROM_GPIOPinIntDisable
X#define MAP_GPIOPinIntDisable         ROM_GPIOPinIntDisable
N#else
S#define MAP_GPIOPinIntDisable \
S        GPIOPinIntDisable
X#define MAP_GPIOPinIntDisable         GPIOPinIntDisable
N#endif
N#ifdef ROM_GPIOPinIntStatus
N#define MAP_GPIOPinIntStatus \
N        ROM_GPIOPinIntStatus
X#define MAP_GPIOPinIntStatus         ROM_GPIOPinIntStatus
N#else
S#define MAP_GPIOPinIntStatus \
S        GPIOPinIntStatus
X#define MAP_GPIOPinIntStatus         GPIOPinIntStatus
N#endif
N#ifdef ROM_GPIOPinIntClear
N#define MAP_GPIOPinIntClear \
N        ROM_GPIOPinIntClear
X#define MAP_GPIOPinIntClear         ROM_GPIOPinIntClear
N#else
S#define MAP_GPIOPinIntClear \
S        GPIOPinIntClear
X#define MAP_GPIOPinIntClear         GPIOPinIntClear
N#endif
N#ifdef ROM_GPIOPinRead
N#define MAP_GPIOPinRead \
N        ROM_GPIOPinRead
X#define MAP_GPIOPinRead         ROM_GPIOPinRead
N#else
S#define MAP_GPIOPinRead \
S        GPIOPinRead
X#define MAP_GPIOPinRead         GPIOPinRead
N#endif
N#ifdef ROM_GPIOPinTypeCAN
N#define MAP_GPIOPinTypeCAN \
N        ROM_GPIOPinTypeCAN
X#define MAP_GPIOPinTypeCAN         ROM_GPIOPinTypeCAN
N#else
S#define MAP_GPIOPinTypeCAN \
S        GPIOPinTypeCAN
X#define MAP_GPIOPinTypeCAN         GPIOPinTypeCAN
N#endif
N#ifdef ROM_GPIOPinTypeComparator
N#define MAP_GPIOPinTypeComparator \
N        ROM_GPIOPinTypeComparator
X#define MAP_GPIOPinTypeComparator         ROM_GPIOPinTypeComparator
N#else
S#define MAP_GPIOPinTypeComparator \
S        GPIOPinTypeComparator
X#define MAP_GPIOPinTypeComparator         GPIOPinTypeComparator
N#endif
N#ifdef ROM_GPIOPinTypeGPIOInput
N#define MAP_GPIOPinTypeGPIOInput \
N        ROM_GPIOPinTypeGPIOInput
X#define MAP_GPIOPinTypeGPIOInput         ROM_GPIOPinTypeGPIOInput
N#else
S#define MAP_GPIOPinTypeGPIOInput \
S        GPIOPinTypeGPIOInput
X#define MAP_GPIOPinTypeGPIOInput         GPIOPinTypeGPIOInput
N#endif
N#ifdef ROM_GPIOPinTypeGPIOOutput
N#define MAP_GPIOPinTypeGPIOOutput \
N        ROM_GPIOPinTypeGPIOOutput
X#define MAP_GPIOPinTypeGPIOOutput         ROM_GPIOPinTypeGPIOOutput
N#else
S#define MAP_GPIOPinTypeGPIOOutput \
S        GPIOPinTypeGPIOOutput
X#define MAP_GPIOPinTypeGPIOOutput         GPIOPinTypeGPIOOutput
N#endif
N#ifdef ROM_GPIOPinTypeI2C
N#define MAP_GPIOPinTypeI2C \
N        ROM_GPIOPinTypeI2C
X#define MAP_GPIOPinTypeI2C         ROM_GPIOPinTypeI2C
N#else
S#define MAP_GPIOPinTypeI2C \
S        GPIOPinTypeI2C
X#define MAP_GPIOPinTypeI2C         GPIOPinTypeI2C
N#endif
N#ifdef ROM_GPIOPinTypePWM
N#define MAP_GPIOPinTypePWM \
N        ROM_GPIOPinTypePWM
X#define MAP_GPIOPinTypePWM         ROM_GPIOPinTypePWM
N#else
S#define MAP_GPIOPinTypePWM \
S        GPIOPinTypePWM
X#define MAP_GPIOPinTypePWM         GPIOPinTypePWM
N#endif
N#ifdef ROM_GPIOPinTypeQEI
N#define MAP_GPIOPinTypeQEI \
N        ROM_GPIOPinTypeQEI
X#define MAP_GPIOPinTypeQEI         ROM_GPIOPinTypeQEI
N#else
S#define MAP_GPIOPinTypeQEI \
S        GPIOPinTypeQEI
X#define MAP_GPIOPinTypeQEI         GPIOPinTypeQEI
N#endif
N#ifdef ROM_GPIOPinTypeSSI
N#define MAP_GPIOPinTypeSSI \
N        ROM_GPIOPinTypeSSI
X#define MAP_GPIOPinTypeSSI         ROM_GPIOPinTypeSSI
N#else
S#define MAP_GPIOPinTypeSSI \
S        GPIOPinTypeSSI
X#define MAP_GPIOPinTypeSSI         GPIOPinTypeSSI
N#endif
N#ifdef ROM_GPIOPinTypeTimer
N#define MAP_GPIOPinTypeTimer \
N        ROM_GPIOPinTypeTimer
X#define MAP_GPIOPinTypeTimer         ROM_GPIOPinTypeTimer
N#else
S#define MAP_GPIOPinTypeTimer \
S        GPIOPinTypeTimer
X#define MAP_GPIOPinTypeTimer         GPIOPinTypeTimer
N#endif
N#ifdef ROM_GPIOPinTypeUART
N#define MAP_GPIOPinTypeUART \
N        ROM_GPIOPinTypeUART
X#define MAP_GPIOPinTypeUART         ROM_GPIOPinTypeUART
N#else
S#define MAP_GPIOPinTypeUART \
S        GPIOPinTypeUART
X#define MAP_GPIOPinTypeUART         GPIOPinTypeUART
N#endif
N#ifdef ROM_GPIOPinTypeGPIOOutputOD
N#define MAP_GPIOPinTypeGPIOOutputOD \
N        ROM_GPIOPinTypeGPIOOutputOD
X#define MAP_GPIOPinTypeGPIOOutputOD         ROM_GPIOPinTypeGPIOOutputOD
N#else
S#define MAP_GPIOPinTypeGPIOOutputOD \
S        GPIOPinTypeGPIOOutputOD
X#define MAP_GPIOPinTypeGPIOOutputOD         GPIOPinTypeGPIOOutputOD
N#endif
N#ifdef ROM_GPIOPinTypeADC
N#define MAP_GPIOPinTypeADC \
N        ROM_GPIOPinTypeADC
X#define MAP_GPIOPinTypeADC         ROM_GPIOPinTypeADC
N#else
S#define MAP_GPIOPinTypeADC \
S        GPIOPinTypeADC
X#define MAP_GPIOPinTypeADC         GPIOPinTypeADC
N#endif
N#ifdef ROM_GPIOPinTypeUSBDigital
N#define MAP_GPIOPinTypeUSBDigital \
N        ROM_GPIOPinTypeUSBDigital
X#define MAP_GPIOPinTypeUSBDigital         ROM_GPIOPinTypeUSBDigital
N#else
S#define MAP_GPIOPinTypeUSBDigital \
S        GPIOPinTypeUSBDigital
X#define MAP_GPIOPinTypeUSBDigital         GPIOPinTypeUSBDigital
N#endif
N#ifdef ROM_GPIOPinTypeI2S
S#define MAP_GPIOPinTypeI2S \
S        ROM_GPIOPinTypeI2S
X#define MAP_GPIOPinTypeI2S         ROM_GPIOPinTypeI2S
N#else
N#define MAP_GPIOPinTypeI2S \
N        GPIOPinTypeI2S
X#define MAP_GPIOPinTypeI2S         GPIOPinTypeI2S
N#endif
N#ifdef ROM_GPIOPinConfigure
S#define MAP_GPIOPinConfigure \
S        ROM_GPIOPinConfigure
X#define MAP_GPIOPinConfigure         ROM_GPIOPinConfigure
N#else
N#define MAP_GPIOPinConfigure \
N        GPIOPinConfigure
X#define MAP_GPIOPinConfigure         GPIOPinConfigure
N#endif
N#ifdef ROM_GPIOPinTypeEthernetLED
S#define MAP_GPIOPinTypeEthernetLED \
S        ROM_GPIOPinTypeEthernetLED
X#define MAP_GPIOPinTypeEthernetLED         ROM_GPIOPinTypeEthernetLED
N#else
N#define MAP_GPIOPinTypeEthernetLED \
N        GPIOPinTypeEthernetLED
X#define MAP_GPIOPinTypeEthernetLED         GPIOPinTypeEthernetLED
N#endif
N#ifdef ROM_GPIOPinTypeUSBAnalog
S#define MAP_GPIOPinTypeUSBAnalog \
S        ROM_GPIOPinTypeUSBAnalog
X#define MAP_GPIOPinTypeUSBAnalog         ROM_GPIOPinTypeUSBAnalog
N#else
N#define MAP_GPIOPinTypeUSBAnalog \
N        GPIOPinTypeUSBAnalog
X#define MAP_GPIOPinTypeUSBAnalog         GPIOPinTypeUSBAnalog
N#endif
N#ifdef ROM_GPIOPinTypeEPI
S#define MAP_GPIOPinTypeEPI \
S        ROM_GPIOPinTypeEPI
X#define MAP_GPIOPinTypeEPI         ROM_GPIOPinTypeEPI
N#else
N#define MAP_GPIOPinTypeEPI \
N        GPIOPinTypeEPI
X#define MAP_GPIOPinTypeEPI         GPIOPinTypeEPI
N#endif
N#ifdef ROM_GPIOPinTypeEthernetMII
S#define MAP_GPIOPinTypeEthernetMII \
S        ROM_GPIOPinTypeEthernetMII
X#define MAP_GPIOPinTypeEthernetMII         ROM_GPIOPinTypeEthernetMII
N#else
N#define MAP_GPIOPinTypeEthernetMII \
N        GPIOPinTypeEthernetMII
X#define MAP_GPIOPinTypeEthernetMII         GPIOPinTypeEthernetMII
N#endif
N#ifdef ROM_GPIODMATriggerEnable
S#define MAP_GPIODMATriggerEnable \
S        ROM_GPIODMATriggerEnable
X#define MAP_GPIODMATriggerEnable         ROM_GPIODMATriggerEnable
N#else
N#define MAP_GPIODMATriggerEnable \
N        GPIODMATriggerEnable
X#define MAP_GPIODMATriggerEnable         GPIODMATriggerEnable
N#endif
N#ifdef ROM_GPIODMATriggerDisable
S#define MAP_GPIODMATriggerDisable \
S        ROM_GPIODMATriggerDisable
X#define MAP_GPIODMATriggerDisable         ROM_GPIODMATriggerDisable
N#else
N#define MAP_GPIODMATriggerDisable \
N        GPIODMATriggerDisable
X#define MAP_GPIODMATriggerDisable         GPIODMATriggerDisable
N#endif
N#ifdef ROM_GPIOADCTriggerEnable
S#define MAP_GPIOADCTriggerEnable \
S        ROM_GPIOADCTriggerEnable
X#define MAP_GPIOADCTriggerEnable         ROM_GPIOADCTriggerEnable
N#else
N#define MAP_GPIOADCTriggerEnable \
N        GPIOADCTriggerEnable
X#define MAP_GPIOADCTriggerEnable         GPIOADCTriggerEnable
N#endif
N#ifdef ROM_GPIOADCTriggerDisable
S#define MAP_GPIOADCTriggerDisable \
S        ROM_GPIOADCTriggerDisable
X#define MAP_GPIOADCTriggerDisable         ROM_GPIOADCTriggerDisable
N#else
N#define MAP_GPIOADCTriggerDisable \
N        GPIOADCTriggerDisable
X#define MAP_GPIOADCTriggerDisable         GPIOADCTriggerDisable
N#endif
N#ifdef ROM_GPIOPinTypeFan
S#define MAP_GPIOPinTypeFan \
S        ROM_GPIOPinTypeFan
X#define MAP_GPIOPinTypeFan         ROM_GPIOPinTypeFan
N#else
N#define MAP_GPIOPinTypeFan \
N        GPIOPinTypeFan
X#define MAP_GPIOPinTypeFan         GPIOPinTypeFan
N#endif
N#ifdef ROM_GPIOPinTypeLPC
S#define MAP_GPIOPinTypeLPC \
S        ROM_GPIOPinTypeLPC
X#define MAP_GPIOPinTypeLPC         ROM_GPIOPinTypeLPC
N#else
N#define MAP_GPIOPinTypeLPC \
N        GPIOPinTypeLPC
X#define MAP_GPIOPinTypeLPC         GPIOPinTypeLPC
N#endif
N#ifdef ROM_GPIOPinTypePECIRx
S#define MAP_GPIOPinTypePECIRx \
S        ROM_GPIOPinTypePECIRx
X#define MAP_GPIOPinTypePECIRx         ROM_GPIOPinTypePECIRx
N#else
N#define MAP_GPIOPinTypePECIRx \
N        GPIOPinTypePECIRx
X#define MAP_GPIOPinTypePECIRx         GPIOPinTypePECIRx
N#endif
N#ifdef ROM_GPIOPinTypePECITx
S#define MAP_GPIOPinTypePECITx \
S        ROM_GPIOPinTypePECITx
X#define MAP_GPIOPinTypePECITx         ROM_GPIOPinTypePECITx
N#else
N#define MAP_GPIOPinTypePECITx \
N        GPIOPinTypePECITx
X#define MAP_GPIOPinTypePECITx         GPIOPinTypePECITx
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Hibernate API.
N//
N//*****************************************************************************
N#ifdef ROM_HibernateIntClear
N#define MAP_HibernateIntClear \
N        ROM_HibernateIntClear
X#define MAP_HibernateIntClear         ROM_HibernateIntClear
N#else
S#define MAP_HibernateIntClear \
S        HibernateIntClear
X#define MAP_HibernateIntClear         HibernateIntClear
N#endif
N#ifdef ROM_HibernateEnableExpClk
N#define MAP_HibernateEnableExpClk \
N        ROM_HibernateEnableExpClk
X#define MAP_HibernateEnableExpClk         ROM_HibernateEnableExpClk
N#else
S#define MAP_HibernateEnableExpClk \
S        HibernateEnableExpClk
X#define MAP_HibernateEnableExpClk         HibernateEnableExpClk
N#endif
N#ifdef ROM_HibernateDisable
N#define MAP_HibernateDisable \
N        ROM_HibernateDisable
X#define MAP_HibernateDisable         ROM_HibernateDisable
N#else
S#define MAP_HibernateDisable \
S        HibernateDisable
X#define MAP_HibernateDisable         HibernateDisable
N#endif
N#ifdef ROM_HibernateClockSelect
N#define MAP_HibernateClockSelect \
N        ROM_HibernateClockSelect
X#define MAP_HibernateClockSelect         ROM_HibernateClockSelect
N#else
S#define MAP_HibernateClockSelect \
S        HibernateClockSelect
X#define MAP_HibernateClockSelect         HibernateClockSelect
N#endif
N#ifdef ROM_HibernateRTCEnable
N#define MAP_HibernateRTCEnable \
N        ROM_HibernateRTCEnable
X#define MAP_HibernateRTCEnable         ROM_HibernateRTCEnable
N#else
S#define MAP_HibernateRTCEnable \
S        HibernateRTCEnable
X#define MAP_HibernateRTCEnable         HibernateRTCEnable
N#endif
N#ifdef ROM_HibernateRTCDisable
N#define MAP_HibernateRTCDisable \
N        ROM_HibernateRTCDisable
X#define MAP_HibernateRTCDisable         ROM_HibernateRTCDisable
N#else
S#define MAP_HibernateRTCDisable \
S        HibernateRTCDisable
X#define MAP_HibernateRTCDisable         HibernateRTCDisable
N#endif
N#ifdef ROM_HibernateWakeSet
N#define MAP_HibernateWakeSet \
N        ROM_HibernateWakeSet
X#define MAP_HibernateWakeSet         ROM_HibernateWakeSet
N#else
S#define MAP_HibernateWakeSet \
S        HibernateWakeSet
X#define MAP_HibernateWakeSet         HibernateWakeSet
N#endif
N#ifdef ROM_HibernateWakeGet
N#define MAP_HibernateWakeGet \
N        ROM_HibernateWakeGet
X#define MAP_HibernateWakeGet         ROM_HibernateWakeGet
N#else
S#define MAP_HibernateWakeGet \
S        HibernateWakeGet
X#define MAP_HibernateWakeGet         HibernateWakeGet
N#endif
N#ifdef ROM_HibernateLowBatSet
N#define MAP_HibernateLowBatSet \
N        ROM_HibernateLowBatSet
X#define MAP_HibernateLowBatSet         ROM_HibernateLowBatSet
N#else
S#define MAP_HibernateLowBatSet \
S        HibernateLowBatSet
X#define MAP_HibernateLowBatSet         HibernateLowBatSet
N#endif
N#ifdef ROM_HibernateLowBatGet
N#define MAP_HibernateLowBatGet \
N        ROM_HibernateLowBatGet
X#define MAP_HibernateLowBatGet         ROM_HibernateLowBatGet
N#else
S#define MAP_HibernateLowBatGet \
S        HibernateLowBatGet
X#define MAP_HibernateLowBatGet         HibernateLowBatGet
N#endif
N#ifdef ROM_HibernateRTCSet
N#define MAP_HibernateRTCSet \
N        ROM_HibernateRTCSet
X#define MAP_HibernateRTCSet         ROM_HibernateRTCSet
N#else
S#define MAP_HibernateRTCSet \
S        HibernateRTCSet
X#define MAP_HibernateRTCSet         HibernateRTCSet
N#endif
N#ifdef ROM_HibernateRTCGet
N#define MAP_HibernateRTCGet \
N        ROM_HibernateRTCGet
X#define MAP_HibernateRTCGet         ROM_HibernateRTCGet
N#else
S#define MAP_HibernateRTCGet \
S        HibernateRTCGet
X#define MAP_HibernateRTCGet         HibernateRTCGet
N#endif
N#ifdef ROM_HibernateRTCMatch0Set
N#define MAP_HibernateRTCMatch0Set \
N        ROM_HibernateRTCMatch0Set
X#define MAP_HibernateRTCMatch0Set         ROM_HibernateRTCMatch0Set
N#else
S#define MAP_HibernateRTCMatch0Set \
S        HibernateRTCMatch0Set
X#define MAP_HibernateRTCMatch0Set         HibernateRTCMatch0Set
N#endif
N#ifdef ROM_HibernateRTCMatch0Get
N#define MAP_HibernateRTCMatch0Get \
N        ROM_HibernateRTCMatch0Get
X#define MAP_HibernateRTCMatch0Get         ROM_HibernateRTCMatch0Get
N#else
S#define MAP_HibernateRTCMatch0Get \
S        HibernateRTCMatch0Get
X#define MAP_HibernateRTCMatch0Get         HibernateRTCMatch0Get
N#endif
N#ifdef ROM_HibernateRTCMatch1Set
N#define MAP_HibernateRTCMatch1Set \
N        ROM_HibernateRTCMatch1Set
X#define MAP_HibernateRTCMatch1Set         ROM_HibernateRTCMatch1Set
N#else
S#define MAP_HibernateRTCMatch1Set \
S        HibernateRTCMatch1Set
X#define MAP_HibernateRTCMatch1Set         HibernateRTCMatch1Set
N#endif
N#ifdef ROM_HibernateRTCMatch1Get
N#define MAP_HibernateRTCMatch1Get \
N        ROM_HibernateRTCMatch1Get
X#define MAP_HibernateRTCMatch1Get         ROM_HibernateRTCMatch1Get
N#else
S#define MAP_HibernateRTCMatch1Get \
S        HibernateRTCMatch1Get
X#define MAP_HibernateRTCMatch1Get         HibernateRTCMatch1Get
N#endif
N#ifdef ROM_HibernateRTCTrimSet
N#define MAP_HibernateRTCTrimSet \
N        ROM_HibernateRTCTrimSet
X#define MAP_HibernateRTCTrimSet         ROM_HibernateRTCTrimSet
N#else
S#define MAP_HibernateRTCTrimSet \
S        HibernateRTCTrimSet
X#define MAP_HibernateRTCTrimSet         HibernateRTCTrimSet
N#endif
N#ifdef ROM_HibernateRTCTrimGet
N#define MAP_HibernateRTCTrimGet \
N        ROM_HibernateRTCTrimGet
X#define MAP_HibernateRTCTrimGet         ROM_HibernateRTCTrimGet
N#else
S#define MAP_HibernateRTCTrimGet \
S        HibernateRTCTrimGet
X#define MAP_HibernateRTCTrimGet         HibernateRTCTrimGet
N#endif
N#ifdef ROM_HibernateDataSet
N#define MAP_HibernateDataSet \
N        ROM_HibernateDataSet
X#define MAP_HibernateDataSet         ROM_HibernateDataSet
N#else
S#define MAP_HibernateDataSet \
S        HibernateDataSet
X#define MAP_HibernateDataSet         HibernateDataSet
N#endif
N#ifdef ROM_HibernateDataGet
N#define MAP_HibernateDataGet \
N        ROM_HibernateDataGet
X#define MAP_HibernateDataGet         ROM_HibernateDataGet
N#else
S#define MAP_HibernateDataGet \
S        HibernateDataGet
X#define MAP_HibernateDataGet         HibernateDataGet
N#endif
N#ifdef ROM_HibernateRequest
N#define MAP_HibernateRequest \
N        ROM_HibernateRequest
X#define MAP_HibernateRequest         ROM_HibernateRequest
N#else
S#define MAP_HibernateRequest \
S        HibernateRequest
X#define MAP_HibernateRequest         HibernateRequest
N#endif
N#ifdef ROM_HibernateIntEnable
N#define MAP_HibernateIntEnable \
N        ROM_HibernateIntEnable
X#define MAP_HibernateIntEnable         ROM_HibernateIntEnable
N#else
S#define MAP_HibernateIntEnable \
S        HibernateIntEnable
X#define MAP_HibernateIntEnable         HibernateIntEnable
N#endif
N#ifdef ROM_HibernateIntDisable
N#define MAP_HibernateIntDisable \
N        ROM_HibernateIntDisable
X#define MAP_HibernateIntDisable         ROM_HibernateIntDisable
N#else
S#define MAP_HibernateIntDisable \
S        HibernateIntDisable
X#define MAP_HibernateIntDisable         HibernateIntDisable
N#endif
N#ifdef ROM_HibernateIntStatus
N#define MAP_HibernateIntStatus \
N        ROM_HibernateIntStatus
X#define MAP_HibernateIntStatus         ROM_HibernateIntStatus
N#else
S#define MAP_HibernateIntStatus \
S        HibernateIntStatus
X#define MAP_HibernateIntStatus         HibernateIntStatus
N#endif
N#ifdef ROM_HibernateIsActive
N#define MAP_HibernateIsActive \
N        ROM_HibernateIsActive
X#define MAP_HibernateIsActive         ROM_HibernateIsActive
N#else
S#define MAP_HibernateIsActive \
S        HibernateIsActive
X#define MAP_HibernateIsActive         HibernateIsActive
N#endif
N#ifdef ROM_HibernateRTCSSMatch0Set
S#define MAP_HibernateRTCSSMatch0Set \
S        ROM_HibernateRTCSSMatch0Set
X#define MAP_HibernateRTCSSMatch0Set         ROM_HibernateRTCSSMatch0Set
N#else
N#define MAP_HibernateRTCSSMatch0Set \
N        HibernateRTCSSMatch0Set
X#define MAP_HibernateRTCSSMatch0Set         HibernateRTCSSMatch0Set
N#endif
N#ifdef ROM_HibernateRTCSSMatch0Get
S#define MAP_HibernateRTCSSMatch0Get \
S        ROM_HibernateRTCSSMatch0Get
X#define MAP_HibernateRTCSSMatch0Get         ROM_HibernateRTCSSMatch0Get
N#else
N#define MAP_HibernateRTCSSMatch0Get \
N        HibernateRTCSSMatch0Get
X#define MAP_HibernateRTCSSMatch0Get         HibernateRTCSSMatch0Get
N#endif
N#ifdef ROM_HibernateRTCSSGet
S#define MAP_HibernateRTCSSGet \
S        ROM_HibernateRTCSSGet
X#define MAP_HibernateRTCSSGet         ROM_HibernateRTCSSGet
N#else
N#define MAP_HibernateRTCSSGet \
N        HibernateRTCSSGet
X#define MAP_HibernateRTCSSGet         HibernateRTCSSGet
N#endif
N#ifdef ROM_HibernateClockConfig
S#define MAP_HibernateClockConfig \
S        ROM_HibernateClockConfig
X#define MAP_HibernateClockConfig         ROM_HibernateClockConfig
N#else
N#define MAP_HibernateClockConfig \
N        HibernateClockConfig
X#define MAP_HibernateClockConfig         HibernateClockConfig
N#endif
N#ifdef ROM_HibernateBatCheckStart
S#define MAP_HibernateBatCheckStart \
S        ROM_HibernateBatCheckStart
X#define MAP_HibernateBatCheckStart         ROM_HibernateBatCheckStart
N#else
N#define MAP_HibernateBatCheckStart \
N        HibernateBatCheckStart
X#define MAP_HibernateBatCheckStart         HibernateBatCheckStart
N#endif
N#ifdef ROM_HibernateBatCheckDone
S#define MAP_HibernateBatCheckDone \
S        ROM_HibernateBatCheckDone
X#define MAP_HibernateBatCheckDone         ROM_HibernateBatCheckDone
N#else
N#define MAP_HibernateBatCheckDone \
N        HibernateBatCheckDone
X#define MAP_HibernateBatCheckDone         HibernateBatCheckDone
N#endif
N
N//*****************************************************************************
N//
N// Macros for the I2C API.
N//
N//*****************************************************************************
N#ifdef ROM_I2CMasterDataPut
N#define MAP_I2CMasterDataPut \
N        ROM_I2CMasterDataPut
X#define MAP_I2CMasterDataPut         ROM_I2CMasterDataPut
N#else
S#define MAP_I2CMasterDataPut \
S        I2CMasterDataPut
X#define MAP_I2CMasterDataPut         I2CMasterDataPut
N#endif
N#ifdef ROM_I2CMasterInitExpClk
N#define MAP_I2CMasterInitExpClk \
N        ROM_I2CMasterInitExpClk
X#define MAP_I2CMasterInitExpClk         ROM_I2CMasterInitExpClk
N#else
S#define MAP_I2CMasterInitExpClk \
S        I2CMasterInitExpClk
X#define MAP_I2CMasterInitExpClk         I2CMasterInitExpClk
N#endif
N#ifdef ROM_I2CSlaveInit
N#define MAP_I2CSlaveInit \
N        ROM_I2CSlaveInit
X#define MAP_I2CSlaveInit         ROM_I2CSlaveInit
N#else
S#define MAP_I2CSlaveInit \
S        I2CSlaveInit
X#define MAP_I2CSlaveInit         I2CSlaveInit
N#endif
N#ifdef ROM_I2CMasterEnable
N#define MAP_I2CMasterEnable \
N        ROM_I2CMasterEnable
X#define MAP_I2CMasterEnable         ROM_I2CMasterEnable
N#else
S#define MAP_I2CMasterEnable \
S        I2CMasterEnable
X#define MAP_I2CMasterEnable         I2CMasterEnable
N#endif
N#ifdef ROM_I2CSlaveEnable
N#define MAP_I2CSlaveEnable \
N        ROM_I2CSlaveEnable
X#define MAP_I2CSlaveEnable         ROM_I2CSlaveEnable
N#else
S#define MAP_I2CSlaveEnable \
S        I2CSlaveEnable
X#define MAP_I2CSlaveEnable         I2CSlaveEnable
N#endif
N#ifdef ROM_I2CMasterDisable
N#define MAP_I2CMasterDisable \
N        ROM_I2CMasterDisable
X#define MAP_I2CMasterDisable         ROM_I2CMasterDisable
N#else
S#define MAP_I2CMasterDisable \
S        I2CMasterDisable
X#define MAP_I2CMasterDisable         I2CMasterDisable
N#endif
N#ifdef ROM_I2CSlaveDisable
N#define MAP_I2CSlaveDisable \
N        ROM_I2CSlaveDisable
X#define MAP_I2CSlaveDisable         ROM_I2CSlaveDisable
N#else
S#define MAP_I2CSlaveDisable \
S        I2CSlaveDisable
X#define MAP_I2CSlaveDisable         I2CSlaveDisable
N#endif
N#ifdef ROM_I2CMasterIntEnable
N#define MAP_I2CMasterIntEnable \
N        ROM_I2CMasterIntEnable
X#define MAP_I2CMasterIntEnable         ROM_I2CMasterIntEnable
N#else
S#define MAP_I2CMasterIntEnable \
S        I2CMasterIntEnable
X#define MAP_I2CMasterIntEnable         I2CMasterIntEnable
N#endif
N#ifdef ROM_I2CSlaveIntEnable
N#define MAP_I2CSlaveIntEnable \
N        ROM_I2CSlaveIntEnable
X#define MAP_I2CSlaveIntEnable         ROM_I2CSlaveIntEnable
N#else
S#define MAP_I2CSlaveIntEnable \
S        I2CSlaveIntEnable
X#define MAP_I2CSlaveIntEnable         I2CSlaveIntEnable
N#endif
N#ifdef ROM_I2CMasterIntDisable
N#define MAP_I2CMasterIntDisable \
N        ROM_I2CMasterIntDisable
X#define MAP_I2CMasterIntDisable         ROM_I2CMasterIntDisable
N#else
S#define MAP_I2CMasterIntDisable \
S        I2CMasterIntDisable
X#define MAP_I2CMasterIntDisable         I2CMasterIntDisable
N#endif
N#ifdef ROM_I2CSlaveIntDisable
N#define MAP_I2CSlaveIntDisable \
N        ROM_I2CSlaveIntDisable
X#define MAP_I2CSlaveIntDisable         ROM_I2CSlaveIntDisable
N#else
S#define MAP_I2CSlaveIntDisable \
S        I2CSlaveIntDisable
X#define MAP_I2CSlaveIntDisable         I2CSlaveIntDisable
N#endif
N#ifdef ROM_I2CMasterIntStatus
N#define MAP_I2CMasterIntStatus \
N        ROM_I2CMasterIntStatus
X#define MAP_I2CMasterIntStatus         ROM_I2CMasterIntStatus
N#else
S#define MAP_I2CMasterIntStatus \
S        I2CMasterIntStatus
X#define MAP_I2CMasterIntStatus         I2CMasterIntStatus
N#endif
N#ifdef ROM_I2CSlaveIntStatus
N#define MAP_I2CSlaveIntStatus \
N        ROM_I2CSlaveIntStatus
X#define MAP_I2CSlaveIntStatus         ROM_I2CSlaveIntStatus
N#else
S#define MAP_I2CSlaveIntStatus \
S        I2CSlaveIntStatus
X#define MAP_I2CSlaveIntStatus         I2CSlaveIntStatus
N#endif
N#ifdef ROM_I2CMasterIntClear
N#define MAP_I2CMasterIntClear \
N        ROM_I2CMasterIntClear
X#define MAP_I2CMasterIntClear         ROM_I2CMasterIntClear
N#else
S#define MAP_I2CMasterIntClear \
S        I2CMasterIntClear
X#define MAP_I2CMasterIntClear         I2CMasterIntClear
N#endif
N#ifdef ROM_I2CSlaveIntClear
N#define MAP_I2CSlaveIntClear \
N        ROM_I2CSlaveIntClear
X#define MAP_I2CSlaveIntClear         ROM_I2CSlaveIntClear
N#else
S#define MAP_I2CSlaveIntClear \
S        I2CSlaveIntClear
X#define MAP_I2CSlaveIntClear         I2CSlaveIntClear
N#endif
N#ifdef ROM_I2CMasterSlaveAddrSet
N#define MAP_I2CMasterSlaveAddrSet \
N        ROM_I2CMasterSlaveAddrSet
X#define MAP_I2CMasterSlaveAddrSet         ROM_I2CMasterSlaveAddrSet
N#else
S#define MAP_I2CMasterSlaveAddrSet \
S        I2CMasterSlaveAddrSet
X#define MAP_I2CMasterSlaveAddrSet         I2CMasterSlaveAddrSet
N#endif
N#ifdef ROM_I2CMasterBusy
N#define MAP_I2CMasterBusy \
N        ROM_I2CMasterBusy
X#define MAP_I2CMasterBusy         ROM_I2CMasterBusy
N#else
S#define MAP_I2CMasterBusy \
S        I2CMasterBusy
X#define MAP_I2CMasterBusy         I2CMasterBusy
N#endif
N#ifdef ROM_I2CMasterBusBusy
N#define MAP_I2CMasterBusBusy \
N        ROM_I2CMasterBusBusy
X#define MAP_I2CMasterBusBusy         ROM_I2CMasterBusBusy
N#else
S#define MAP_I2CMasterBusBusy \
S        I2CMasterBusBusy
X#define MAP_I2CMasterBusBusy         I2CMasterBusBusy
N#endif
N#ifdef ROM_I2CMasterControl
N#define MAP_I2CMasterControl \
N        ROM_I2CMasterControl
X#define MAP_I2CMasterControl         ROM_I2CMasterControl
N#else
S#define MAP_I2CMasterControl \
S        I2CMasterControl
X#define MAP_I2CMasterControl         I2CMasterControl
N#endif
N#ifdef ROM_I2CMasterErr
N#define MAP_I2CMasterErr \
N        ROM_I2CMasterErr
X#define MAP_I2CMasterErr         ROM_I2CMasterErr
N#else
S#define MAP_I2CMasterErr \
S        I2CMasterErr
X#define MAP_I2CMasterErr         I2CMasterErr
N#endif
N#ifdef ROM_I2CMasterDataGet
N#define MAP_I2CMasterDataGet \
N        ROM_I2CMasterDataGet
X#define MAP_I2CMasterDataGet         ROM_I2CMasterDataGet
N#else
S#define MAP_I2CMasterDataGet \
S        I2CMasterDataGet
X#define MAP_I2CMasterDataGet         I2CMasterDataGet
N#endif
N#ifdef ROM_I2CSlaveStatus
N#define MAP_I2CSlaveStatus \
N        ROM_I2CSlaveStatus
X#define MAP_I2CSlaveStatus         ROM_I2CSlaveStatus
N#else
S#define MAP_I2CSlaveStatus \
S        I2CSlaveStatus
X#define MAP_I2CSlaveStatus         I2CSlaveStatus
N#endif
N#ifdef ROM_I2CSlaveDataPut
N#define MAP_I2CSlaveDataPut \
N        ROM_I2CSlaveDataPut
X#define MAP_I2CSlaveDataPut         ROM_I2CSlaveDataPut
N#else
S#define MAP_I2CSlaveDataPut \
S        I2CSlaveDataPut
X#define MAP_I2CSlaveDataPut         I2CSlaveDataPut
N#endif
N#ifdef ROM_I2CSlaveDataGet
N#define MAP_I2CSlaveDataGet \
N        ROM_I2CSlaveDataGet
X#define MAP_I2CSlaveDataGet         ROM_I2CSlaveDataGet
N#else
S#define MAP_I2CSlaveDataGet \
S        I2CSlaveDataGet
X#define MAP_I2CSlaveDataGet         I2CSlaveDataGet
N#endif
N#ifdef ROM_I2CSlaveIntEnableEx
S#define MAP_I2CSlaveIntEnableEx \
S        ROM_I2CSlaveIntEnableEx
X#define MAP_I2CSlaveIntEnableEx         ROM_I2CSlaveIntEnableEx
N#else
N#define MAP_I2CSlaveIntEnableEx \
N        I2CSlaveIntEnableEx
X#define MAP_I2CSlaveIntEnableEx         I2CSlaveIntEnableEx
N#endif
N#ifdef ROM_I2CSlaveIntDisableEx
S#define MAP_I2CSlaveIntDisableEx \
S        ROM_I2CSlaveIntDisableEx
X#define MAP_I2CSlaveIntDisableEx         ROM_I2CSlaveIntDisableEx
N#else
N#define MAP_I2CSlaveIntDisableEx \
N        I2CSlaveIntDisableEx
X#define MAP_I2CSlaveIntDisableEx         I2CSlaveIntDisableEx
N#endif
N#ifdef ROM_I2CSlaveIntStatusEx
S#define MAP_I2CSlaveIntStatusEx \
S        ROM_I2CSlaveIntStatusEx
X#define MAP_I2CSlaveIntStatusEx         ROM_I2CSlaveIntStatusEx
N#else
N#define MAP_I2CSlaveIntStatusEx \
N        I2CSlaveIntStatusEx
X#define MAP_I2CSlaveIntStatusEx         I2CSlaveIntStatusEx
N#endif
N#ifdef ROM_I2CSlaveIntClearEx
S#define MAP_I2CSlaveIntClearEx \
S        ROM_I2CSlaveIntClearEx
X#define MAP_I2CSlaveIntClearEx         ROM_I2CSlaveIntClearEx
N#else
N#define MAP_I2CSlaveIntClearEx \
N        I2CSlaveIntClearEx
X#define MAP_I2CSlaveIntClearEx         I2CSlaveIntClearEx
N#endif
N#ifdef ROM_I2CMasterIntEnableEx
S#define MAP_I2CMasterIntEnableEx \
S        ROM_I2CMasterIntEnableEx
X#define MAP_I2CMasterIntEnableEx         ROM_I2CMasterIntEnableEx
N#else
N#define MAP_I2CMasterIntEnableEx \
N        I2CMasterIntEnableEx
X#define MAP_I2CMasterIntEnableEx         I2CMasterIntEnableEx
N#endif
N#ifdef ROM_I2CMasterIntDisableEx
S#define MAP_I2CMasterIntDisableEx \
S        ROM_I2CMasterIntDisableEx
X#define MAP_I2CMasterIntDisableEx         ROM_I2CMasterIntDisableEx
N#else
N#define MAP_I2CMasterIntDisableEx \
N        I2CMasterIntDisableEx
X#define MAP_I2CMasterIntDisableEx         I2CMasterIntDisableEx
N#endif
N#ifdef ROM_I2CMasterIntStatusEx
S#define MAP_I2CMasterIntStatusEx \
S        ROM_I2CMasterIntStatusEx
X#define MAP_I2CMasterIntStatusEx         ROM_I2CMasterIntStatusEx
N#else
N#define MAP_I2CMasterIntStatusEx \
N        I2CMasterIntStatusEx
X#define MAP_I2CMasterIntStatusEx         I2CMasterIntStatusEx
N#endif
N#ifdef ROM_I2CMasterIntClearEx
S#define MAP_I2CMasterIntClearEx \
S        ROM_I2CMasterIntClearEx
X#define MAP_I2CMasterIntClearEx         ROM_I2CMasterIntClearEx
N#else
N#define MAP_I2CMasterIntClearEx \
N        I2CMasterIntClearEx
X#define MAP_I2CMasterIntClearEx         I2CMasterIntClearEx
N#endif
N#ifdef ROM_I2CMasterTimeoutSet
S#define MAP_I2CMasterTimeoutSet \
S        ROM_I2CMasterTimeoutSet
X#define MAP_I2CMasterTimeoutSet         ROM_I2CMasterTimeoutSet
N#else
N#define MAP_I2CMasterTimeoutSet \
N        I2CMasterTimeoutSet
X#define MAP_I2CMasterTimeoutSet         I2CMasterTimeoutSet
N#endif
N#ifdef ROM_I2CSlaveACKOverride
S#define MAP_I2CSlaveACKOverride \
S        ROM_I2CSlaveACKOverride
X#define MAP_I2CSlaveACKOverride         ROM_I2CSlaveACKOverride
N#else
N#define MAP_I2CSlaveACKOverride \
N        I2CSlaveACKOverride
X#define MAP_I2CSlaveACKOverride         I2CSlaveACKOverride
N#endif
N#ifdef ROM_I2CSlaveACKValueSet
S#define MAP_I2CSlaveACKValueSet \
S        ROM_I2CSlaveACKValueSet
X#define MAP_I2CSlaveACKValueSet         ROM_I2CSlaveACKValueSet
N#else
N#define MAP_I2CSlaveACKValueSet \
N        I2CSlaveACKValueSet
X#define MAP_I2CSlaveACKValueSet         I2CSlaveACKValueSet
N#endif
N#ifdef ROM_I2CSlaveAddressSet
S#define MAP_I2CSlaveAddressSet \
S        ROM_I2CSlaveAddressSet
X#define MAP_I2CSlaveAddressSet         ROM_I2CSlaveAddressSet
N#else
N#define MAP_I2CSlaveAddressSet \
N        I2CSlaveAddressSet
X#define MAP_I2CSlaveAddressSet         I2CSlaveAddressSet
N#endif
N#ifdef ROM_I2CMasterLineStateGet
S#define MAP_I2CMasterLineStateGet \
S        ROM_I2CMasterLineStateGet
X#define MAP_I2CMasterLineStateGet         ROM_I2CMasterLineStateGet
N#else
N#define MAP_I2CMasterLineStateGet \
N        I2CMasterLineStateGet
X#define MAP_I2CMasterLineStateGet         I2CMasterLineStateGet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the I2S API.
N//
N//*****************************************************************************
N#ifdef ROM_I2SIntStatus
S#define MAP_I2SIntStatus \
S        ROM_I2SIntStatus
X#define MAP_I2SIntStatus         ROM_I2SIntStatus
N#else
N#define MAP_I2SIntStatus \
N        I2SIntStatus
X#define MAP_I2SIntStatus         I2SIntStatus
N#endif
N#ifdef ROM_I2STxEnable
S#define MAP_I2STxEnable \
S        ROM_I2STxEnable
X#define MAP_I2STxEnable         ROM_I2STxEnable
N#else
N#define MAP_I2STxEnable \
N        I2STxEnable
X#define MAP_I2STxEnable         I2STxEnable
N#endif
N#ifdef ROM_I2STxDisable
S#define MAP_I2STxDisable \
S        ROM_I2STxDisable
X#define MAP_I2STxDisable         ROM_I2STxDisable
N#else
N#define MAP_I2STxDisable \
N        I2STxDisable
X#define MAP_I2STxDisable         I2STxDisable
N#endif
N#ifdef ROM_I2STxDataPut
S#define MAP_I2STxDataPut \
S        ROM_I2STxDataPut
X#define MAP_I2STxDataPut         ROM_I2STxDataPut
N#else
N#define MAP_I2STxDataPut \
N        I2STxDataPut
X#define MAP_I2STxDataPut         I2STxDataPut
N#endif
N#ifdef ROM_I2STxDataPutNonBlocking
S#define MAP_I2STxDataPutNonBlocking \
S        ROM_I2STxDataPutNonBlocking
X#define MAP_I2STxDataPutNonBlocking         ROM_I2STxDataPutNonBlocking
N#else
N#define MAP_I2STxDataPutNonBlocking \
N        I2STxDataPutNonBlocking
X#define MAP_I2STxDataPutNonBlocking         I2STxDataPutNonBlocking
N#endif
N#ifdef ROM_I2STxConfigSet
S#define MAP_I2STxConfigSet \
S        ROM_I2STxConfigSet
X#define MAP_I2STxConfigSet         ROM_I2STxConfigSet
N#else
N#define MAP_I2STxConfigSet \
N        I2STxConfigSet
X#define MAP_I2STxConfigSet         I2STxConfigSet
N#endif
N#ifdef ROM_I2STxFIFOLimitSet
S#define MAP_I2STxFIFOLimitSet \
S        ROM_I2STxFIFOLimitSet
X#define MAP_I2STxFIFOLimitSet         ROM_I2STxFIFOLimitSet
N#else
N#define MAP_I2STxFIFOLimitSet \
N        I2STxFIFOLimitSet
X#define MAP_I2STxFIFOLimitSet         I2STxFIFOLimitSet
N#endif
N#ifdef ROM_I2STxFIFOLimitGet
S#define MAP_I2STxFIFOLimitGet \
S        ROM_I2STxFIFOLimitGet
X#define MAP_I2STxFIFOLimitGet         ROM_I2STxFIFOLimitGet
N#else
N#define MAP_I2STxFIFOLimitGet \
N        I2STxFIFOLimitGet
X#define MAP_I2STxFIFOLimitGet         I2STxFIFOLimitGet
N#endif
N#ifdef ROM_I2STxFIFOLevelGet
S#define MAP_I2STxFIFOLevelGet \
S        ROM_I2STxFIFOLevelGet
X#define MAP_I2STxFIFOLevelGet         ROM_I2STxFIFOLevelGet
N#else
N#define MAP_I2STxFIFOLevelGet \
N        I2STxFIFOLevelGet
X#define MAP_I2STxFIFOLevelGet         I2STxFIFOLevelGet
N#endif
N#ifdef ROM_I2SRxEnable
S#define MAP_I2SRxEnable \
S        ROM_I2SRxEnable
X#define MAP_I2SRxEnable         ROM_I2SRxEnable
N#else
N#define MAP_I2SRxEnable \
N        I2SRxEnable
X#define MAP_I2SRxEnable         I2SRxEnable
N#endif
N#ifdef ROM_I2SRxDisable
S#define MAP_I2SRxDisable \
S        ROM_I2SRxDisable
X#define MAP_I2SRxDisable         ROM_I2SRxDisable
N#else
N#define MAP_I2SRxDisable \
N        I2SRxDisable
X#define MAP_I2SRxDisable         I2SRxDisable
N#endif
N#ifdef ROM_I2SRxDataGet
S#define MAP_I2SRxDataGet \
S        ROM_I2SRxDataGet
X#define MAP_I2SRxDataGet         ROM_I2SRxDataGet
N#else
N#define MAP_I2SRxDataGet \
N        I2SRxDataGet
X#define MAP_I2SRxDataGet         I2SRxDataGet
N#endif
N#ifdef ROM_I2SRxDataGetNonBlocking
S#define MAP_I2SRxDataGetNonBlocking \
S        ROM_I2SRxDataGetNonBlocking
X#define MAP_I2SRxDataGetNonBlocking         ROM_I2SRxDataGetNonBlocking
N#else
N#define MAP_I2SRxDataGetNonBlocking \
N        I2SRxDataGetNonBlocking
X#define MAP_I2SRxDataGetNonBlocking         I2SRxDataGetNonBlocking
N#endif
N#ifdef ROM_I2SRxConfigSet
S#define MAP_I2SRxConfigSet \
S        ROM_I2SRxConfigSet
X#define MAP_I2SRxConfigSet         ROM_I2SRxConfigSet
N#else
N#define MAP_I2SRxConfigSet \
N        I2SRxConfigSet
X#define MAP_I2SRxConfigSet         I2SRxConfigSet
N#endif
N#ifdef ROM_I2SRxFIFOLimitSet
S#define MAP_I2SRxFIFOLimitSet \
S        ROM_I2SRxFIFOLimitSet
X#define MAP_I2SRxFIFOLimitSet         ROM_I2SRxFIFOLimitSet
N#else
N#define MAP_I2SRxFIFOLimitSet \
N        I2SRxFIFOLimitSet
X#define MAP_I2SRxFIFOLimitSet         I2SRxFIFOLimitSet
N#endif
N#ifdef ROM_I2SRxFIFOLimitGet
S#define MAP_I2SRxFIFOLimitGet \
S        ROM_I2SRxFIFOLimitGet
X#define MAP_I2SRxFIFOLimitGet         ROM_I2SRxFIFOLimitGet
N#else
N#define MAP_I2SRxFIFOLimitGet \
N        I2SRxFIFOLimitGet
X#define MAP_I2SRxFIFOLimitGet         I2SRxFIFOLimitGet
N#endif
N#ifdef ROM_I2SRxFIFOLevelGet
S#define MAP_I2SRxFIFOLevelGet \
S        ROM_I2SRxFIFOLevelGet
X#define MAP_I2SRxFIFOLevelGet         ROM_I2SRxFIFOLevelGet
N#else
N#define MAP_I2SRxFIFOLevelGet \
N        I2SRxFIFOLevelGet
X#define MAP_I2SRxFIFOLevelGet         I2SRxFIFOLevelGet
N#endif
N#ifdef ROM_I2STxRxEnable
S#define MAP_I2STxRxEnable \
S        ROM_I2STxRxEnable
X#define MAP_I2STxRxEnable         ROM_I2STxRxEnable
N#else
N#define MAP_I2STxRxEnable \
N        I2STxRxEnable
X#define MAP_I2STxRxEnable         I2STxRxEnable
N#endif
N#ifdef ROM_I2STxRxDisable
S#define MAP_I2STxRxDisable \
S        ROM_I2STxRxDisable
X#define MAP_I2STxRxDisable         ROM_I2STxRxDisable
N#else
N#define MAP_I2STxRxDisable \
N        I2STxRxDisable
X#define MAP_I2STxRxDisable         I2STxRxDisable
N#endif
N#ifdef ROM_I2STxRxConfigSet
S#define MAP_I2STxRxConfigSet \
S        ROM_I2STxRxConfigSet
X#define MAP_I2STxRxConfigSet         ROM_I2STxRxConfigSet
N#else
N#define MAP_I2STxRxConfigSet \
N        I2STxRxConfigSet
X#define MAP_I2STxRxConfigSet         I2STxRxConfigSet
N#endif
N#ifdef ROM_I2SMasterClockSelect
S#define MAP_I2SMasterClockSelect \
S        ROM_I2SMasterClockSelect
X#define MAP_I2SMasterClockSelect         ROM_I2SMasterClockSelect
N#else
N#define MAP_I2SMasterClockSelect \
N        I2SMasterClockSelect
X#define MAP_I2SMasterClockSelect         I2SMasterClockSelect
N#endif
N#ifdef ROM_I2SIntEnable
S#define MAP_I2SIntEnable \
S        ROM_I2SIntEnable
X#define MAP_I2SIntEnable         ROM_I2SIntEnable
N#else
N#define MAP_I2SIntEnable \
N        I2SIntEnable
X#define MAP_I2SIntEnable         I2SIntEnable
N#endif
N#ifdef ROM_I2SIntDisable
S#define MAP_I2SIntDisable \
S        ROM_I2SIntDisable
X#define MAP_I2SIntDisable         ROM_I2SIntDisable
N#else
N#define MAP_I2SIntDisable \
N        I2SIntDisable
X#define MAP_I2SIntDisable         I2SIntDisable
N#endif
N#ifdef ROM_I2SIntClear
S#define MAP_I2SIntClear \
S        ROM_I2SIntClear
X#define MAP_I2SIntClear         ROM_I2SIntClear
N#else
N#define MAP_I2SIntClear \
N        I2SIntClear
X#define MAP_I2SIntClear         I2SIntClear
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Interrupt API.
N//
N//*****************************************************************************
N#ifdef ROM_IntEnable
N#define MAP_IntEnable \
N        ROM_IntEnable
X#define MAP_IntEnable         ROM_IntEnable
N#else
S#define MAP_IntEnable \
S        IntEnable
X#define MAP_IntEnable         IntEnable
N#endif
N#ifdef ROM_IntMasterEnable
N#define MAP_IntMasterEnable \
N        ROM_IntMasterEnable
X#define MAP_IntMasterEnable         ROM_IntMasterEnable
N#else
S#define MAP_IntMasterEnable \
S        IntMasterEnable
X#define MAP_IntMasterEnable         IntMasterEnable
N#endif
N#ifdef ROM_IntMasterDisable
N#define MAP_IntMasterDisable \
N        ROM_IntMasterDisable
X#define MAP_IntMasterDisable         ROM_IntMasterDisable
N#else
S#define MAP_IntMasterDisable \
S        IntMasterDisable
X#define MAP_IntMasterDisable         IntMasterDisable
N#endif
N#ifdef ROM_IntDisable
N#define MAP_IntDisable \
N        ROM_IntDisable
X#define MAP_IntDisable         ROM_IntDisable
N#else
S#define MAP_IntDisable \
S        IntDisable
X#define MAP_IntDisable         IntDisable
N#endif
N#ifdef ROM_IntPriorityGroupingSet
N#define MAP_IntPriorityGroupingSet \
N        ROM_IntPriorityGroupingSet
X#define MAP_IntPriorityGroupingSet         ROM_IntPriorityGroupingSet
N#else
S#define MAP_IntPriorityGroupingSet \
S        IntPriorityGroupingSet
X#define MAP_IntPriorityGroupingSet         IntPriorityGroupingSet
N#endif
N#ifdef ROM_IntPriorityGroupingGet
N#define MAP_IntPriorityGroupingGet \
N        ROM_IntPriorityGroupingGet
X#define MAP_IntPriorityGroupingGet         ROM_IntPriorityGroupingGet
N#else
S#define MAP_IntPriorityGroupingGet \
S        IntPriorityGroupingGet
X#define MAP_IntPriorityGroupingGet         IntPriorityGroupingGet
N#endif
N#ifdef ROM_IntPrioritySet
N#define MAP_IntPrioritySet \
N        ROM_IntPrioritySet
X#define MAP_IntPrioritySet         ROM_IntPrioritySet
N#else
S#define MAP_IntPrioritySet \
S        IntPrioritySet
X#define MAP_IntPrioritySet         IntPrioritySet
N#endif
N#ifdef ROM_IntPriorityGet
N#define MAP_IntPriorityGet \
N        ROM_IntPriorityGet
X#define MAP_IntPriorityGet         ROM_IntPriorityGet
N#else
S#define MAP_IntPriorityGet \
S        IntPriorityGet
X#define MAP_IntPriorityGet         IntPriorityGet
N#endif
N#ifdef ROM_IntPendSet
S#define MAP_IntPendSet \
S        ROM_IntPendSet
X#define MAP_IntPendSet         ROM_IntPendSet
N#else
N#define MAP_IntPendSet \
N        IntPendSet
X#define MAP_IntPendSet         IntPendSet
N#endif
N#ifdef ROM_IntPendClear
S#define MAP_IntPendClear \
S        ROM_IntPendClear
X#define MAP_IntPendClear         ROM_IntPendClear
N#else
N#define MAP_IntPendClear \
N        IntPendClear
X#define MAP_IntPendClear         IntPendClear
N#endif
N#ifdef ROM_IntPriorityMaskSet
S#define MAP_IntPriorityMaskSet \
S        ROM_IntPriorityMaskSet
X#define MAP_IntPriorityMaskSet         ROM_IntPriorityMaskSet
N#else
N#define MAP_IntPriorityMaskSet \
N        IntPriorityMaskSet
X#define MAP_IntPriorityMaskSet         IntPriorityMaskSet
N#endif
N#ifdef ROM_IntPriorityMaskGet
S#define MAP_IntPriorityMaskGet \
S        ROM_IntPriorityMaskGet
X#define MAP_IntPriorityMaskGet         ROM_IntPriorityMaskGet
N#else
N#define MAP_IntPriorityMaskGet \
N        IntPriorityMaskGet
X#define MAP_IntPriorityMaskGet         IntPriorityMaskGet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the LPC API.
N//
N//*****************************************************************************
N#ifdef ROM_LPCIntClear
S#define MAP_LPCIntClear \
S        ROM_LPCIntClear
X#define MAP_LPCIntClear         ROM_LPCIntClear
N#else
N#define MAP_LPCIntClear \
N        LPCIntClear
X#define MAP_LPCIntClear         LPCIntClear
N#endif
N#ifdef ROM_LPCByteRead
S#define MAP_LPCByteRead \
S        ROM_LPCByteRead
X#define MAP_LPCByteRead         ROM_LPCByteRead
N#else
N#define MAP_LPCByteRead \
N        LPCByteRead
X#define MAP_LPCByteRead         LPCByteRead
N#endif
N#ifdef ROM_LPCByteWrite
S#define MAP_LPCByteWrite \
S        ROM_LPCByteWrite
X#define MAP_LPCByteWrite         ROM_LPCByteWrite
N#else
N#define MAP_LPCByteWrite \
N        LPCByteWrite
X#define MAP_LPCByteWrite         LPCByteWrite
N#endif
N#ifdef ROM_LPCChannelConfigCOMxSet
S#define MAP_LPCChannelConfigCOMxSet \
S        ROM_LPCChannelConfigCOMxSet
X#define MAP_LPCChannelConfigCOMxSet         ROM_LPCChannelConfigCOMxSet
N#else
N#define MAP_LPCChannelConfigCOMxSet \
N        LPCChannelConfigCOMxSet
X#define MAP_LPCChannelConfigCOMxSet         LPCChannelConfigCOMxSet
N#endif
N#ifdef ROM_LPCChannelConfigGet
S#define MAP_LPCChannelConfigGet \
S        ROM_LPCChannelConfigGet
X#define MAP_LPCChannelConfigGet         ROM_LPCChannelConfigGet
N#else
N#define MAP_LPCChannelConfigGet \
N        LPCChannelConfigGet
X#define MAP_LPCChannelConfigGet         LPCChannelConfigGet
N#endif
N#ifdef ROM_LPCChannelConfigEPSet
S#define MAP_LPCChannelConfigEPSet \
S        ROM_LPCChannelConfigEPSet
X#define MAP_LPCChannelConfigEPSet         ROM_LPCChannelConfigEPSet
N#else
N#define MAP_LPCChannelConfigEPSet \
N        LPCChannelConfigEPSet
X#define MAP_LPCChannelConfigEPSet         LPCChannelConfigEPSet
N#endif
N#ifdef ROM_LPCChannelConfigMBSet
S#define MAP_LPCChannelConfigMBSet \
S        ROM_LPCChannelConfigMBSet
X#define MAP_LPCChannelConfigMBSet         ROM_LPCChannelConfigMBSet
N#else
N#define MAP_LPCChannelConfigMBSet \
N        LPCChannelConfigMBSet
X#define MAP_LPCChannelConfigMBSet         LPCChannelConfigMBSet
N#endif
N#ifdef ROM_LPCChannelDMAConfigGet
S#define MAP_LPCChannelDMAConfigGet \
S        ROM_LPCChannelDMAConfigGet
X#define MAP_LPCChannelDMAConfigGet         ROM_LPCChannelDMAConfigGet
N#else
N#define MAP_LPCChannelDMAConfigGet \
N        LPCChannelDMAConfigGet
X#define MAP_LPCChannelDMAConfigGet         LPCChannelDMAConfigGet
N#endif
N#ifdef ROM_LPCChannelDMAConfigSet
S#define MAP_LPCChannelDMAConfigSet \
S        ROM_LPCChannelDMAConfigSet
X#define MAP_LPCChannelDMAConfigSet         ROM_LPCChannelDMAConfigSet
N#else
N#define MAP_LPCChannelDMAConfigSet \
N        LPCChannelDMAConfigSet
X#define MAP_LPCChannelDMAConfigSet         LPCChannelDMAConfigSet
N#endif
N#ifdef ROM_LPCChannelDisable
S#define MAP_LPCChannelDisable \
S        ROM_LPCChannelDisable
X#define MAP_LPCChannelDisable         ROM_LPCChannelDisable
N#else
N#define MAP_LPCChannelDisable \
N        LPCChannelDisable
X#define MAP_LPCChannelDisable         LPCChannelDisable
N#endif
N#ifdef ROM_LPCChannelEnable
S#define MAP_LPCChannelEnable \
S        ROM_LPCChannelEnable
X#define MAP_LPCChannelEnable         ROM_LPCChannelEnable
N#else
N#define MAP_LPCChannelEnable \
N        LPCChannelEnable
X#define MAP_LPCChannelEnable         LPCChannelEnable
N#endif
N#ifdef ROM_LPCChannelStatusClear
S#define MAP_LPCChannelStatusClear \
S        ROM_LPCChannelStatusClear
X#define MAP_LPCChannelStatusClear         ROM_LPCChannelStatusClear
N#else
N#define MAP_LPCChannelStatusClear \
N        LPCChannelStatusClear
X#define MAP_LPCChannelStatusClear         LPCChannelStatusClear
N#endif
N#ifdef ROM_LPCChannelStatusGet
S#define MAP_LPCChannelStatusGet \
S        ROM_LPCChannelStatusGet
X#define MAP_LPCChannelStatusGet         ROM_LPCChannelStatusGet
N#else
N#define MAP_LPCChannelStatusGet \
N        LPCChannelStatusGet
X#define MAP_LPCChannelStatusGet         LPCChannelStatusGet
N#endif
N#ifdef ROM_LPCChannelStatusSet
S#define MAP_LPCChannelStatusSet \
S        ROM_LPCChannelStatusSet
X#define MAP_LPCChannelStatusSet         ROM_LPCChannelStatusSet
N#else
N#define MAP_LPCChannelStatusSet \
N        LPCChannelStatusSet
X#define MAP_LPCChannelStatusSet         LPCChannelStatusSet
N#endif
N#ifdef ROM_LPCCOMxIntClear
S#define MAP_LPCCOMxIntClear \
S        ROM_LPCCOMxIntClear
X#define MAP_LPCCOMxIntClear         ROM_LPCCOMxIntClear
N#else
N#define MAP_LPCCOMxIntClear \
N        LPCCOMxIntClear
X#define MAP_LPCCOMxIntClear         LPCCOMxIntClear
N#endif
N#ifdef ROM_LPCCOMxIntDisable
S#define MAP_LPCCOMxIntDisable \
S        ROM_LPCCOMxIntDisable
X#define MAP_LPCCOMxIntDisable         ROM_LPCCOMxIntDisable
N#else
N#define MAP_LPCCOMxIntDisable \
N        LPCCOMxIntDisable
X#define MAP_LPCCOMxIntDisable         LPCCOMxIntDisable
N#endif
N#ifdef ROM_LPCCOMxIntEnable
S#define MAP_LPCCOMxIntEnable \
S        ROM_LPCCOMxIntEnable
X#define MAP_LPCCOMxIntEnable         ROM_LPCCOMxIntEnable
N#else
N#define MAP_LPCCOMxIntEnable \
N        LPCCOMxIntEnable
X#define MAP_LPCCOMxIntEnable         LPCCOMxIntEnable
N#endif
N#ifdef ROM_LPCCOMxIntStatus
S#define MAP_LPCCOMxIntStatus \
S        ROM_LPCCOMxIntStatus
X#define MAP_LPCCOMxIntStatus         ROM_LPCCOMxIntStatus
N#else
N#define MAP_LPCCOMxIntStatus \
N        LPCCOMxIntStatus
X#define MAP_LPCCOMxIntStatus         LPCCOMxIntStatus
N#endif
N#ifdef ROM_LPCConfigGet
S#define MAP_LPCConfigGet \
S        ROM_LPCConfigGet
X#define MAP_LPCConfigGet         ROM_LPCConfigGet
N#else
N#define MAP_LPCConfigGet \
N        LPCConfigGet
X#define MAP_LPCConfigGet         LPCConfigGet
N#endif
N#ifdef ROM_LPCConfigSet
S#define MAP_LPCConfigSet \
S        ROM_LPCConfigSet
X#define MAP_LPCConfigSet         ROM_LPCConfigSet
N#else
N#define MAP_LPCConfigSet \
N        LPCConfigSet
X#define MAP_LPCConfigSet         LPCConfigSet
N#endif
N#ifdef ROM_LPCHalfWordRead
S#define MAP_LPCHalfWordRead \
S        ROM_LPCHalfWordRead
X#define MAP_LPCHalfWordRead         ROM_LPCHalfWordRead
N#else
N#define MAP_LPCHalfWordRead \
N        LPCHalfWordRead
X#define MAP_LPCHalfWordRead         LPCHalfWordRead
N#endif
N#ifdef ROM_LPCHalfWordWrite
S#define MAP_LPCHalfWordWrite \
S        ROM_LPCHalfWordWrite
X#define MAP_LPCHalfWordWrite         ROM_LPCHalfWordWrite
N#else
N#define MAP_LPCHalfWordWrite \
N        LPCHalfWordWrite
X#define MAP_LPCHalfWordWrite         LPCHalfWordWrite
N#endif
N#ifdef ROM_LPCIRQClear
S#define MAP_LPCIRQClear \
S        ROM_LPCIRQClear
X#define MAP_LPCIRQClear         ROM_LPCIRQClear
N#else
N#define MAP_LPCIRQClear \
N        LPCIRQClear
X#define MAP_LPCIRQClear         LPCIRQClear
N#endif
N#ifdef ROM_LPCIRQConfig
S#define MAP_LPCIRQConfig \
S        ROM_LPCIRQConfig
X#define MAP_LPCIRQConfig         ROM_LPCIRQConfig
N#else
N#define MAP_LPCIRQConfig \
N        LPCIRQConfig
X#define MAP_LPCIRQConfig         LPCIRQConfig
N#endif
N#ifdef ROM_LPCIRQGet
S#define MAP_LPCIRQGet \
S        ROM_LPCIRQGet
X#define MAP_LPCIRQGet         ROM_LPCIRQGet
N#else
N#define MAP_LPCIRQGet \
N        LPCIRQGet
X#define MAP_LPCIRQGet         LPCIRQGet
N#endif
N#ifdef ROM_LPCIRQSend
S#define MAP_LPCIRQSend \
S        ROM_LPCIRQSend
X#define MAP_LPCIRQSend         ROM_LPCIRQSend
N#else
N#define MAP_LPCIRQSend \
N        LPCIRQSend
X#define MAP_LPCIRQSend         LPCIRQSend
N#endif
N#ifdef ROM_LPCIRQSet
S#define MAP_LPCIRQSet \
S        ROM_LPCIRQSet
X#define MAP_LPCIRQSet         ROM_LPCIRQSet
N#else
N#define MAP_LPCIRQSet \
N        LPCIRQSet
X#define MAP_LPCIRQSet         LPCIRQSet
N#endif
N#ifdef ROM_LPCIntDisable
S#define MAP_LPCIntDisable \
S        ROM_LPCIntDisable
X#define MAP_LPCIntDisable         ROM_LPCIntDisable
N#else
N#define MAP_LPCIntDisable \
N        LPCIntDisable
X#define MAP_LPCIntDisable         LPCIntDisable
N#endif
N#ifdef ROM_LPCIntEnable
S#define MAP_LPCIntEnable \
S        ROM_LPCIntEnable
X#define MAP_LPCIntEnable         ROM_LPCIntEnable
N#else
N#define MAP_LPCIntEnable \
N        LPCIntEnable
X#define MAP_LPCIntEnable         LPCIntEnable
N#endif
N#ifdef ROM_LPCIntStatus
S#define MAP_LPCIntStatus \
S        ROM_LPCIntStatus
X#define MAP_LPCIntStatus         ROM_LPCIntStatus
N#else
N#define MAP_LPCIntStatus \
N        LPCIntStatus
X#define MAP_LPCIntStatus         LPCIntStatus
N#endif
N#ifdef ROM_LPCSCIAssert
S#define MAP_LPCSCIAssert \
S        ROM_LPCSCIAssert
X#define MAP_LPCSCIAssert         ROM_LPCSCIAssert
N#else
N#define MAP_LPCSCIAssert \
N        LPCSCIAssert
X#define MAP_LPCSCIAssert         LPCSCIAssert
N#endif
N#ifdef ROM_LPCStatusGet
S#define MAP_LPCStatusGet \
S        ROM_LPCStatusGet
X#define MAP_LPCStatusGet         ROM_LPCStatusGet
N#else
N#define MAP_LPCStatusGet \
N        LPCStatusGet
X#define MAP_LPCStatusGet         LPCStatusGet
N#endif
N#ifdef ROM_LPCWordRead
S#define MAP_LPCWordRead \
S        ROM_LPCWordRead
X#define MAP_LPCWordRead         ROM_LPCWordRead
N#else
N#define MAP_LPCWordRead \
N        LPCWordRead
X#define MAP_LPCWordRead         LPCWordRead
N#endif
N#ifdef ROM_LPCWordWrite
S#define MAP_LPCWordWrite \
S        ROM_LPCWordWrite
X#define MAP_LPCWordWrite         ROM_LPCWordWrite
N#else
N#define MAP_LPCWordWrite \
N        LPCWordWrite
X#define MAP_LPCWordWrite         LPCWordWrite
N#endif
N#ifdef ROM_LPCChannelPoolAddressGet
S#define MAP_LPCChannelPoolAddressGet \
S        ROM_LPCChannelPoolAddressGet
X#define MAP_LPCChannelPoolAddressGet         ROM_LPCChannelPoolAddressGet
N#else
N#define MAP_LPCChannelPoolAddressGet \
N        LPCChannelPoolAddressGet
X#define MAP_LPCChannelPoolAddressGet         LPCChannelPoolAddressGet
N#endif
N#ifdef ROM_LPCStatusBlockAddressGet
S#define MAP_LPCStatusBlockAddressGet \
S        ROM_LPCStatusBlockAddressGet
X#define MAP_LPCStatusBlockAddressGet         ROM_LPCStatusBlockAddressGet
N#else
N#define MAP_LPCStatusBlockAddressGet \
N        LPCStatusBlockAddressGet
X#define MAP_LPCStatusBlockAddressGet         LPCStatusBlockAddressGet
N#endif
N#ifdef ROM_LPCStatusBlockAddressSet
S#define MAP_LPCStatusBlockAddressSet \
S        ROM_LPCStatusBlockAddressSet
X#define MAP_LPCStatusBlockAddressSet         ROM_LPCStatusBlockAddressSet
N#else
N#define MAP_LPCStatusBlockAddressSet \
N        LPCStatusBlockAddressSet
X#define MAP_LPCStatusBlockAddressSet         LPCStatusBlockAddressSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the MPU API.
N//
N//*****************************************************************************
N#ifdef ROM_MPUEnable
N#define MAP_MPUEnable \
N        ROM_MPUEnable
X#define MAP_MPUEnable         ROM_MPUEnable
N#else
S#define MAP_MPUEnable \
S        MPUEnable
X#define MAP_MPUEnable         MPUEnable
N#endif
N#ifdef ROM_MPUDisable
N#define MAP_MPUDisable \
N        ROM_MPUDisable
X#define MAP_MPUDisable         ROM_MPUDisable
N#else
S#define MAP_MPUDisable \
S        MPUDisable
X#define MAP_MPUDisable         MPUDisable
N#endif
N#ifdef ROM_MPURegionCountGet
N#define MAP_MPURegionCountGet \
N        ROM_MPURegionCountGet
X#define MAP_MPURegionCountGet         ROM_MPURegionCountGet
N#else
S#define MAP_MPURegionCountGet \
S        MPURegionCountGet
X#define MAP_MPURegionCountGet         MPURegionCountGet
N#endif
N#ifdef ROM_MPURegionEnable
N#define MAP_MPURegionEnable \
N        ROM_MPURegionEnable
X#define MAP_MPURegionEnable         ROM_MPURegionEnable
N#else
S#define MAP_MPURegionEnable \
S        MPURegionEnable
X#define MAP_MPURegionEnable         MPURegionEnable
N#endif
N#ifdef ROM_MPURegionDisable
N#define MAP_MPURegionDisable \
N        ROM_MPURegionDisable
X#define MAP_MPURegionDisable         ROM_MPURegionDisable
N#else
S#define MAP_MPURegionDisable \
S        MPURegionDisable
X#define MAP_MPURegionDisable         MPURegionDisable
N#endif
N#ifdef ROM_MPURegionSet
N#define MAP_MPURegionSet \
N        ROM_MPURegionSet
X#define MAP_MPURegionSet         ROM_MPURegionSet
N#else
S#define MAP_MPURegionSet \
S        MPURegionSet
X#define MAP_MPURegionSet         MPURegionSet
N#endif
N#ifdef ROM_MPURegionGet
N#define MAP_MPURegionGet \
N        ROM_MPURegionGet
X#define MAP_MPURegionGet         ROM_MPURegionGet
N#else
S#define MAP_MPURegionGet \
S        MPURegionGet
X#define MAP_MPURegionGet         MPURegionGet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the PECI API.
N//
N//*****************************************************************************
N#ifdef ROM_PECIIntClear
S#define MAP_PECIIntClear \
S        ROM_PECIIntClear
X#define MAP_PECIIntClear         ROM_PECIIntClear
N#else
N#define MAP_PECIIntClear \
N        PECIIntClear
X#define MAP_PECIIntClear         PECIIntClear
N#endif
N#ifdef ROM_PECIAdvCmdSend
S#define MAP_PECIAdvCmdSend \
S        ROM_PECIAdvCmdSend
X#define MAP_PECIAdvCmdSend         ROM_PECIAdvCmdSend
N#else
N#define MAP_PECIAdvCmdSend \
N        PECIAdvCmdSend
X#define MAP_PECIAdvCmdSend         PECIAdvCmdSend
N#endif
N#ifdef ROM_PECIAdvCmdSendNonBlocking
S#define MAP_PECIAdvCmdSendNonBlocking \
S        ROM_PECIAdvCmdSendNonBlocking
X#define MAP_PECIAdvCmdSendNonBlocking         ROM_PECIAdvCmdSendNonBlocking
N#else
N#define MAP_PECIAdvCmdSendNonBlocking \
N        PECIAdvCmdSendNonBlocking
X#define MAP_PECIAdvCmdSendNonBlocking         PECIAdvCmdSendNonBlocking
N#endif
N#ifdef ROM_PECIAdvCmdStatusGet
S#define MAP_PECIAdvCmdStatusGet \
S        ROM_PECIAdvCmdStatusGet
X#define MAP_PECIAdvCmdStatusGet         ROM_PECIAdvCmdStatusGet
N#else
N#define MAP_PECIAdvCmdStatusGet \
N        PECIAdvCmdStatusGet
X#define MAP_PECIAdvCmdStatusGet         PECIAdvCmdStatusGet
N#endif
N#ifdef ROM_PECIConfigGet
S#define MAP_PECIConfigGet \
S        ROM_PECIConfigGet
X#define MAP_PECIConfigGet         ROM_PECIConfigGet
N#else
N#define MAP_PECIConfigGet \
N        PECIConfigGet
X#define MAP_PECIConfigGet         PECIConfigGet
N#endif
N#ifdef ROM_PECIConfigSet
S#define MAP_PECIConfigSet \
S        ROM_PECIConfigSet
X#define MAP_PECIConfigSet         ROM_PECIConfigSet
N#else
N#define MAP_PECIConfigSet \
N        PECIConfigSet
X#define MAP_PECIConfigSet         PECIConfigSet
N#endif
N#ifdef ROM_PECIDomainMaxReadClear
S#define MAP_PECIDomainMaxReadClear \
S        ROM_PECIDomainMaxReadClear
X#define MAP_PECIDomainMaxReadClear         ROM_PECIDomainMaxReadClear
N#else
N#define MAP_PECIDomainMaxReadClear \
N        PECIDomainMaxReadClear
X#define MAP_PECIDomainMaxReadClear         PECIDomainMaxReadClear
N#endif
N#ifdef ROM_PECIDomainValueClear
S#define MAP_PECIDomainValueClear \
S        ROM_PECIDomainValueClear
X#define MAP_PECIDomainValueClear         ROM_PECIDomainValueClear
N#else
N#define MAP_PECIDomainValueClear \
N        PECIDomainValueClear
X#define MAP_PECIDomainValueClear         PECIDomainValueClear
N#endif
N#ifdef ROM_PECIDomainConfigGet
S#define MAP_PECIDomainConfigGet \
S        ROM_PECIDomainConfigGet
X#define MAP_PECIDomainConfigGet         ROM_PECIDomainConfigGet
N#else
N#define MAP_PECIDomainConfigGet \
N        PECIDomainConfigGet
X#define MAP_PECIDomainConfigGet         PECIDomainConfigGet
N#endif
N#ifdef ROM_PECIDomainConfigSet
S#define MAP_PECIDomainConfigSet \
S        ROM_PECIDomainConfigSet
X#define MAP_PECIDomainConfigSet         ROM_PECIDomainConfigSet
N#else
N#define MAP_PECIDomainConfigSet \
N        PECIDomainConfigSet
X#define MAP_PECIDomainConfigSet         PECIDomainConfigSet
N#endif
N#ifdef ROM_PECIDomainDisable
S#define MAP_PECIDomainDisable \
S        ROM_PECIDomainDisable
X#define MAP_PECIDomainDisable         ROM_PECIDomainDisable
N#else
N#define MAP_PECIDomainDisable \
N        PECIDomainDisable
X#define MAP_PECIDomainDisable         PECIDomainDisable
N#endif
N#ifdef ROM_PECIDomainEnable
S#define MAP_PECIDomainEnable \
S        ROM_PECIDomainEnable
X#define MAP_PECIDomainEnable         ROM_PECIDomainEnable
N#else
N#define MAP_PECIDomainEnable \
N        PECIDomainEnable
X#define MAP_PECIDomainEnable         PECIDomainEnable
N#endif
N#ifdef ROM_PECIDomainMaxReadGet
S#define MAP_PECIDomainMaxReadGet \
S        ROM_PECIDomainMaxReadGet
X#define MAP_PECIDomainMaxReadGet         ROM_PECIDomainMaxReadGet
N#else
N#define MAP_PECIDomainMaxReadGet \
N        PECIDomainMaxReadGet
X#define MAP_PECIDomainMaxReadGet         PECIDomainMaxReadGet
N#endif
N#ifdef ROM_PECIDomainValueGet
S#define MAP_PECIDomainValueGet \
S        ROM_PECIDomainValueGet
X#define MAP_PECIDomainValueGet         ROM_PECIDomainValueGet
N#else
N#define MAP_PECIDomainValueGet \
N        PECIDomainValueGet
X#define MAP_PECIDomainValueGet         PECIDomainValueGet
N#endif
N#ifdef ROM_PECIIntDisable
S#define MAP_PECIIntDisable \
S        ROM_PECIIntDisable
X#define MAP_PECIIntDisable         ROM_PECIIntDisable
N#else
N#define MAP_PECIIntDisable \
N        PECIIntDisable
X#define MAP_PECIIntDisable         PECIIntDisable
N#endif
N#ifdef ROM_PECIIntEnable
S#define MAP_PECIIntEnable \
S        ROM_PECIIntEnable
X#define MAP_PECIIntEnable         ROM_PECIIntEnable
N#else
N#define MAP_PECIIntEnable \
N        PECIIntEnable
X#define MAP_PECIIntEnable         PECIIntEnable
N#endif
N#ifdef ROM_PECIIntStatus
S#define MAP_PECIIntStatus \
S        ROM_PECIIntStatus
X#define MAP_PECIIntStatus         ROM_PECIIntStatus
N#else
N#define MAP_PECIIntStatus \
N        PECIIntStatus
X#define MAP_PECIIntStatus         PECIIntStatus
N#endif
N#ifdef ROM_PECIBypassEnable
S#define MAP_PECIBypassEnable \
S        ROM_PECIBypassEnable
X#define MAP_PECIBypassEnable         ROM_PECIBypassEnable
N#else
N#define MAP_PECIBypassEnable \
N        PECIBypassEnable
X#define MAP_PECIBypassEnable         PECIBypassEnable
N#endif
N#ifdef ROM_PECIBypassDisable
S#define MAP_PECIBypassDisable \
S        ROM_PECIBypassDisable
X#define MAP_PECIBypassDisable         ROM_PECIBypassDisable
N#else
N#define MAP_PECIBypassDisable \
N        PECIBypassDisable
X#define MAP_PECIBypassDisable         PECIBypassDisable
N#endif
N
N//*****************************************************************************
N//
N// Macros for the PWM API.
N//
N//*****************************************************************************
N#ifdef ROM_PWMPulseWidthSet
N#define MAP_PWMPulseWidthSet \
N        ROM_PWMPulseWidthSet
X#define MAP_PWMPulseWidthSet         ROM_PWMPulseWidthSet
N#else
S#define MAP_PWMPulseWidthSet \
S        PWMPulseWidthSet
X#define MAP_PWMPulseWidthSet         PWMPulseWidthSet
N#endif
N#ifdef ROM_PWMGenConfigure
N#define MAP_PWMGenConfigure \
N        ROM_PWMGenConfigure
X#define MAP_PWMGenConfigure         ROM_PWMGenConfigure
N#else
S#define MAP_PWMGenConfigure \
S        PWMGenConfigure
X#define MAP_PWMGenConfigure         PWMGenConfigure
N#endif
N#ifdef ROM_PWMGenPeriodSet
N#define MAP_PWMGenPeriodSet \
N        ROM_PWMGenPeriodSet
X#define MAP_PWMGenPeriodSet         ROM_PWMGenPeriodSet
N#else
S#define MAP_PWMGenPeriodSet \
S        PWMGenPeriodSet
X#define MAP_PWMGenPeriodSet         PWMGenPeriodSet
N#endif
N#ifdef ROM_PWMGenPeriodGet
N#define MAP_PWMGenPeriodGet \
N        ROM_PWMGenPeriodGet
X#define MAP_PWMGenPeriodGet         ROM_PWMGenPeriodGet
N#else
S#define MAP_PWMGenPeriodGet \
S        PWMGenPeriodGet
X#define MAP_PWMGenPeriodGet         PWMGenPeriodGet
N#endif
N#ifdef ROM_PWMGenEnable
N#define MAP_PWMGenEnable \
N        ROM_PWMGenEnable
X#define MAP_PWMGenEnable         ROM_PWMGenEnable
N#else
S#define MAP_PWMGenEnable \
S        PWMGenEnable
X#define MAP_PWMGenEnable         PWMGenEnable
N#endif
N#ifdef ROM_PWMGenDisable
N#define MAP_PWMGenDisable \
N        ROM_PWMGenDisable
X#define MAP_PWMGenDisable         ROM_PWMGenDisable
N#else
S#define MAP_PWMGenDisable \
S        PWMGenDisable
X#define MAP_PWMGenDisable         PWMGenDisable
N#endif
N#ifdef ROM_PWMPulseWidthGet
N#define MAP_PWMPulseWidthGet \
N        ROM_PWMPulseWidthGet
X#define MAP_PWMPulseWidthGet         ROM_PWMPulseWidthGet
N#else
S#define MAP_PWMPulseWidthGet \
S        PWMPulseWidthGet
X#define MAP_PWMPulseWidthGet         PWMPulseWidthGet
N#endif
N#ifdef ROM_PWMDeadBandEnable
N#define MAP_PWMDeadBandEnable \
N        ROM_PWMDeadBandEnable
X#define MAP_PWMDeadBandEnable         ROM_PWMDeadBandEnable
N#else
S#define MAP_PWMDeadBandEnable \
S        PWMDeadBandEnable
X#define MAP_PWMDeadBandEnable         PWMDeadBandEnable
N#endif
N#ifdef ROM_PWMDeadBandDisable
N#define MAP_PWMDeadBandDisable \
N        ROM_PWMDeadBandDisable
X#define MAP_PWMDeadBandDisable         ROM_PWMDeadBandDisable
N#else
S#define MAP_PWMDeadBandDisable \
S        PWMDeadBandDisable
X#define MAP_PWMDeadBandDisable         PWMDeadBandDisable
N#endif
N#ifdef ROM_PWMSyncUpdate
N#define MAP_PWMSyncUpdate \
N        ROM_PWMSyncUpdate
X#define MAP_PWMSyncUpdate         ROM_PWMSyncUpdate
N#else
S#define MAP_PWMSyncUpdate \
S        PWMSyncUpdate
X#define MAP_PWMSyncUpdate         PWMSyncUpdate
N#endif
N#ifdef ROM_PWMSyncTimeBase
N#define MAP_PWMSyncTimeBase \
N        ROM_PWMSyncTimeBase
X#define MAP_PWMSyncTimeBase         ROM_PWMSyncTimeBase
N#else
S#define MAP_PWMSyncTimeBase \
S        PWMSyncTimeBase
X#define MAP_PWMSyncTimeBase         PWMSyncTimeBase
N#endif
N#ifdef ROM_PWMOutputState
N#define MAP_PWMOutputState \
N        ROM_PWMOutputState
X#define MAP_PWMOutputState         ROM_PWMOutputState
N#else
S#define MAP_PWMOutputState \
S        PWMOutputState
X#define MAP_PWMOutputState         PWMOutputState
N#endif
N#ifdef ROM_PWMOutputInvert
N#define MAP_PWMOutputInvert \
N        ROM_PWMOutputInvert
X#define MAP_PWMOutputInvert         ROM_PWMOutputInvert
N#else
S#define MAP_PWMOutputInvert \
S        PWMOutputInvert
X#define MAP_PWMOutputInvert         PWMOutputInvert
N#endif
N#ifdef ROM_PWMOutputFault
N#define MAP_PWMOutputFault \
N        ROM_PWMOutputFault
X#define MAP_PWMOutputFault         ROM_PWMOutputFault
N#else
S#define MAP_PWMOutputFault \
S        PWMOutputFault
X#define MAP_PWMOutputFault         PWMOutputFault
N#endif
N#ifdef ROM_PWMGenIntTrigEnable
N#define MAP_PWMGenIntTrigEnable \
N        ROM_PWMGenIntTrigEnable
X#define MAP_PWMGenIntTrigEnable         ROM_PWMGenIntTrigEnable
N#else
S#define MAP_PWMGenIntTrigEnable \
S        PWMGenIntTrigEnable
X#define MAP_PWMGenIntTrigEnable         PWMGenIntTrigEnable
N#endif
N#ifdef ROM_PWMGenIntTrigDisable
N#define MAP_PWMGenIntTrigDisable \
N        ROM_PWMGenIntTrigDisable
X#define MAP_PWMGenIntTrigDisable         ROM_PWMGenIntTrigDisable
N#else
S#define MAP_PWMGenIntTrigDisable \
S        PWMGenIntTrigDisable
X#define MAP_PWMGenIntTrigDisable         PWMGenIntTrigDisable
N#endif
N#ifdef ROM_PWMGenIntStatus
N#define MAP_PWMGenIntStatus \
N        ROM_PWMGenIntStatus
X#define MAP_PWMGenIntStatus         ROM_PWMGenIntStatus
N#else
S#define MAP_PWMGenIntStatus \
S        PWMGenIntStatus
X#define MAP_PWMGenIntStatus         PWMGenIntStatus
N#endif
N#ifdef ROM_PWMGenIntClear
N#define MAP_PWMGenIntClear \
N        ROM_PWMGenIntClear
X#define MAP_PWMGenIntClear         ROM_PWMGenIntClear
N#else
S#define MAP_PWMGenIntClear \
S        PWMGenIntClear
X#define MAP_PWMGenIntClear         PWMGenIntClear
N#endif
N#ifdef ROM_PWMIntEnable
N#define MAP_PWMIntEnable \
N        ROM_PWMIntEnable
X#define MAP_PWMIntEnable         ROM_PWMIntEnable
N#else
S#define MAP_PWMIntEnable \
S        PWMIntEnable
X#define MAP_PWMIntEnable         PWMIntEnable
N#endif
N#ifdef ROM_PWMIntDisable
N#define MAP_PWMIntDisable \
N        ROM_PWMIntDisable
X#define MAP_PWMIntDisable         ROM_PWMIntDisable
N#else
S#define MAP_PWMIntDisable \
S        PWMIntDisable
X#define MAP_PWMIntDisable         PWMIntDisable
N#endif
N#ifdef ROM_PWMFaultIntClear
N#define MAP_PWMFaultIntClear \
N        ROM_PWMFaultIntClear
X#define MAP_PWMFaultIntClear         ROM_PWMFaultIntClear
N#else
S#define MAP_PWMFaultIntClear \
S        PWMFaultIntClear
X#define MAP_PWMFaultIntClear         PWMFaultIntClear
N#endif
N#ifdef ROM_PWMIntStatus
N#define MAP_PWMIntStatus \
N        ROM_PWMIntStatus
X#define MAP_PWMIntStatus         ROM_PWMIntStatus
N#else
S#define MAP_PWMIntStatus \
S        PWMIntStatus
X#define MAP_PWMIntStatus         PWMIntStatus
N#endif
N#ifdef ROM_PWMOutputFaultLevel
N#define MAP_PWMOutputFaultLevel \
N        ROM_PWMOutputFaultLevel
X#define MAP_PWMOutputFaultLevel         ROM_PWMOutputFaultLevel
N#else
S#define MAP_PWMOutputFaultLevel \
S        PWMOutputFaultLevel
X#define MAP_PWMOutputFaultLevel         PWMOutputFaultLevel
N#endif
N#ifdef ROM_PWMFaultIntClearExt
N#define MAP_PWMFaultIntClearExt \
N        ROM_PWMFaultIntClearExt
X#define MAP_PWMFaultIntClearExt         ROM_PWMFaultIntClearExt
N#else
S#define MAP_PWMFaultIntClearExt \
S        PWMFaultIntClearExt
X#define MAP_PWMFaultIntClearExt         PWMFaultIntClearExt
N#endif
N#ifdef ROM_PWMGenFaultConfigure
N#define MAP_PWMGenFaultConfigure \
N        ROM_PWMGenFaultConfigure
X#define MAP_PWMGenFaultConfigure         ROM_PWMGenFaultConfigure
N#else
S#define MAP_PWMGenFaultConfigure \
S        PWMGenFaultConfigure
X#define MAP_PWMGenFaultConfigure         PWMGenFaultConfigure
N#endif
N#ifdef ROM_PWMGenFaultTriggerSet
N#define MAP_PWMGenFaultTriggerSet \
N        ROM_PWMGenFaultTriggerSet
X#define MAP_PWMGenFaultTriggerSet         ROM_PWMGenFaultTriggerSet
N#else
S#define MAP_PWMGenFaultTriggerSet \
S        PWMGenFaultTriggerSet
X#define MAP_PWMGenFaultTriggerSet         PWMGenFaultTriggerSet
N#endif
N#ifdef ROM_PWMGenFaultTriggerGet
N#define MAP_PWMGenFaultTriggerGet \
N        ROM_PWMGenFaultTriggerGet
X#define MAP_PWMGenFaultTriggerGet         ROM_PWMGenFaultTriggerGet
N#else
S#define MAP_PWMGenFaultTriggerGet \
S        PWMGenFaultTriggerGet
X#define MAP_PWMGenFaultTriggerGet         PWMGenFaultTriggerGet
N#endif
N#ifdef ROM_PWMGenFaultStatus
N#define MAP_PWMGenFaultStatus \
N        ROM_PWMGenFaultStatus
X#define MAP_PWMGenFaultStatus         ROM_PWMGenFaultStatus
N#else
S#define MAP_PWMGenFaultStatus \
S        PWMGenFaultStatus
X#define MAP_PWMGenFaultStatus         PWMGenFaultStatus
N#endif
N#ifdef ROM_PWMGenFaultClear
N#define MAP_PWMGenFaultClear \
N        ROM_PWMGenFaultClear
X#define MAP_PWMGenFaultClear         ROM_PWMGenFaultClear
N#else
S#define MAP_PWMGenFaultClear \
S        PWMGenFaultClear
X#define MAP_PWMGenFaultClear         PWMGenFaultClear
N#endif
N
N//*****************************************************************************
N//
N// Macros for the QEI API.
N//
N//*****************************************************************************
N#ifdef ROM_QEIPositionGet
N#define MAP_QEIPositionGet \
N        ROM_QEIPositionGet
X#define MAP_QEIPositionGet         ROM_QEIPositionGet
N#else
S#define MAP_QEIPositionGet \
S        QEIPositionGet
X#define MAP_QEIPositionGet         QEIPositionGet
N#endif
N#ifdef ROM_QEIEnable
N#define MAP_QEIEnable \
N        ROM_QEIEnable
X#define MAP_QEIEnable         ROM_QEIEnable
N#else
S#define MAP_QEIEnable \
S        QEIEnable
X#define MAP_QEIEnable         QEIEnable
N#endif
N#ifdef ROM_QEIDisable
N#define MAP_QEIDisable \
N        ROM_QEIDisable
X#define MAP_QEIDisable         ROM_QEIDisable
N#else
S#define MAP_QEIDisable \
S        QEIDisable
X#define MAP_QEIDisable         QEIDisable
N#endif
N#ifdef ROM_QEIConfigure
N#define MAP_QEIConfigure \
N        ROM_QEIConfigure
X#define MAP_QEIConfigure         ROM_QEIConfigure
N#else
S#define MAP_QEIConfigure \
S        QEIConfigure
X#define MAP_QEIConfigure         QEIConfigure
N#endif
N#ifdef ROM_QEIPositionSet
N#define MAP_QEIPositionSet \
N        ROM_QEIPositionSet
X#define MAP_QEIPositionSet         ROM_QEIPositionSet
N#else
S#define MAP_QEIPositionSet \
S        QEIPositionSet
X#define MAP_QEIPositionSet         QEIPositionSet
N#endif
N#ifdef ROM_QEIDirectionGet
N#define MAP_QEIDirectionGet \
N        ROM_QEIDirectionGet
X#define MAP_QEIDirectionGet         ROM_QEIDirectionGet
N#else
S#define MAP_QEIDirectionGet \
S        QEIDirectionGet
X#define MAP_QEIDirectionGet         QEIDirectionGet
N#endif
N#ifdef ROM_QEIErrorGet
N#define MAP_QEIErrorGet \
N        ROM_QEIErrorGet
X#define MAP_QEIErrorGet         ROM_QEIErrorGet
N#else
S#define MAP_QEIErrorGet \
S        QEIErrorGet
X#define MAP_QEIErrorGet         QEIErrorGet
N#endif
N#ifdef ROM_QEIVelocityEnable
N#define MAP_QEIVelocityEnable \
N        ROM_QEIVelocityEnable
X#define MAP_QEIVelocityEnable         ROM_QEIVelocityEnable
N#else
S#define MAP_QEIVelocityEnable \
S        QEIVelocityEnable
X#define MAP_QEIVelocityEnable         QEIVelocityEnable
N#endif
N#ifdef ROM_QEIVelocityDisable
N#define MAP_QEIVelocityDisable \
N        ROM_QEIVelocityDisable
X#define MAP_QEIVelocityDisable         ROM_QEIVelocityDisable
N#else
S#define MAP_QEIVelocityDisable \
S        QEIVelocityDisable
X#define MAP_QEIVelocityDisable         QEIVelocityDisable
N#endif
N#ifdef ROM_QEIVelocityConfigure
N#define MAP_QEIVelocityConfigure \
N        ROM_QEIVelocityConfigure
X#define MAP_QEIVelocityConfigure         ROM_QEIVelocityConfigure
N#else
S#define MAP_QEIVelocityConfigure \
S        QEIVelocityConfigure
X#define MAP_QEIVelocityConfigure         QEIVelocityConfigure
N#endif
N#ifdef ROM_QEIVelocityGet
N#define MAP_QEIVelocityGet \
N        ROM_QEIVelocityGet
X#define MAP_QEIVelocityGet         ROM_QEIVelocityGet
N#else
S#define MAP_QEIVelocityGet \
S        QEIVelocityGet
X#define MAP_QEIVelocityGet         QEIVelocityGet
N#endif
N#ifdef ROM_QEIIntEnable
N#define MAP_QEIIntEnable \
N        ROM_QEIIntEnable
X#define MAP_QEIIntEnable         ROM_QEIIntEnable
N#else
S#define MAP_QEIIntEnable \
S        QEIIntEnable
X#define MAP_QEIIntEnable         QEIIntEnable
N#endif
N#ifdef ROM_QEIIntDisable
N#define MAP_QEIIntDisable \
N        ROM_QEIIntDisable
X#define MAP_QEIIntDisable         ROM_QEIIntDisable
N#else
S#define MAP_QEIIntDisable \
S        QEIIntDisable
X#define MAP_QEIIntDisable         QEIIntDisable
N#endif
N#ifdef ROM_QEIIntStatus
N#define MAP_QEIIntStatus \
N        ROM_QEIIntStatus
X#define MAP_QEIIntStatus         ROM_QEIIntStatus
N#else
S#define MAP_QEIIntStatus \
S        QEIIntStatus
X#define MAP_QEIIntStatus         QEIIntStatus
N#endif
N#ifdef ROM_QEIIntClear
N#define MAP_QEIIntClear \
N        ROM_QEIIntClear
X#define MAP_QEIIntClear         ROM_QEIIntClear
N#else
S#define MAP_QEIIntClear \
S        QEIIntClear
X#define MAP_QEIIntClear         QEIIntClear
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SMBus API.
N//
N//*****************************************************************************
N#ifdef ROM_SMBusMasterIntProcess
S#define MAP_SMBusMasterIntProcess \
S        ROM_SMBusMasterIntProcess
X#define MAP_SMBusMasterIntProcess         ROM_SMBusMasterIntProcess
N#else
N#define MAP_SMBusMasterIntProcess \
N        SMBusMasterIntProcess
X#define MAP_SMBusMasterIntProcess         SMBusMasterIntProcess
N#endif
N#ifdef ROM_SMBusARPDisable
S#define MAP_SMBusARPDisable \
S        ROM_SMBusARPDisable
X#define MAP_SMBusARPDisable         ROM_SMBusARPDisable
N#else
N#define MAP_SMBusARPDisable \
N        SMBusARPDisable
X#define MAP_SMBusARPDisable         SMBusARPDisable
N#endif
N#ifdef ROM_SMBusARPEnable
S#define MAP_SMBusARPEnable \
S        ROM_SMBusARPEnable
X#define MAP_SMBusARPEnable         ROM_SMBusARPEnable
N#else
N#define MAP_SMBusARPEnable \
N        SMBusARPEnable
X#define MAP_SMBusARPEnable         SMBusARPEnable
N#endif
N#ifdef ROM_SMBusARPUDIDPacketDecode
S#define MAP_SMBusARPUDIDPacketDecode \
S        ROM_SMBusARPUDIDPacketDecode
X#define MAP_SMBusARPUDIDPacketDecode         ROM_SMBusARPUDIDPacketDecode
N#else
N#define MAP_SMBusARPUDIDPacketDecode \
N        SMBusARPUDIDPacketDecode
X#define MAP_SMBusARPUDIDPacketDecode         SMBusARPUDIDPacketDecode
N#endif
N#ifdef ROM_SMBusARPUDIDPacketEncode
S#define MAP_SMBusARPUDIDPacketEncode \
S        ROM_SMBusARPUDIDPacketEncode
X#define MAP_SMBusARPUDIDPacketEncode         ROM_SMBusARPUDIDPacketEncode
N#else
N#define MAP_SMBusARPUDIDPacketEncode \
N        SMBusARPUDIDPacketEncode
X#define MAP_SMBusARPUDIDPacketEncode         SMBusARPUDIDPacketEncode
N#endif
N#ifdef ROM_SMBusMasterARPAssignAddress
S#define MAP_SMBusMasterARPAssignAddress \
S        ROM_SMBusMasterARPAssignAddress
X#define MAP_SMBusMasterARPAssignAddress         ROM_SMBusMasterARPAssignAddress
N#else
N#define MAP_SMBusMasterARPAssignAddress \
N        SMBusMasterARPAssignAddress
X#define MAP_SMBusMasterARPAssignAddress         SMBusMasterARPAssignAddress
N#endif
N#ifdef ROM_SMBusMasterARPGetUDIDDir
S#define MAP_SMBusMasterARPGetUDIDDir \
S        ROM_SMBusMasterARPGetUDIDDir
X#define MAP_SMBusMasterARPGetUDIDDir         ROM_SMBusMasterARPGetUDIDDir
N#else
N#define MAP_SMBusMasterARPGetUDIDDir \
N        SMBusMasterARPGetUDIDDir
X#define MAP_SMBusMasterARPGetUDIDDir         SMBusMasterARPGetUDIDDir
N#endif
N#ifdef ROM_SMBusMasterARPGetUDIDGen
S#define MAP_SMBusMasterARPGetUDIDGen \
S        ROM_SMBusMasterARPGetUDIDGen
X#define MAP_SMBusMasterARPGetUDIDGen         ROM_SMBusMasterARPGetUDIDGen
N#else
N#define MAP_SMBusMasterARPGetUDIDGen \
N        SMBusMasterARPGetUDIDGen
X#define MAP_SMBusMasterARPGetUDIDGen         SMBusMasterARPGetUDIDGen
N#endif
N#ifdef ROM_SMBusMasterARPNotifyMaster
S#define MAP_SMBusMasterARPNotifyMaster \
S        ROM_SMBusMasterARPNotifyMaster
X#define MAP_SMBusMasterARPNotifyMaster         ROM_SMBusMasterARPNotifyMaster
N#else
N#define MAP_SMBusMasterARPNotifyMaster \
N        SMBusMasterARPNotifyMaster
X#define MAP_SMBusMasterARPNotifyMaster         SMBusMasterARPNotifyMaster
N#endif
N#ifdef ROM_SMBusMasterARPPrepareToARP
S#define MAP_SMBusMasterARPPrepareToARP \
S        ROM_SMBusMasterARPPrepareToARP
X#define MAP_SMBusMasterARPPrepareToARP         ROM_SMBusMasterARPPrepareToARP
N#else
N#define MAP_SMBusMasterARPPrepareToARP \
N        SMBusMasterARPPrepareToARP
X#define MAP_SMBusMasterARPPrepareToARP         SMBusMasterARPPrepareToARP
N#endif
N#ifdef ROM_SMBusMasterARPResetDeviceDir
S#define MAP_SMBusMasterARPResetDeviceDir \
S        ROM_SMBusMasterARPResetDeviceDir
X#define MAP_SMBusMasterARPResetDeviceDir         ROM_SMBusMasterARPResetDeviceDir
N#else
N#define MAP_SMBusMasterARPResetDeviceDir \
N        SMBusMasterARPResetDeviceDir
X#define MAP_SMBusMasterARPResetDeviceDir         SMBusMasterARPResetDeviceDir
N#endif
N#ifdef ROM_SMBusMasterARPResetDeviceGen
S#define MAP_SMBusMasterARPResetDeviceGen \
S        ROM_SMBusMasterARPResetDeviceGen
X#define MAP_SMBusMasterARPResetDeviceGen         ROM_SMBusMasterARPResetDeviceGen
N#else
N#define MAP_SMBusMasterARPResetDeviceGen \
N        SMBusMasterARPResetDeviceGen
X#define MAP_SMBusMasterARPResetDeviceGen         SMBusMasterARPResetDeviceGen
N#endif
N#ifdef ROM_SMBusMasterBlockProcessCall
S#define MAP_SMBusMasterBlockProcessCall \
S        ROM_SMBusMasterBlockProcessCall
X#define MAP_SMBusMasterBlockProcessCall         ROM_SMBusMasterBlockProcessCall
N#else
N#define MAP_SMBusMasterBlockProcessCall \
N        SMBusMasterBlockProcessCall
X#define MAP_SMBusMasterBlockProcessCall         SMBusMasterBlockProcessCall
N#endif
N#ifdef ROM_SMBusMasterBlockWrite
S#define MAP_SMBusMasterBlockWrite \
S        ROM_SMBusMasterBlockWrite
X#define MAP_SMBusMasterBlockWrite         ROM_SMBusMasterBlockWrite
N#else
N#define MAP_SMBusMasterBlockWrite \
N        SMBusMasterBlockWrite
X#define MAP_SMBusMasterBlockWrite         SMBusMasterBlockWrite
N#endif
N#ifdef ROM_SMBusMasterByteReceive
S#define MAP_SMBusMasterByteReceive \
S        ROM_SMBusMasterByteReceive
X#define MAP_SMBusMasterByteReceive         ROM_SMBusMasterByteReceive
N#else
N#define MAP_SMBusMasterByteReceive \
N        SMBusMasterByteReceive
X#define MAP_SMBusMasterByteReceive         SMBusMasterByteReceive
N#endif
N#ifdef ROM_SMBusMasterByteSend
S#define MAP_SMBusMasterByteSend \
S        ROM_SMBusMasterByteSend
X#define MAP_SMBusMasterByteSend         ROM_SMBusMasterByteSend
N#else
N#define MAP_SMBusMasterByteSend \
N        SMBusMasterByteSend
X#define MAP_SMBusMasterByteSend         SMBusMasterByteSend
N#endif
N#ifdef ROM_SMBusMasterByteWordRead
S#define MAP_SMBusMasterByteWordRead \
S        ROM_SMBusMasterByteWordRead
X#define MAP_SMBusMasterByteWordRead         ROM_SMBusMasterByteWordRead
N#else
N#define MAP_SMBusMasterByteWordRead \
N        SMBusMasterByteWordRead
X#define MAP_SMBusMasterByteWordRead         SMBusMasterByteWordRead
N#endif
N#ifdef ROM_SMBusMasterByteWordWrite
S#define MAP_SMBusMasterByteWordWrite \
S        ROM_SMBusMasterByteWordWrite
X#define MAP_SMBusMasterByteWordWrite         ROM_SMBusMasterByteWordWrite
N#else
N#define MAP_SMBusMasterByteWordWrite \
N        SMBusMasterByteWordWrite
X#define MAP_SMBusMasterByteWordWrite         SMBusMasterByteWordWrite
N#endif
N#ifdef ROM_SMBusMasterHostNotify
S#define MAP_SMBusMasterHostNotify \
S        ROM_SMBusMasterHostNotify
X#define MAP_SMBusMasterHostNotify         ROM_SMBusMasterHostNotify
N#else
N#define MAP_SMBusMasterHostNotify \
N        SMBusMasterHostNotify
X#define MAP_SMBusMasterHostNotify         SMBusMasterHostNotify
N#endif
N#ifdef ROM_SMBusMasterI2CRead
S#define MAP_SMBusMasterI2CRead \
S        ROM_SMBusMasterI2CRead
X#define MAP_SMBusMasterI2CRead         ROM_SMBusMasterI2CRead
N#else
N#define MAP_SMBusMasterI2CRead \
N        SMBusMasterI2CRead
X#define MAP_SMBusMasterI2CRead         SMBusMasterI2CRead
N#endif
N#ifdef ROM_SMBusMasterI2CWrite
S#define MAP_SMBusMasterI2CWrite \
S        ROM_SMBusMasterI2CWrite
X#define MAP_SMBusMasterI2CWrite         ROM_SMBusMasterI2CWrite
N#else
N#define MAP_SMBusMasterI2CWrite \
N        SMBusMasterI2CWrite
X#define MAP_SMBusMasterI2CWrite         SMBusMasterI2CWrite
N#endif
N#ifdef ROM_SMBusMasterI2CWriteRead
S#define MAP_SMBusMasterI2CWriteRead \
S        ROM_SMBusMasterI2CWriteRead
X#define MAP_SMBusMasterI2CWriteRead         ROM_SMBusMasterI2CWriteRead
N#else
N#define MAP_SMBusMasterI2CWriteRead \
N        SMBusMasterI2CWriteRead
X#define MAP_SMBusMasterI2CWriteRead         SMBusMasterI2CWriteRead
N#endif
N#ifdef ROM_SMBusMasterInit
S#define MAP_SMBusMasterInit \
S        ROM_SMBusMasterInit
X#define MAP_SMBusMasterInit         ROM_SMBusMasterInit
N#else
N#define MAP_SMBusMasterInit \
N        SMBusMasterInit
X#define MAP_SMBusMasterInit         SMBusMasterInit
N#endif
N#ifdef ROM_SMBusMasterIntEnable
S#define MAP_SMBusMasterIntEnable \
S        ROM_SMBusMasterIntEnable
X#define MAP_SMBusMasterIntEnable         ROM_SMBusMasterIntEnable
N#else
N#define MAP_SMBusMasterIntEnable \
N        SMBusMasterIntEnable
X#define MAP_SMBusMasterIntEnable         SMBusMasterIntEnable
N#endif
N#ifdef ROM_SMBusMasterProcessCall
S#define MAP_SMBusMasterProcessCall \
S        ROM_SMBusMasterProcessCall
X#define MAP_SMBusMasterProcessCall         ROM_SMBusMasterProcessCall
N#else
N#define MAP_SMBusMasterProcessCall \
N        SMBusMasterProcessCall
X#define MAP_SMBusMasterProcessCall         SMBusMasterProcessCall
N#endif
N#ifdef ROM_SMBusMasterQuickCommand
S#define MAP_SMBusMasterQuickCommand \
S        ROM_SMBusMasterQuickCommand
X#define MAP_SMBusMasterQuickCommand         ROM_SMBusMasterQuickCommand
N#else
N#define MAP_SMBusMasterQuickCommand \
N        SMBusMasterQuickCommand
X#define MAP_SMBusMasterQuickCommand         SMBusMasterQuickCommand
N#endif
N#ifdef ROM_SMBusPECDisable
S#define MAP_SMBusPECDisable \
S        ROM_SMBusPECDisable
X#define MAP_SMBusPECDisable         ROM_SMBusPECDisable
N#else
N#define MAP_SMBusPECDisable \
N        SMBusPECDisable
X#define MAP_SMBusPECDisable         SMBusPECDisable
N#endif
N#ifdef ROM_SMBusPECEnable
S#define MAP_SMBusPECEnable \
S        ROM_SMBusPECEnable
X#define MAP_SMBusPECEnable         ROM_SMBusPECEnable
N#else
N#define MAP_SMBusPECEnable \
N        SMBusPECEnable
X#define MAP_SMBusPECEnable         SMBusPECEnable
N#endif
N#ifdef ROM_SMBusRxPacketSizeGet
S#define MAP_SMBusRxPacketSizeGet \
S        ROM_SMBusRxPacketSizeGet
X#define MAP_SMBusRxPacketSizeGet         ROM_SMBusRxPacketSizeGet
N#else
N#define MAP_SMBusRxPacketSizeGet \
N        SMBusRxPacketSizeGet
X#define MAP_SMBusRxPacketSizeGet         SMBusRxPacketSizeGet
N#endif
N#ifdef ROM_SMBusSlaveACKSend
S#define MAP_SMBusSlaveACKSend \
S        ROM_SMBusSlaveACKSend
X#define MAP_SMBusSlaveACKSend         ROM_SMBusSlaveACKSend
N#else
N#define MAP_SMBusSlaveACKSend \
N        SMBusSlaveACKSend
X#define MAP_SMBusSlaveACKSend         SMBusSlaveACKSend
N#endif
N#ifdef ROM_SMBusSlaveAddressSet
S#define MAP_SMBusSlaveAddressSet \
S        ROM_SMBusSlaveAddressSet
X#define MAP_SMBusSlaveAddressSet         ROM_SMBusSlaveAddressSet
N#else
N#define MAP_SMBusSlaveAddressSet \
N        SMBusSlaveAddressSet
X#define MAP_SMBusSlaveAddressSet         SMBusSlaveAddressSet
N#endif
N#ifdef ROM_SMBusSlaveARPFlagARGet
S#define MAP_SMBusSlaveARPFlagARGet \
S        ROM_SMBusSlaveARPFlagARGet
X#define MAP_SMBusSlaveARPFlagARGet         ROM_SMBusSlaveARPFlagARGet
N#else
N#define MAP_SMBusSlaveARPFlagARGet \
N        SMBusSlaveARPFlagARGet
X#define MAP_SMBusSlaveARPFlagARGet         SMBusSlaveARPFlagARGet
N#endif
N#ifdef ROM_SMBusSlaveARPFlagARSet
S#define MAP_SMBusSlaveARPFlagARSet \
S        ROM_SMBusSlaveARPFlagARSet
X#define MAP_SMBusSlaveARPFlagARSet         ROM_SMBusSlaveARPFlagARSet
N#else
N#define MAP_SMBusSlaveARPFlagARSet \
N        SMBusSlaveARPFlagARSet
X#define MAP_SMBusSlaveARPFlagARSet         SMBusSlaveARPFlagARSet
N#endif
N#ifdef ROM_SMBusSlaveARPFlagAVGet
S#define MAP_SMBusSlaveARPFlagAVGet \
S        ROM_SMBusSlaveARPFlagAVGet
X#define MAP_SMBusSlaveARPFlagAVGet         ROM_SMBusSlaveARPFlagAVGet
N#else
N#define MAP_SMBusSlaveARPFlagAVGet \
N        SMBusSlaveARPFlagAVGet
X#define MAP_SMBusSlaveARPFlagAVGet         SMBusSlaveARPFlagAVGet
N#endif
N#ifdef ROM_SMBusSlaveARPFlagAVSet
S#define MAP_SMBusSlaveARPFlagAVSet \
S        ROM_SMBusSlaveARPFlagAVSet
X#define MAP_SMBusSlaveARPFlagAVSet         ROM_SMBusSlaveARPFlagAVSet
N#else
N#define MAP_SMBusSlaveARPFlagAVSet \
N        SMBusSlaveARPFlagAVSet
X#define MAP_SMBusSlaveARPFlagAVSet         SMBusSlaveARPFlagAVSet
N#endif
N#ifdef ROM_SMBusSlaveBlockTransferDisable
S#define MAP_SMBusSlaveBlockTransferDisable \
S        ROM_SMBusSlaveBlockTransferDisable
X#define MAP_SMBusSlaveBlockTransferDisable         ROM_SMBusSlaveBlockTransferDisable
N#else
N#define MAP_SMBusSlaveBlockTransferDisable \
N        SMBusSlaveBlockTransferDisable
X#define MAP_SMBusSlaveBlockTransferDisable         SMBusSlaveBlockTransferDisable
N#endif
N#ifdef ROM_SMBusSlaveBlockTransferEnable
S#define MAP_SMBusSlaveBlockTransferEnable \
S        ROM_SMBusSlaveBlockTransferEnable
X#define MAP_SMBusSlaveBlockTransferEnable         ROM_SMBusSlaveBlockTransferEnable
N#else
N#define MAP_SMBusSlaveBlockTransferEnable \
N        SMBusSlaveBlockTransferEnable
X#define MAP_SMBusSlaveBlockTransferEnable         SMBusSlaveBlockTransferEnable
N#endif
N#ifdef ROM_SMBusSlaveCommandGet
S#define MAP_SMBusSlaveCommandGet \
S        ROM_SMBusSlaveCommandGet
X#define MAP_SMBusSlaveCommandGet         ROM_SMBusSlaveCommandGet
N#else
N#define MAP_SMBusSlaveCommandGet \
N        SMBusSlaveCommandGet
X#define MAP_SMBusSlaveCommandGet         SMBusSlaveCommandGet
N#endif
N#ifdef ROM_SMBusSlaveI2CDisable
S#define MAP_SMBusSlaveI2CDisable \
S        ROM_SMBusSlaveI2CDisable
X#define MAP_SMBusSlaveI2CDisable         ROM_SMBusSlaveI2CDisable
N#else
N#define MAP_SMBusSlaveI2CDisable \
N        SMBusSlaveI2CDisable
X#define MAP_SMBusSlaveI2CDisable         SMBusSlaveI2CDisable
N#endif
N#ifdef ROM_SMBusSlaveI2CEnable
S#define MAP_SMBusSlaveI2CEnable \
S        ROM_SMBusSlaveI2CEnable
X#define MAP_SMBusSlaveI2CEnable         ROM_SMBusSlaveI2CEnable
N#else
N#define MAP_SMBusSlaveI2CEnable \
N        SMBusSlaveI2CEnable
X#define MAP_SMBusSlaveI2CEnable         SMBusSlaveI2CEnable
N#endif
N#ifdef ROM_SMBusSlaveInit
S#define MAP_SMBusSlaveInit \
S        ROM_SMBusSlaveInit
X#define MAP_SMBusSlaveInit         ROM_SMBusSlaveInit
N#else
N#define MAP_SMBusSlaveInit \
N        SMBusSlaveInit
X#define MAP_SMBusSlaveInit         SMBusSlaveInit
N#endif
N#ifdef ROM_SMBusSlaveIntAddressGet
S#define MAP_SMBusSlaveIntAddressGet \
S        ROM_SMBusSlaveIntAddressGet
X#define MAP_SMBusSlaveIntAddressGet         ROM_SMBusSlaveIntAddressGet
N#else
N#define MAP_SMBusSlaveIntAddressGet \
N        SMBusSlaveIntAddressGet
X#define MAP_SMBusSlaveIntAddressGet         SMBusSlaveIntAddressGet
N#endif
N#ifdef ROM_SMBusSlaveIntEnable
S#define MAP_SMBusSlaveIntEnable \
S        ROM_SMBusSlaveIntEnable
X#define MAP_SMBusSlaveIntEnable         ROM_SMBusSlaveIntEnable
N#else
N#define MAP_SMBusSlaveIntEnable \
N        SMBusSlaveIntEnable
X#define MAP_SMBusSlaveIntEnable         SMBusSlaveIntEnable
N#endif
N#ifdef ROM_SMBusSlaveIntProcess
S#define MAP_SMBusSlaveIntProcess \
S        ROM_SMBusSlaveIntProcess
X#define MAP_SMBusSlaveIntProcess         ROM_SMBusSlaveIntProcess
N#else
N#define MAP_SMBusSlaveIntProcess \
N        SMBusSlaveIntProcess
X#define MAP_SMBusSlaveIntProcess         SMBusSlaveIntProcess
N#endif
N#ifdef ROM_SMBusSlaveManualACKDisable
S#define MAP_SMBusSlaveManualACKDisable \
S        ROM_SMBusSlaveManualACKDisable
X#define MAP_SMBusSlaveManualACKDisable         ROM_SMBusSlaveManualACKDisable
N#else
N#define MAP_SMBusSlaveManualACKDisable \
N        SMBusSlaveManualACKDisable
X#define MAP_SMBusSlaveManualACKDisable         SMBusSlaveManualACKDisable
N#endif
N#ifdef ROM_SMBusSlaveManualACKEnable
S#define MAP_SMBusSlaveManualACKEnable \
S        ROM_SMBusSlaveManualACKEnable
X#define MAP_SMBusSlaveManualACKEnable         ROM_SMBusSlaveManualACKEnable
N#else
N#define MAP_SMBusSlaveManualACKEnable \
N        SMBusSlaveManualACKEnable
X#define MAP_SMBusSlaveManualACKEnable         SMBusSlaveManualACKEnable
N#endif
N#ifdef ROM_SMBusSlaveManualACKStatusGet
S#define MAP_SMBusSlaveManualACKStatusGet \
S        ROM_SMBusSlaveManualACKStatusGet
X#define MAP_SMBusSlaveManualACKStatusGet         ROM_SMBusSlaveManualACKStatusGet
N#else
N#define MAP_SMBusSlaveManualACKStatusGet \
N        SMBusSlaveManualACKStatusGet
X#define MAP_SMBusSlaveManualACKStatusGet         SMBusSlaveManualACKStatusGet
N#endif
N#ifdef ROM_SMBusSlaveProcessCallDisable
S#define MAP_SMBusSlaveProcessCallDisable \
S        ROM_SMBusSlaveProcessCallDisable
X#define MAP_SMBusSlaveProcessCallDisable         ROM_SMBusSlaveProcessCallDisable
N#else
N#define MAP_SMBusSlaveProcessCallDisable \
N        SMBusSlaveProcessCallDisable
X#define MAP_SMBusSlaveProcessCallDisable         SMBusSlaveProcessCallDisable
N#endif
N#ifdef ROM_SMBusSlaveProcessCallEnable
S#define MAP_SMBusSlaveProcessCallEnable \
S        ROM_SMBusSlaveProcessCallEnable
X#define MAP_SMBusSlaveProcessCallEnable         ROM_SMBusSlaveProcessCallEnable
N#else
N#define MAP_SMBusSlaveProcessCallEnable \
N        SMBusSlaveProcessCallEnable
X#define MAP_SMBusSlaveProcessCallEnable         SMBusSlaveProcessCallEnable
N#endif
N#ifdef ROM_SMBusSlaveRxBufferSet
S#define MAP_SMBusSlaveRxBufferSet \
S        ROM_SMBusSlaveRxBufferSet
X#define MAP_SMBusSlaveRxBufferSet         ROM_SMBusSlaveRxBufferSet
N#else
N#define MAP_SMBusSlaveRxBufferSet \
N        SMBusSlaveRxBufferSet
X#define MAP_SMBusSlaveRxBufferSet         SMBusSlaveRxBufferSet
N#endif
N#ifdef ROM_SMBusSlaveTransferInit
S#define MAP_SMBusSlaveTransferInit \
S        ROM_SMBusSlaveTransferInit
X#define MAP_SMBusSlaveTransferInit         ROM_SMBusSlaveTransferInit
N#else
N#define MAP_SMBusSlaveTransferInit \
N        SMBusSlaveTransferInit
X#define MAP_SMBusSlaveTransferInit         SMBusSlaveTransferInit
N#endif
N#ifdef ROM_SMBusSlaveTxBufferSet
S#define MAP_SMBusSlaveTxBufferSet \
S        ROM_SMBusSlaveTxBufferSet
X#define MAP_SMBusSlaveTxBufferSet         ROM_SMBusSlaveTxBufferSet
N#else
N#define MAP_SMBusSlaveTxBufferSet \
N        SMBusSlaveTxBufferSet
X#define MAP_SMBusSlaveTxBufferSet         SMBusSlaveTxBufferSet
N#endif
N#ifdef ROM_SMBusSlaveUDIDSet
S#define MAP_SMBusSlaveUDIDSet \
S        ROM_SMBusSlaveUDIDSet
X#define MAP_SMBusSlaveUDIDSet         ROM_SMBusSlaveUDIDSet
N#else
N#define MAP_SMBusSlaveUDIDSet \
N        SMBusSlaveUDIDSet
X#define MAP_SMBusSlaveUDIDSet         SMBusSlaveUDIDSet
N#endif
N#ifdef ROM_SMBusStatusGet
S#define MAP_SMBusStatusGet \
S        ROM_SMBusStatusGet
X#define MAP_SMBusStatusGet         ROM_SMBusStatusGet
N#else
N#define MAP_SMBusStatusGet \
N        SMBusStatusGet
X#define MAP_SMBusStatusGet         SMBusStatusGet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SSI API.
N//
N//*****************************************************************************
N#ifdef ROM_SSIDataPut
N#define MAP_SSIDataPut \
N        ROM_SSIDataPut
X#define MAP_SSIDataPut         ROM_SSIDataPut
N#else
S#define MAP_SSIDataPut \
S        SSIDataPut
X#define MAP_SSIDataPut         SSIDataPut
N#endif
N#ifdef ROM_SSIConfigSetExpClk
N#define MAP_SSIConfigSetExpClk \
N        ROM_SSIConfigSetExpClk
X#define MAP_SSIConfigSetExpClk         ROM_SSIConfigSetExpClk
N#else
S#define MAP_SSIConfigSetExpClk \
S        SSIConfigSetExpClk
X#define MAP_SSIConfigSetExpClk         SSIConfigSetExpClk
N#endif
N#ifdef ROM_SSIEnable
N#define MAP_SSIEnable \
N        ROM_SSIEnable
X#define MAP_SSIEnable         ROM_SSIEnable
N#else
S#define MAP_SSIEnable \
S        SSIEnable
X#define MAP_SSIEnable         SSIEnable
N#endif
N#ifdef ROM_SSIDisable
N#define MAP_SSIDisable \
N        ROM_SSIDisable
X#define MAP_SSIDisable         ROM_SSIDisable
N#else
S#define MAP_SSIDisable \
S        SSIDisable
X#define MAP_SSIDisable         SSIDisable
N#endif
N#ifdef ROM_SSIIntEnable
N#define MAP_SSIIntEnable \
N        ROM_SSIIntEnable
X#define MAP_SSIIntEnable         ROM_SSIIntEnable
N#else
S#define MAP_SSIIntEnable \
S        SSIIntEnable
X#define MAP_SSIIntEnable         SSIIntEnable
N#endif
N#ifdef ROM_SSIIntDisable
N#define MAP_SSIIntDisable \
N        ROM_SSIIntDisable
X#define MAP_SSIIntDisable         ROM_SSIIntDisable
N#else
S#define MAP_SSIIntDisable \
S        SSIIntDisable
X#define MAP_SSIIntDisable         SSIIntDisable
N#endif
N#ifdef ROM_SSIIntStatus
N#define MAP_SSIIntStatus \
N        ROM_SSIIntStatus
X#define MAP_SSIIntStatus         ROM_SSIIntStatus
N#else
S#define MAP_SSIIntStatus \
S        SSIIntStatus
X#define MAP_SSIIntStatus         SSIIntStatus
N#endif
N#ifdef ROM_SSIIntClear
N#define MAP_SSIIntClear \
N        ROM_SSIIntClear
X#define MAP_SSIIntClear         ROM_SSIIntClear
N#else
S#define MAP_SSIIntClear \
S        SSIIntClear
X#define MAP_SSIIntClear         SSIIntClear
N#endif
N#ifdef ROM_SSIDataPutNonBlocking
N#define MAP_SSIDataPutNonBlocking \
N        ROM_SSIDataPutNonBlocking
X#define MAP_SSIDataPutNonBlocking         ROM_SSIDataPutNonBlocking
N#else
S#define MAP_SSIDataPutNonBlocking \
S        SSIDataPutNonBlocking
X#define MAP_SSIDataPutNonBlocking         SSIDataPutNonBlocking
N#endif
N#ifdef ROM_SSIDataGet
N#define MAP_SSIDataGet \
N        ROM_SSIDataGet
X#define MAP_SSIDataGet         ROM_SSIDataGet
N#else
S#define MAP_SSIDataGet \
S        SSIDataGet
X#define MAP_SSIDataGet         SSIDataGet
N#endif
N#ifdef ROM_SSIDataGetNonBlocking
N#define MAP_SSIDataGetNonBlocking \
N        ROM_SSIDataGetNonBlocking
X#define MAP_SSIDataGetNonBlocking         ROM_SSIDataGetNonBlocking
N#else
S#define MAP_SSIDataGetNonBlocking \
S        SSIDataGetNonBlocking
X#define MAP_SSIDataGetNonBlocking         SSIDataGetNonBlocking
N#endif
N#ifdef ROM_SSIDMAEnable
N#define MAP_SSIDMAEnable \
N        ROM_SSIDMAEnable
X#define MAP_SSIDMAEnable         ROM_SSIDMAEnable
N#else
S#define MAP_SSIDMAEnable \
S        SSIDMAEnable
X#define MAP_SSIDMAEnable         SSIDMAEnable
N#endif
N#ifdef ROM_SSIDMADisable
N#define MAP_SSIDMADisable \
N        ROM_SSIDMADisable
X#define MAP_SSIDMADisable         ROM_SSIDMADisable
N#else
S#define MAP_SSIDMADisable \
S        SSIDMADisable
X#define MAP_SSIDMADisable         SSIDMADisable
N#endif
N#ifdef ROM_SSIBusy
S#define MAP_SSIBusy \
S        ROM_SSIBusy
X#define MAP_SSIBusy         ROM_SSIBusy
N#else
N#define MAP_SSIBusy \
N        SSIBusy
X#define MAP_SSIBusy         SSIBusy
N#endif
N#ifdef ROM_SSIClockSourceGet
S#define MAP_SSIClockSourceGet \
S        ROM_SSIClockSourceGet
X#define MAP_SSIClockSourceGet         ROM_SSIClockSourceGet
N#else
N#define MAP_SSIClockSourceGet \
N        SSIClockSourceGet
X#define MAP_SSIClockSourceGet         SSIClockSourceGet
N#endif
N#ifdef ROM_SSIClockSourceSet
S#define MAP_SSIClockSourceSet \
S        ROM_SSIClockSourceSet
X#define MAP_SSIClockSourceSet         ROM_SSIClockSourceSet
N#else
N#define MAP_SSIClockSourceSet \
N        SSIClockSourceSet
X#define MAP_SSIClockSourceSet         SSIClockSourceSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SysCtl API.
N//
N//*****************************************************************************
N#ifdef ROM_SysCtlSleep
N#define MAP_SysCtlSleep \
N        ROM_SysCtlSleep
X#define MAP_SysCtlSleep         ROM_SysCtlSleep
N#else
S#define MAP_SysCtlSleep \
S        SysCtlSleep
X#define MAP_SysCtlSleep         SysCtlSleep
N#endif
N#ifdef ROM_SysCtlSRAMSizeGet
N#define MAP_SysCtlSRAMSizeGet \
N        ROM_SysCtlSRAMSizeGet
X#define MAP_SysCtlSRAMSizeGet         ROM_SysCtlSRAMSizeGet
N#else
S#define MAP_SysCtlSRAMSizeGet \
S        SysCtlSRAMSizeGet
X#define MAP_SysCtlSRAMSizeGet         SysCtlSRAMSizeGet
N#endif
N#ifdef ROM_SysCtlFlashSizeGet
N#define MAP_SysCtlFlashSizeGet \
N        ROM_SysCtlFlashSizeGet
X#define MAP_SysCtlFlashSizeGet         ROM_SysCtlFlashSizeGet
N#else
S#define MAP_SysCtlFlashSizeGet \
S        SysCtlFlashSizeGet
X#define MAP_SysCtlFlashSizeGet         SysCtlFlashSizeGet
N#endif
N#ifdef ROM_SysCtlPinPresent
N#define MAP_SysCtlPinPresent \
N        ROM_SysCtlPinPresent
X#define MAP_SysCtlPinPresent         ROM_SysCtlPinPresent
N#else
S#define MAP_SysCtlPinPresent \
S        SysCtlPinPresent
X#define MAP_SysCtlPinPresent         SysCtlPinPresent
N#endif
N#ifdef ROM_SysCtlPeripheralPresent
N#define MAP_SysCtlPeripheralPresent \
N        ROM_SysCtlPeripheralPresent
X#define MAP_SysCtlPeripheralPresent         ROM_SysCtlPeripheralPresent
N#else
S#define MAP_SysCtlPeripheralPresent \
S        SysCtlPeripheralPresent
X#define MAP_SysCtlPeripheralPresent         SysCtlPeripheralPresent
N#endif
N#ifdef ROM_SysCtlPeripheralReset
N#define MAP_SysCtlPeripheralReset \
N        ROM_SysCtlPeripheralReset
X#define MAP_SysCtlPeripheralReset         ROM_SysCtlPeripheralReset
N#else
S#define MAP_SysCtlPeripheralReset \
S        SysCtlPeripheralReset
X#define MAP_SysCtlPeripheralReset         SysCtlPeripheralReset
N#endif
N#ifdef ROM_SysCtlPeripheralEnable
N#define MAP_SysCtlPeripheralEnable \
N        ROM_SysCtlPeripheralEnable
X#define MAP_SysCtlPeripheralEnable         ROM_SysCtlPeripheralEnable
N#else
S#define MAP_SysCtlPeripheralEnable \
S        SysCtlPeripheralEnable
X#define MAP_SysCtlPeripheralEnable         SysCtlPeripheralEnable
N#endif
N#ifdef ROM_SysCtlPeripheralDisable
N#define MAP_SysCtlPeripheralDisable \
N        ROM_SysCtlPeripheralDisable
X#define MAP_SysCtlPeripheralDisable         ROM_SysCtlPeripheralDisable
N#else
S#define MAP_SysCtlPeripheralDisable \
S        SysCtlPeripheralDisable
X#define MAP_SysCtlPeripheralDisable         SysCtlPeripheralDisable
N#endif
N#ifdef ROM_SysCtlPeripheralSleepEnable
N#define MAP_SysCtlPeripheralSleepEnable \
N        ROM_SysCtlPeripheralSleepEnable
X#define MAP_SysCtlPeripheralSleepEnable         ROM_SysCtlPeripheralSleepEnable
N#else
S#define MAP_SysCtlPeripheralSleepEnable \
S        SysCtlPeripheralSleepEnable
X#define MAP_SysCtlPeripheralSleepEnable         SysCtlPeripheralSleepEnable
N#endif
N#ifdef ROM_SysCtlPeripheralSleepDisable
N#define MAP_SysCtlPeripheralSleepDisable \
N        ROM_SysCtlPeripheralSleepDisable
X#define MAP_SysCtlPeripheralSleepDisable         ROM_SysCtlPeripheralSleepDisable
N#else
S#define MAP_SysCtlPeripheralSleepDisable \
S        SysCtlPeripheralSleepDisable
X#define MAP_SysCtlPeripheralSleepDisable         SysCtlPeripheralSleepDisable
N#endif
N#ifdef ROM_SysCtlPeripheralDeepSleepEnable
N#define MAP_SysCtlPeripheralDeepSleepEnable \
N        ROM_SysCtlPeripheralDeepSleepEnable
X#define MAP_SysCtlPeripheralDeepSleepEnable         ROM_SysCtlPeripheralDeepSleepEnable
N#else
S#define MAP_SysCtlPeripheralDeepSleepEnable \
S        SysCtlPeripheralDeepSleepEnable
X#define MAP_SysCtlPeripheralDeepSleepEnable         SysCtlPeripheralDeepSleepEnable
N#endif
N#ifdef ROM_SysCtlPeripheralDeepSleepDisable
N#define MAP_SysCtlPeripheralDeepSleepDisable \
N        ROM_SysCtlPeripheralDeepSleepDisable
X#define MAP_SysCtlPeripheralDeepSleepDisable         ROM_SysCtlPeripheralDeepSleepDisable
N#else
S#define MAP_SysCtlPeripheralDeepSleepDisable \
S        SysCtlPeripheralDeepSleepDisable
X#define MAP_SysCtlPeripheralDeepSleepDisable         SysCtlPeripheralDeepSleepDisable
N#endif
N#ifdef ROM_SysCtlPeripheralClockGating
N#define MAP_SysCtlPeripheralClockGating \
N        ROM_SysCtlPeripheralClockGating
X#define MAP_SysCtlPeripheralClockGating         ROM_SysCtlPeripheralClockGating
N#else
S#define MAP_SysCtlPeripheralClockGating \
S        SysCtlPeripheralClockGating
X#define MAP_SysCtlPeripheralClockGating         SysCtlPeripheralClockGating
N#endif
N#ifdef ROM_SysCtlIntEnable
N#define MAP_SysCtlIntEnable \
N        ROM_SysCtlIntEnable
X#define MAP_SysCtlIntEnable         ROM_SysCtlIntEnable
N#else
S#define MAP_SysCtlIntEnable \
S        SysCtlIntEnable
X#define MAP_SysCtlIntEnable         SysCtlIntEnable
N#endif
N#ifdef ROM_SysCtlIntDisable
N#define MAP_SysCtlIntDisable \
N        ROM_SysCtlIntDisable
X#define MAP_SysCtlIntDisable         ROM_SysCtlIntDisable
N#else
S#define MAP_SysCtlIntDisable \
S        SysCtlIntDisable
X#define MAP_SysCtlIntDisable         SysCtlIntDisable
N#endif
N#ifdef ROM_SysCtlIntClear
N#define MAP_SysCtlIntClear \
N        ROM_SysCtlIntClear
X#define MAP_SysCtlIntClear         ROM_SysCtlIntClear
N#else
S#define MAP_SysCtlIntClear \
S        SysCtlIntClear
X#define MAP_SysCtlIntClear         SysCtlIntClear
N#endif
N#ifdef ROM_SysCtlIntStatus
N#define MAP_SysCtlIntStatus \
N        ROM_SysCtlIntStatus
X#define MAP_SysCtlIntStatus         ROM_SysCtlIntStatus
N#else
S#define MAP_SysCtlIntStatus \
S        SysCtlIntStatus
X#define MAP_SysCtlIntStatus         SysCtlIntStatus
N#endif
N#ifdef ROM_SysCtlLDOSet
N#define MAP_SysCtlLDOSet \
N        ROM_SysCtlLDOSet
X#define MAP_SysCtlLDOSet         ROM_SysCtlLDOSet
N#else
S#define MAP_SysCtlLDOSet \
S        SysCtlLDOSet
X#define MAP_SysCtlLDOSet         SysCtlLDOSet
N#endif
N#ifdef ROM_SysCtlLDOGet
N#define MAP_SysCtlLDOGet \
N        ROM_SysCtlLDOGet
X#define MAP_SysCtlLDOGet         ROM_SysCtlLDOGet
N#else
S#define MAP_SysCtlLDOGet \
S        SysCtlLDOGet
X#define MAP_SysCtlLDOGet         SysCtlLDOGet
N#endif
N#ifdef ROM_SysCtlReset
N#define MAP_SysCtlReset \
N        ROM_SysCtlReset
X#define MAP_SysCtlReset         ROM_SysCtlReset
N#else
S#define MAP_SysCtlReset \
S        SysCtlReset
X#define MAP_SysCtlReset         SysCtlReset
N#endif
N#ifdef ROM_SysCtlDeepSleep
N#define MAP_SysCtlDeepSleep \
N        ROM_SysCtlDeepSleep
X#define MAP_SysCtlDeepSleep         ROM_SysCtlDeepSleep
N#else
S#define MAP_SysCtlDeepSleep \
S        SysCtlDeepSleep
X#define MAP_SysCtlDeepSleep         SysCtlDeepSleep
N#endif
N#ifdef ROM_SysCtlResetCauseGet
N#define MAP_SysCtlResetCauseGet \
N        ROM_SysCtlResetCauseGet
X#define MAP_SysCtlResetCauseGet         ROM_SysCtlResetCauseGet
N#else
S#define MAP_SysCtlResetCauseGet \
S        SysCtlResetCauseGet
X#define MAP_SysCtlResetCauseGet         SysCtlResetCauseGet
N#endif
N#ifdef ROM_SysCtlResetCauseClear
N#define MAP_SysCtlResetCauseClear \
N        ROM_SysCtlResetCauseClear
X#define MAP_SysCtlResetCauseClear         ROM_SysCtlResetCauseClear
N#else
S#define MAP_SysCtlResetCauseClear \
S        SysCtlResetCauseClear
X#define MAP_SysCtlResetCauseClear         SysCtlResetCauseClear
N#endif
N#ifdef ROM_SysCtlClockSet
N#define MAP_SysCtlClockSet \
N        ROM_SysCtlClockSet
X#define MAP_SysCtlClockSet         ROM_SysCtlClockSet
N#else
S#define MAP_SysCtlClockSet \
S        SysCtlClockSet
X#define MAP_SysCtlClockSet         SysCtlClockSet
N#endif
N#ifdef ROM_SysCtlClockGet
N#define MAP_SysCtlClockGet \
N        ROM_SysCtlClockGet
X#define MAP_SysCtlClockGet         ROM_SysCtlClockGet
N#else
S#define MAP_SysCtlClockGet \
S        SysCtlClockGet
X#define MAP_SysCtlClockGet         SysCtlClockGet
N#endif
N#ifdef ROM_SysCtlPWMClockSet
N#define MAP_SysCtlPWMClockSet \
N        ROM_SysCtlPWMClockSet
X#define MAP_SysCtlPWMClockSet         ROM_SysCtlPWMClockSet
N#else
S#define MAP_SysCtlPWMClockSet \
S        SysCtlPWMClockSet
X#define MAP_SysCtlPWMClockSet         SysCtlPWMClockSet
N#endif
N#ifdef ROM_SysCtlPWMClockGet
N#define MAP_SysCtlPWMClockGet \
N        ROM_SysCtlPWMClockGet
X#define MAP_SysCtlPWMClockGet         ROM_SysCtlPWMClockGet
N#else
S#define MAP_SysCtlPWMClockGet \
S        SysCtlPWMClockGet
X#define MAP_SysCtlPWMClockGet         SysCtlPWMClockGet
N#endif
N#ifdef ROM_SysCtlADCSpeedSet
N#define MAP_SysCtlADCSpeedSet \
N        ROM_SysCtlADCSpeedSet
X#define MAP_SysCtlADCSpeedSet         ROM_SysCtlADCSpeedSet
N#else
S#define MAP_SysCtlADCSpeedSet \
S        SysCtlADCSpeedSet
X#define MAP_SysCtlADCSpeedSet         SysCtlADCSpeedSet
N#endif
N#ifdef ROM_SysCtlADCSpeedGet
N#define MAP_SysCtlADCSpeedGet \
N        ROM_SysCtlADCSpeedGet
X#define MAP_SysCtlADCSpeedGet         ROM_SysCtlADCSpeedGet
N#else
S#define MAP_SysCtlADCSpeedGet \
S        SysCtlADCSpeedGet
X#define MAP_SysCtlADCSpeedGet         SysCtlADCSpeedGet
N#endif
N#ifdef ROM_SysCtlGPIOAHBEnable
N#define MAP_SysCtlGPIOAHBEnable \
N        ROM_SysCtlGPIOAHBEnable
X#define MAP_SysCtlGPIOAHBEnable         ROM_SysCtlGPIOAHBEnable
N#else
S#define MAP_SysCtlGPIOAHBEnable \
S        SysCtlGPIOAHBEnable
X#define MAP_SysCtlGPIOAHBEnable         SysCtlGPIOAHBEnable
N#endif
N#ifdef ROM_SysCtlGPIOAHBDisable
N#define MAP_SysCtlGPIOAHBDisable \
N        ROM_SysCtlGPIOAHBDisable
X#define MAP_SysCtlGPIOAHBDisable         ROM_SysCtlGPIOAHBDisable
N#else
S#define MAP_SysCtlGPIOAHBDisable \
S        SysCtlGPIOAHBDisable
X#define MAP_SysCtlGPIOAHBDisable         SysCtlGPIOAHBDisable
N#endif
N#ifdef ROM_SysCtlUSBPLLEnable
N#define MAP_SysCtlUSBPLLEnable \
N        ROM_SysCtlUSBPLLEnable
X#define MAP_SysCtlUSBPLLEnable         ROM_SysCtlUSBPLLEnable
N#else
S#define MAP_SysCtlUSBPLLEnable \
S        SysCtlUSBPLLEnable
X#define MAP_SysCtlUSBPLLEnable         SysCtlUSBPLLEnable
N#endif
N#ifdef ROM_SysCtlUSBPLLDisable
N#define MAP_SysCtlUSBPLLDisable \
N        ROM_SysCtlUSBPLLDisable
X#define MAP_SysCtlUSBPLLDisable         ROM_SysCtlUSBPLLDisable
N#else
S#define MAP_SysCtlUSBPLLDisable \
S        SysCtlUSBPLLDisable
X#define MAP_SysCtlUSBPLLDisable         SysCtlUSBPLLDisable
N#endif
N#ifdef ROM_SysCtlI2SMClkSet
S#define MAP_SysCtlI2SMClkSet \
S        ROM_SysCtlI2SMClkSet
X#define MAP_SysCtlI2SMClkSet         ROM_SysCtlI2SMClkSet
N#else
N#define MAP_SysCtlI2SMClkSet \
N        SysCtlI2SMClkSet
X#define MAP_SysCtlI2SMClkSet         SysCtlI2SMClkSet
N#endif
N#ifdef ROM_SysCtlDelay
S#define MAP_SysCtlDelay \
S        ROM_SysCtlDelay
X#define MAP_SysCtlDelay         ROM_SysCtlDelay
N#else
N#define MAP_SysCtlDelay \
N        SysCtlDelay
X#define MAP_SysCtlDelay         SysCtlDelay
N#endif
N#ifdef ROM_SysCtlPeripheralReady
S#define MAP_SysCtlPeripheralReady \
S        ROM_SysCtlPeripheralReady
X#define MAP_SysCtlPeripheralReady         ROM_SysCtlPeripheralReady
N#else
N#define MAP_SysCtlPeripheralReady \
N        SysCtlPeripheralReady
X#define MAP_SysCtlPeripheralReady         SysCtlPeripheralReady
N#endif
N#ifdef ROM_SysCtlPeripheralPowerOn
S#define MAP_SysCtlPeripheralPowerOn \
S        ROM_SysCtlPeripheralPowerOn
X#define MAP_SysCtlPeripheralPowerOn         ROM_SysCtlPeripheralPowerOn
N#else
N#define MAP_SysCtlPeripheralPowerOn \
N        SysCtlPeripheralPowerOn
X#define MAP_SysCtlPeripheralPowerOn         SysCtlPeripheralPowerOn
N#endif
N#ifdef ROM_SysCtlPeripheralPowerOff
S#define MAP_SysCtlPeripheralPowerOff \
S        ROM_SysCtlPeripheralPowerOff
X#define MAP_SysCtlPeripheralPowerOff         ROM_SysCtlPeripheralPowerOff
N#else
N#define MAP_SysCtlPeripheralPowerOff \
N        SysCtlPeripheralPowerOff
X#define MAP_SysCtlPeripheralPowerOff         SysCtlPeripheralPowerOff
N#endif
N#ifdef ROM_SysCtlMOSCConfigSet
S#define MAP_SysCtlMOSCConfigSet \
S        ROM_SysCtlMOSCConfigSet
X#define MAP_SysCtlMOSCConfigSet         ROM_SysCtlMOSCConfigSet
N#else
N#define MAP_SysCtlMOSCConfigSet \
N        SysCtlMOSCConfigSet
X#define MAP_SysCtlMOSCConfigSet         SysCtlMOSCConfigSet
N#endif
N#ifdef ROM_SysCtlPIOSCCalibrate
S#define MAP_SysCtlPIOSCCalibrate \
S        ROM_SysCtlPIOSCCalibrate
X#define MAP_SysCtlPIOSCCalibrate         ROM_SysCtlPIOSCCalibrate
N#else
N#define MAP_SysCtlPIOSCCalibrate \
N        SysCtlPIOSCCalibrate
X#define MAP_SysCtlPIOSCCalibrate         SysCtlPIOSCCalibrate
N#endif
N#ifdef ROM_SysCtlDeepSleepClockSet
S#define MAP_SysCtlDeepSleepClockSet \
S        ROM_SysCtlDeepSleepClockSet
X#define MAP_SysCtlDeepSleepClockSet         ROM_SysCtlDeepSleepClockSet
N#else
N#define MAP_SysCtlDeepSleepClockSet \
N        SysCtlDeepSleepClockSet
X#define MAP_SysCtlDeepSleepClockSet         SysCtlDeepSleepClockSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SysExc API.
N//
N//*****************************************************************************
N#ifdef ROM_SysExcIntStatus
S#define MAP_SysExcIntStatus \
S        ROM_SysExcIntStatus
X#define MAP_SysExcIntStatus         ROM_SysExcIntStatus
N#else
N#define MAP_SysExcIntStatus \
N        SysExcIntStatus
X#define MAP_SysExcIntStatus         SysExcIntStatus
N#endif
N#ifdef ROM_SysExcIntClear
S#define MAP_SysExcIntClear \
S        ROM_SysExcIntClear
X#define MAP_SysExcIntClear         ROM_SysExcIntClear
N#else
N#define MAP_SysExcIntClear \
N        SysExcIntClear
X#define MAP_SysExcIntClear         SysExcIntClear
N#endif
N#ifdef ROM_SysExcIntDisable
S#define MAP_SysExcIntDisable \
S        ROM_SysExcIntDisable
X#define MAP_SysExcIntDisable         ROM_SysExcIntDisable
N#else
N#define MAP_SysExcIntDisable \
N        SysExcIntDisable
X#define MAP_SysExcIntDisable         SysExcIntDisable
N#endif
N#ifdef ROM_SysExcIntEnable
S#define MAP_SysExcIntEnable \
S        ROM_SysExcIntEnable
X#define MAP_SysExcIntEnable         ROM_SysExcIntEnable
N#else
N#define MAP_SysExcIntEnable \
N        SysExcIntEnable
X#define MAP_SysExcIntEnable         SysExcIntEnable
N#endif
N
N//*****************************************************************************
N//
N// Macros for the SysTick API.
N//
N//*****************************************************************************
N#ifdef ROM_SysTickValueGet
N#define MAP_SysTickValueGet \
N        ROM_SysTickValueGet
X#define MAP_SysTickValueGet         ROM_SysTickValueGet
N#else
S#define MAP_SysTickValueGet \
S        SysTickValueGet
X#define MAP_SysTickValueGet         SysTickValueGet
N#endif
N#ifdef ROM_SysTickEnable
N#define MAP_SysTickEnable \
N        ROM_SysTickEnable
X#define MAP_SysTickEnable         ROM_SysTickEnable
N#else
S#define MAP_SysTickEnable \
S        SysTickEnable
X#define MAP_SysTickEnable         SysTickEnable
N#endif
N#ifdef ROM_SysTickDisable
N#define MAP_SysTickDisable \
N        ROM_SysTickDisable
X#define MAP_SysTickDisable         ROM_SysTickDisable
N#else
S#define MAP_SysTickDisable \
S        SysTickDisable
X#define MAP_SysTickDisable         SysTickDisable
N#endif
N#ifdef ROM_SysTickIntEnable
N#define MAP_SysTickIntEnable \
N        ROM_SysTickIntEnable
X#define MAP_SysTickIntEnable         ROM_SysTickIntEnable
N#else
S#define MAP_SysTickIntEnable \
S        SysTickIntEnable
X#define MAP_SysTickIntEnable         SysTickIntEnable
N#endif
N#ifdef ROM_SysTickIntDisable
N#define MAP_SysTickIntDisable \
N        ROM_SysTickIntDisable
X#define MAP_SysTickIntDisable         ROM_SysTickIntDisable
N#else
S#define MAP_SysTickIntDisable \
S        SysTickIntDisable
X#define MAP_SysTickIntDisable         SysTickIntDisable
N#endif
N#ifdef ROM_SysTickPeriodSet
N#define MAP_SysTickPeriodSet \
N        ROM_SysTickPeriodSet
X#define MAP_SysTickPeriodSet         ROM_SysTickPeriodSet
N#else
S#define MAP_SysTickPeriodSet \
S        SysTickPeriodSet
X#define MAP_SysTickPeriodSet         SysTickPeriodSet
N#endif
N#ifdef ROM_SysTickPeriodGet
N#define MAP_SysTickPeriodGet \
N        ROM_SysTickPeriodGet
X#define MAP_SysTickPeriodGet         ROM_SysTickPeriodGet
N#else
S#define MAP_SysTickPeriodGet \
S        SysTickPeriodGet
X#define MAP_SysTickPeriodGet         SysTickPeriodGet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Timer API.
N//
N//*****************************************************************************
N#ifdef ROM_TimerIntClear
N#define MAP_TimerIntClear \
N        ROM_TimerIntClear
X#define MAP_TimerIntClear         ROM_TimerIntClear
N#else
S#define MAP_TimerIntClear \
S        TimerIntClear
X#define MAP_TimerIntClear         TimerIntClear
N#endif
N#ifdef ROM_TimerEnable
N#define MAP_TimerEnable \
N        ROM_TimerEnable
X#define MAP_TimerEnable         ROM_TimerEnable
N#else
S#define MAP_TimerEnable \
S        TimerEnable
X#define MAP_TimerEnable         TimerEnable
N#endif
N#ifdef ROM_TimerDisable
N#define MAP_TimerDisable \
N        ROM_TimerDisable
X#define MAP_TimerDisable         ROM_TimerDisable
N#else
S#define MAP_TimerDisable \
S        TimerDisable
X#define MAP_TimerDisable         TimerDisable
N#endif
N#ifdef ROM_TimerConfigure
N#define MAP_TimerConfigure \
N        ROM_TimerConfigure
X#define MAP_TimerConfigure         ROM_TimerConfigure
N#else
S#define MAP_TimerConfigure \
S        TimerConfigure
X#define MAP_TimerConfigure         TimerConfigure
N#endif
N#ifdef ROM_TimerControlLevel
N#define MAP_TimerControlLevel \
N        ROM_TimerControlLevel
X#define MAP_TimerControlLevel         ROM_TimerControlLevel
N#else
S#define MAP_TimerControlLevel \
S        TimerControlLevel
X#define MAP_TimerControlLevel         TimerControlLevel
N#endif
N#ifdef ROM_TimerControlTrigger
N#define MAP_TimerControlTrigger \
N        ROM_TimerControlTrigger
X#define MAP_TimerControlTrigger         ROM_TimerControlTrigger
N#else
S#define MAP_TimerControlTrigger \
S        TimerControlTrigger
X#define MAP_TimerControlTrigger         TimerControlTrigger
N#endif
N#ifdef ROM_TimerControlEvent
S#define MAP_TimerControlEvent \
S        ROM_TimerControlEvent
X#define MAP_TimerControlEvent         ROM_TimerControlEvent
N#else
N#define MAP_TimerControlEvent \
N        TimerControlEvent
X#define MAP_TimerControlEvent         TimerControlEvent
N#endif
N#ifdef ROM_TimerControlStall
N#define MAP_TimerControlStall \
N        ROM_TimerControlStall
X#define MAP_TimerControlStall         ROM_TimerControlStall
N#else
S#define MAP_TimerControlStall \
S        TimerControlStall
X#define MAP_TimerControlStall         TimerControlStall
N#endif
N#ifdef ROM_TimerRTCEnable
N#define MAP_TimerRTCEnable \
N        ROM_TimerRTCEnable
X#define MAP_TimerRTCEnable         ROM_TimerRTCEnable
N#else
S#define MAP_TimerRTCEnable \
S        TimerRTCEnable
X#define MAP_TimerRTCEnable         TimerRTCEnable
N#endif
N#ifdef ROM_TimerRTCDisable
N#define MAP_TimerRTCDisable \
N        ROM_TimerRTCDisable
X#define MAP_TimerRTCDisable         ROM_TimerRTCDisable
N#else
S#define MAP_TimerRTCDisable \
S        TimerRTCDisable
X#define MAP_TimerRTCDisable         TimerRTCDisable
N#endif
N#ifdef ROM_TimerPrescaleSet
N#define MAP_TimerPrescaleSet \
N        ROM_TimerPrescaleSet
X#define MAP_TimerPrescaleSet         ROM_TimerPrescaleSet
N#else
S#define MAP_TimerPrescaleSet \
S        TimerPrescaleSet
X#define MAP_TimerPrescaleSet         TimerPrescaleSet
N#endif
N#ifdef ROM_TimerPrescaleGet
N#define MAP_TimerPrescaleGet \
N        ROM_TimerPrescaleGet
X#define MAP_TimerPrescaleGet         ROM_TimerPrescaleGet
N#else
S#define MAP_TimerPrescaleGet \
S        TimerPrescaleGet
X#define MAP_TimerPrescaleGet         TimerPrescaleGet
N#endif
N#ifdef ROM_TimerPrescaleMatchSet
S#define MAP_TimerPrescaleMatchSet \
S        ROM_TimerPrescaleMatchSet
X#define MAP_TimerPrescaleMatchSet         ROM_TimerPrescaleMatchSet
N#else
N#define MAP_TimerPrescaleMatchSet \
N        TimerPrescaleMatchSet
X#define MAP_TimerPrescaleMatchSet         TimerPrescaleMatchSet
N#endif
N#ifdef ROM_TimerPrescaleMatchGet
S#define MAP_TimerPrescaleMatchGet \
S        ROM_TimerPrescaleMatchGet
X#define MAP_TimerPrescaleMatchGet         ROM_TimerPrescaleMatchGet
N#else
N#define MAP_TimerPrescaleMatchGet \
N        TimerPrescaleMatchGet
X#define MAP_TimerPrescaleMatchGet         TimerPrescaleMatchGet
N#endif
N#ifdef ROM_TimerLoadSet
N#define MAP_TimerLoadSet \
N        ROM_TimerLoadSet
X#define MAP_TimerLoadSet         ROM_TimerLoadSet
N#else
S#define MAP_TimerLoadSet \
S        TimerLoadSet
X#define MAP_TimerLoadSet         TimerLoadSet
N#endif
N#ifdef ROM_TimerLoadGet
N#define MAP_TimerLoadGet \
N        ROM_TimerLoadGet
X#define MAP_TimerLoadGet         ROM_TimerLoadGet
N#else
S#define MAP_TimerLoadGet \
S        TimerLoadGet
X#define MAP_TimerLoadGet         TimerLoadGet
N#endif
N#ifdef ROM_TimerValueGet
N#define MAP_TimerValueGet \
N        ROM_TimerValueGet
X#define MAP_TimerValueGet         ROM_TimerValueGet
N#else
S#define MAP_TimerValueGet \
S        TimerValueGet
X#define MAP_TimerValueGet         TimerValueGet
N#endif
N#ifdef ROM_TimerMatchSet
N#define MAP_TimerMatchSet \
N        ROM_TimerMatchSet
X#define MAP_TimerMatchSet         ROM_TimerMatchSet
N#else
S#define MAP_TimerMatchSet \
S        TimerMatchSet
X#define MAP_TimerMatchSet         TimerMatchSet
N#endif
N#ifdef ROM_TimerMatchGet
N#define MAP_TimerMatchGet \
N        ROM_TimerMatchGet
X#define MAP_TimerMatchGet         ROM_TimerMatchGet
N#else
S#define MAP_TimerMatchGet \
S        TimerMatchGet
X#define MAP_TimerMatchGet         TimerMatchGet
N#endif
N#ifdef ROM_TimerIntEnable
N#define MAP_TimerIntEnable \
N        ROM_TimerIntEnable
X#define MAP_TimerIntEnable         ROM_TimerIntEnable
N#else
S#define MAP_TimerIntEnable \
S        TimerIntEnable
X#define MAP_TimerIntEnable         TimerIntEnable
N#endif
N#ifdef ROM_TimerIntDisable
N#define MAP_TimerIntDisable \
N        ROM_TimerIntDisable
X#define MAP_TimerIntDisable         ROM_TimerIntDisable
N#else
S#define MAP_TimerIntDisable \
S        TimerIntDisable
X#define MAP_TimerIntDisable         TimerIntDisable
N#endif
N#ifdef ROM_TimerIntStatus
N#define MAP_TimerIntStatus \
N        ROM_TimerIntStatus
X#define MAP_TimerIntStatus         ROM_TimerIntStatus
N#else
S#define MAP_TimerIntStatus \
S        TimerIntStatus
X#define MAP_TimerIntStatus         TimerIntStatus
N#endif
N#ifdef ROM_TimerControlWaitOnTrigger
S#define MAP_TimerControlWaitOnTrigger \
S        ROM_TimerControlWaitOnTrigger
X#define MAP_TimerControlWaitOnTrigger         ROM_TimerControlWaitOnTrigger
N#else
N#define MAP_TimerControlWaitOnTrigger \
N        TimerControlWaitOnTrigger
X#define MAP_TimerControlWaitOnTrigger         TimerControlWaitOnTrigger
N#endif
N#ifdef ROM_TimerLoadSet64
S#define MAP_TimerLoadSet64 \
S        ROM_TimerLoadSet64
X#define MAP_TimerLoadSet64         ROM_TimerLoadSet64
N#else
N#define MAP_TimerLoadSet64 \
N        TimerLoadSet64
X#define MAP_TimerLoadSet64         TimerLoadSet64
N#endif
N#ifdef ROM_TimerLoadGet64
S#define MAP_TimerLoadGet64 \
S        ROM_TimerLoadGet64
X#define MAP_TimerLoadGet64         ROM_TimerLoadGet64
N#else
N#define MAP_TimerLoadGet64 \
N        TimerLoadGet64
X#define MAP_TimerLoadGet64         TimerLoadGet64
N#endif
N#ifdef ROM_TimerValueGet64
S#define MAP_TimerValueGet64 \
S        ROM_TimerValueGet64
X#define MAP_TimerValueGet64         ROM_TimerValueGet64
N#else
N#define MAP_TimerValueGet64 \
N        TimerValueGet64
X#define MAP_TimerValueGet64         TimerValueGet64
N#endif
N#ifdef ROM_TimerMatchSet64
S#define MAP_TimerMatchSet64 \
S        ROM_TimerMatchSet64
X#define MAP_TimerMatchSet64         ROM_TimerMatchSet64
N#else
N#define MAP_TimerMatchSet64 \
N        TimerMatchSet64
X#define MAP_TimerMatchSet64         TimerMatchSet64
N#endif
N#ifdef ROM_TimerMatchGet64
S#define MAP_TimerMatchGet64 \
S        ROM_TimerMatchGet64
X#define MAP_TimerMatchGet64         ROM_TimerMatchGet64
N#else
N#define MAP_TimerMatchGet64 \
N        TimerMatchGet64
X#define MAP_TimerMatchGet64         TimerMatchGet64
N#endif
N
N//*****************************************************************************
N//
N// Macros for the UART API.
N//
N//*****************************************************************************
N#ifdef ROM_UARTCharPut
N#define MAP_UARTCharPut \
N        ROM_UARTCharPut
X#define MAP_UARTCharPut         ROM_UARTCharPut
N#else
S#define MAP_UARTCharPut \
S        UARTCharPut
X#define MAP_UARTCharPut         UARTCharPut
N#endif
N#ifdef ROM_UARTParityModeSet
N#define MAP_UARTParityModeSet \
N        ROM_UARTParityModeSet
X#define MAP_UARTParityModeSet         ROM_UARTParityModeSet
N#else
S#define MAP_UARTParityModeSet \
S        UARTParityModeSet
X#define MAP_UARTParityModeSet         UARTParityModeSet
N#endif
N#ifdef ROM_UARTParityModeGet
N#define MAP_UARTParityModeGet \
N        ROM_UARTParityModeGet
X#define MAP_UARTParityModeGet         ROM_UARTParityModeGet
N#else
S#define MAP_UARTParityModeGet \
S        UARTParityModeGet
X#define MAP_UARTParityModeGet         UARTParityModeGet
N#endif
N#ifdef ROM_UARTFIFOLevelSet
N#define MAP_UARTFIFOLevelSet \
N        ROM_UARTFIFOLevelSet
X#define MAP_UARTFIFOLevelSet         ROM_UARTFIFOLevelSet
N#else
S#define MAP_UARTFIFOLevelSet \
S        UARTFIFOLevelSet
X#define MAP_UARTFIFOLevelSet         UARTFIFOLevelSet
N#endif
N#ifdef ROM_UARTFIFOLevelGet
N#define MAP_UARTFIFOLevelGet \
N        ROM_UARTFIFOLevelGet
X#define MAP_UARTFIFOLevelGet         ROM_UARTFIFOLevelGet
N#else
S#define MAP_UARTFIFOLevelGet \
S        UARTFIFOLevelGet
X#define MAP_UARTFIFOLevelGet         UARTFIFOLevelGet
N#endif
N#ifdef ROM_UARTConfigSetExpClk
N#define MAP_UARTConfigSetExpClk \
N        ROM_UARTConfigSetExpClk
X#define MAP_UARTConfigSetExpClk         ROM_UARTConfigSetExpClk
N#else
S#define MAP_UARTConfigSetExpClk \
S        UARTConfigSetExpClk
X#define MAP_UARTConfigSetExpClk         UARTConfigSetExpClk
N#endif
N#ifdef ROM_UARTConfigGetExpClk
N#define MAP_UARTConfigGetExpClk \
N        ROM_UARTConfigGetExpClk
X#define MAP_UARTConfigGetExpClk         ROM_UARTConfigGetExpClk
N#else
S#define MAP_UARTConfigGetExpClk \
S        UARTConfigGetExpClk
X#define MAP_UARTConfigGetExpClk         UARTConfigGetExpClk
N#endif
N#ifdef ROM_UARTEnable
N#define MAP_UARTEnable \
N        ROM_UARTEnable
X#define MAP_UARTEnable         ROM_UARTEnable
N#else
S#define MAP_UARTEnable \
S        UARTEnable
X#define MAP_UARTEnable         UARTEnable
N#endif
N#ifdef ROM_UARTDisable
N#define MAP_UARTDisable \
N        ROM_UARTDisable
X#define MAP_UARTDisable         ROM_UARTDisable
N#else
S#define MAP_UARTDisable \
S        UARTDisable
X#define MAP_UARTDisable         UARTDisable
N#endif
N#ifdef ROM_UARTEnableSIR
N#define MAP_UARTEnableSIR \
N        ROM_UARTEnableSIR
X#define MAP_UARTEnableSIR         ROM_UARTEnableSIR
N#else
S#define MAP_UARTEnableSIR \
S        UARTEnableSIR
X#define MAP_UARTEnableSIR         UARTEnableSIR
N#endif
N#ifdef ROM_UARTDisableSIR
N#define MAP_UARTDisableSIR \
N        ROM_UARTDisableSIR
X#define MAP_UARTDisableSIR         ROM_UARTDisableSIR
N#else
S#define MAP_UARTDisableSIR \
S        UARTDisableSIR
X#define MAP_UARTDisableSIR         UARTDisableSIR
N#endif
N#ifdef ROM_UARTCharsAvail
N#define MAP_UARTCharsAvail \
N        ROM_UARTCharsAvail
X#define MAP_UARTCharsAvail         ROM_UARTCharsAvail
N#else
S#define MAP_UARTCharsAvail \
S        UARTCharsAvail
X#define MAP_UARTCharsAvail         UARTCharsAvail
N#endif
N#ifdef ROM_UARTSpaceAvail
N#define MAP_UARTSpaceAvail \
N        ROM_UARTSpaceAvail
X#define MAP_UARTSpaceAvail         ROM_UARTSpaceAvail
N#else
S#define MAP_UARTSpaceAvail \
S        UARTSpaceAvail
X#define MAP_UARTSpaceAvail         UARTSpaceAvail
N#endif
N#ifdef ROM_UARTCharGetNonBlocking
N#define MAP_UARTCharGetNonBlocking \
N        ROM_UARTCharGetNonBlocking
X#define MAP_UARTCharGetNonBlocking         ROM_UARTCharGetNonBlocking
N#else
S#define MAP_UARTCharGetNonBlocking \
S        UARTCharGetNonBlocking
X#define MAP_UARTCharGetNonBlocking         UARTCharGetNonBlocking
N#endif
N#ifdef ROM_UARTCharGet
N#define MAP_UARTCharGet \
N        ROM_UARTCharGet
X#define MAP_UARTCharGet         ROM_UARTCharGet
N#else
S#define MAP_UARTCharGet \
S        UARTCharGet
X#define MAP_UARTCharGet         UARTCharGet
N#endif
N#ifdef ROM_UARTCharPutNonBlocking
N#define MAP_UARTCharPutNonBlocking \
N        ROM_UARTCharPutNonBlocking
X#define MAP_UARTCharPutNonBlocking         ROM_UARTCharPutNonBlocking
N#else
S#define MAP_UARTCharPutNonBlocking \
S        UARTCharPutNonBlocking
X#define MAP_UARTCharPutNonBlocking         UARTCharPutNonBlocking
N#endif
N#ifdef ROM_UARTBreakCtl
N#define MAP_UARTBreakCtl \
N        ROM_UARTBreakCtl
X#define MAP_UARTBreakCtl         ROM_UARTBreakCtl
N#else
S#define MAP_UARTBreakCtl \
S        UARTBreakCtl
X#define MAP_UARTBreakCtl         UARTBreakCtl
N#endif
N#ifdef ROM_UARTIntEnable
N#define MAP_UARTIntEnable \
N        ROM_UARTIntEnable
X#define MAP_UARTIntEnable         ROM_UARTIntEnable
N#else
S#define MAP_UARTIntEnable \
S        UARTIntEnable
X#define MAP_UARTIntEnable         UARTIntEnable
N#endif
N#ifdef ROM_UARTIntDisable
N#define MAP_UARTIntDisable \
N        ROM_UARTIntDisable
X#define MAP_UARTIntDisable         ROM_UARTIntDisable
N#else
S#define MAP_UARTIntDisable \
S        UARTIntDisable
X#define MAP_UARTIntDisable         UARTIntDisable
N#endif
N#ifdef ROM_UARTIntStatus
N#define MAP_UARTIntStatus \
N        ROM_UARTIntStatus
X#define MAP_UARTIntStatus         ROM_UARTIntStatus
N#else
S#define MAP_UARTIntStatus \
S        UARTIntStatus
X#define MAP_UARTIntStatus         UARTIntStatus
N#endif
N#ifdef ROM_UARTIntClear
N#define MAP_UARTIntClear \
N        ROM_UARTIntClear
X#define MAP_UARTIntClear         ROM_UARTIntClear
N#else
S#define MAP_UARTIntClear \
S        UARTIntClear
X#define MAP_UARTIntClear         UARTIntClear
N#endif
N#ifdef ROM_UARTDMAEnable
N#define MAP_UARTDMAEnable \
N        ROM_UARTDMAEnable
X#define MAP_UARTDMAEnable         ROM_UARTDMAEnable
N#else
S#define MAP_UARTDMAEnable \
S        UARTDMAEnable
X#define MAP_UARTDMAEnable         UARTDMAEnable
N#endif
N#ifdef ROM_UARTDMADisable
N#define MAP_UARTDMADisable \
N        ROM_UARTDMADisable
X#define MAP_UARTDMADisable         ROM_UARTDMADisable
N#else
S#define MAP_UARTDMADisable \
S        UARTDMADisable
X#define MAP_UARTDMADisable         UARTDMADisable
N#endif
N#ifdef ROM_UARTFIFOEnable
S#define MAP_UARTFIFOEnable \
S        ROM_UARTFIFOEnable
X#define MAP_UARTFIFOEnable         ROM_UARTFIFOEnable
N#else
N#define MAP_UARTFIFOEnable \
N        UARTFIFOEnable
X#define MAP_UARTFIFOEnable         UARTFIFOEnable
N#endif
N#ifdef ROM_UARTFIFODisable
S#define MAP_UARTFIFODisable \
S        ROM_UARTFIFODisable
X#define MAP_UARTFIFODisable         ROM_UARTFIFODisable
N#else
N#define MAP_UARTFIFODisable \
N        UARTFIFODisable
X#define MAP_UARTFIFODisable         UARTFIFODisable
N#endif
N#ifdef ROM_UARTBusy
S#define MAP_UARTBusy \
S        ROM_UARTBusy
X#define MAP_UARTBusy         ROM_UARTBusy
N#else
N#define MAP_UARTBusy \
N        UARTBusy
X#define MAP_UARTBusy         UARTBusy
N#endif
N#ifdef ROM_UARTTxIntModeSet
S#define MAP_UARTTxIntModeSet \
S        ROM_UARTTxIntModeSet
X#define MAP_UARTTxIntModeSet         ROM_UARTTxIntModeSet
N#else
N#define MAP_UARTTxIntModeSet \
N        UARTTxIntModeSet
X#define MAP_UARTTxIntModeSet         UARTTxIntModeSet
N#endif
N#ifdef ROM_UARTTxIntModeGet
S#define MAP_UARTTxIntModeGet \
S        ROM_UARTTxIntModeGet
X#define MAP_UARTTxIntModeGet         ROM_UARTTxIntModeGet
N#else
N#define MAP_UARTTxIntModeGet \
N        UARTTxIntModeGet
X#define MAP_UARTTxIntModeGet         UARTTxIntModeGet
N#endif
N#ifdef ROM_UARTRxErrorGet
S#define MAP_UARTRxErrorGet \
S        ROM_UARTRxErrorGet
X#define MAP_UARTRxErrorGet         ROM_UARTRxErrorGet
N#else
N#define MAP_UARTRxErrorGet \
N        UARTRxErrorGet
X#define MAP_UARTRxErrorGet         UARTRxErrorGet
N#endif
N#ifdef ROM_UARTRxErrorClear
S#define MAP_UARTRxErrorClear \
S        ROM_UARTRxErrorClear
X#define MAP_UARTRxErrorClear         ROM_UARTRxErrorClear
N#else
N#define MAP_UARTRxErrorClear \
N        UARTRxErrorClear
X#define MAP_UARTRxErrorClear         UARTRxErrorClear
N#endif
N#ifdef ROM_UARTClockSourceSet
S#define MAP_UARTClockSourceSet \
S        ROM_UARTClockSourceSet
X#define MAP_UARTClockSourceSet         ROM_UARTClockSourceSet
N#else
N#define MAP_UARTClockSourceSet \
N        UARTClockSourceSet
X#define MAP_UARTClockSourceSet         UARTClockSourceSet
N#endif
N#ifdef ROM_UARTClockSourceGet
S#define MAP_UARTClockSourceGet \
S        ROM_UARTClockSourceGet
X#define MAP_UARTClockSourceGet         ROM_UARTClockSourceGet
N#else
N#define MAP_UARTClockSourceGet \
N        UARTClockSourceGet
X#define MAP_UARTClockSourceGet         UARTClockSourceGet
N#endif
N#ifdef ROM_UART9BitEnable
S#define MAP_UART9BitEnable \
S        ROM_UART9BitEnable
X#define MAP_UART9BitEnable         ROM_UART9BitEnable
N#else
N#define MAP_UART9BitEnable \
N        UART9BitEnable
X#define MAP_UART9BitEnable         UART9BitEnable
N#endif
N#ifdef ROM_UART9BitDisable
S#define MAP_UART9BitDisable \
S        ROM_UART9BitDisable
X#define MAP_UART9BitDisable         ROM_UART9BitDisable
N#else
N#define MAP_UART9BitDisable \
N        UART9BitDisable
X#define MAP_UART9BitDisable         UART9BitDisable
N#endif
N#ifdef ROM_UART9BitAddrSet
S#define MAP_UART9BitAddrSet \
S        ROM_UART9BitAddrSet
X#define MAP_UART9BitAddrSet         ROM_UART9BitAddrSet
N#else
N#define MAP_UART9BitAddrSet \
N        UART9BitAddrSet
X#define MAP_UART9BitAddrSet         UART9BitAddrSet
N#endif
N#ifdef ROM_UART9BitAddrSend
S#define MAP_UART9BitAddrSend \
S        ROM_UART9BitAddrSend
X#define MAP_UART9BitAddrSend         ROM_UART9BitAddrSend
N#else
N#define MAP_UART9BitAddrSend \
N        UART9BitAddrSend
X#define MAP_UART9BitAddrSend         UART9BitAddrSend
N#endif
N
N//*****************************************************************************
N//
N// Macros for the uDMA API.
N//
N//*****************************************************************************
N#ifdef ROM_uDMAChannelTransferSet
N#define MAP_uDMAChannelTransferSet \
N        ROM_uDMAChannelTransferSet
X#define MAP_uDMAChannelTransferSet         ROM_uDMAChannelTransferSet
N#else
S#define MAP_uDMAChannelTransferSet \
S        uDMAChannelTransferSet
X#define MAP_uDMAChannelTransferSet         uDMAChannelTransferSet
N#endif
N#ifdef ROM_uDMAEnable
N#define MAP_uDMAEnable \
N        ROM_uDMAEnable
X#define MAP_uDMAEnable         ROM_uDMAEnable
N#else
S#define MAP_uDMAEnable \
S        uDMAEnable
X#define MAP_uDMAEnable         uDMAEnable
N#endif
N#ifdef ROM_uDMADisable
N#define MAP_uDMADisable \
N        ROM_uDMADisable
X#define MAP_uDMADisable         ROM_uDMADisable
N#else
S#define MAP_uDMADisable \
S        uDMADisable
X#define MAP_uDMADisable         uDMADisable
N#endif
N#ifdef ROM_uDMAErrorStatusGet
N#define MAP_uDMAErrorStatusGet \
N        ROM_uDMAErrorStatusGet
X#define MAP_uDMAErrorStatusGet         ROM_uDMAErrorStatusGet
N#else
S#define MAP_uDMAErrorStatusGet \
S        uDMAErrorStatusGet
X#define MAP_uDMAErrorStatusGet         uDMAErrorStatusGet
N#endif
N#ifdef ROM_uDMAErrorStatusClear
N#define MAP_uDMAErrorStatusClear \
N        ROM_uDMAErrorStatusClear
X#define MAP_uDMAErrorStatusClear         ROM_uDMAErrorStatusClear
N#else
S#define MAP_uDMAErrorStatusClear \
S        uDMAErrorStatusClear
X#define MAP_uDMAErrorStatusClear         uDMAErrorStatusClear
N#endif
N#ifdef ROM_uDMAChannelEnable
N#define MAP_uDMAChannelEnable \
N        ROM_uDMAChannelEnable
X#define MAP_uDMAChannelEnable         ROM_uDMAChannelEnable
N#else
S#define MAP_uDMAChannelEnable \
S        uDMAChannelEnable
X#define MAP_uDMAChannelEnable         uDMAChannelEnable
N#endif
N#ifdef ROM_uDMAChannelDisable
N#define MAP_uDMAChannelDisable \
N        ROM_uDMAChannelDisable
X#define MAP_uDMAChannelDisable         ROM_uDMAChannelDisable
N#else
S#define MAP_uDMAChannelDisable \
S        uDMAChannelDisable
X#define MAP_uDMAChannelDisable         uDMAChannelDisable
N#endif
N#ifdef ROM_uDMAChannelIsEnabled
N#define MAP_uDMAChannelIsEnabled \
N        ROM_uDMAChannelIsEnabled
X#define MAP_uDMAChannelIsEnabled         ROM_uDMAChannelIsEnabled
N#else
S#define MAP_uDMAChannelIsEnabled \
S        uDMAChannelIsEnabled
X#define MAP_uDMAChannelIsEnabled         uDMAChannelIsEnabled
N#endif
N#ifdef ROM_uDMAControlBaseSet
N#define MAP_uDMAControlBaseSet \
N        ROM_uDMAControlBaseSet
X#define MAP_uDMAControlBaseSet         ROM_uDMAControlBaseSet
N#else
S#define MAP_uDMAControlBaseSet \
S        uDMAControlBaseSet
X#define MAP_uDMAControlBaseSet         uDMAControlBaseSet
N#endif
N#ifdef ROM_uDMAControlBaseGet
N#define MAP_uDMAControlBaseGet \
N        ROM_uDMAControlBaseGet
X#define MAP_uDMAControlBaseGet         ROM_uDMAControlBaseGet
N#else
S#define MAP_uDMAControlBaseGet \
S        uDMAControlBaseGet
X#define MAP_uDMAControlBaseGet         uDMAControlBaseGet
N#endif
N#ifdef ROM_uDMAChannelRequest
N#define MAP_uDMAChannelRequest \
N        ROM_uDMAChannelRequest
X#define MAP_uDMAChannelRequest         ROM_uDMAChannelRequest
N#else
S#define MAP_uDMAChannelRequest \
S        uDMAChannelRequest
X#define MAP_uDMAChannelRequest         uDMAChannelRequest
N#endif
N#ifdef ROM_uDMAChannelAttributeEnable
N#define MAP_uDMAChannelAttributeEnable \
N        ROM_uDMAChannelAttributeEnable
X#define MAP_uDMAChannelAttributeEnable         ROM_uDMAChannelAttributeEnable
N#else
S#define MAP_uDMAChannelAttributeEnable \
S        uDMAChannelAttributeEnable
X#define MAP_uDMAChannelAttributeEnable         uDMAChannelAttributeEnable
N#endif
N#ifdef ROM_uDMAChannelAttributeDisable
N#define MAP_uDMAChannelAttributeDisable \
N        ROM_uDMAChannelAttributeDisable
X#define MAP_uDMAChannelAttributeDisable         ROM_uDMAChannelAttributeDisable
N#else
S#define MAP_uDMAChannelAttributeDisable \
S        uDMAChannelAttributeDisable
X#define MAP_uDMAChannelAttributeDisable         uDMAChannelAttributeDisable
N#endif
N#ifdef ROM_uDMAChannelAttributeGet
N#define MAP_uDMAChannelAttributeGet \
N        ROM_uDMAChannelAttributeGet
X#define MAP_uDMAChannelAttributeGet         ROM_uDMAChannelAttributeGet
N#else
S#define MAP_uDMAChannelAttributeGet \
S        uDMAChannelAttributeGet
X#define MAP_uDMAChannelAttributeGet         uDMAChannelAttributeGet
N#endif
N#ifdef ROM_uDMAChannelControlSet
N#define MAP_uDMAChannelControlSet \
N        ROM_uDMAChannelControlSet
X#define MAP_uDMAChannelControlSet         ROM_uDMAChannelControlSet
N#else
S#define MAP_uDMAChannelControlSet \
S        uDMAChannelControlSet
X#define MAP_uDMAChannelControlSet         uDMAChannelControlSet
N#endif
N#ifdef ROM_uDMAChannelSizeGet
S#define MAP_uDMAChannelSizeGet \
S        ROM_uDMAChannelSizeGet
X#define MAP_uDMAChannelSizeGet         ROM_uDMAChannelSizeGet
N#else
N#define MAP_uDMAChannelSizeGet \
N        uDMAChannelSizeGet
X#define MAP_uDMAChannelSizeGet         uDMAChannelSizeGet
N#endif
N#ifdef ROM_uDMAChannelModeGet
N#define MAP_uDMAChannelModeGet \
N        ROM_uDMAChannelModeGet
X#define MAP_uDMAChannelModeGet         ROM_uDMAChannelModeGet
N#else
S#define MAP_uDMAChannelModeGet \
S        uDMAChannelModeGet
X#define MAP_uDMAChannelModeGet         uDMAChannelModeGet
N#endif
N#ifdef ROM_uDMAChannelSelectSecondary
S#define MAP_uDMAChannelSelectSecondary \
S        ROM_uDMAChannelSelectSecondary
X#define MAP_uDMAChannelSelectSecondary         ROM_uDMAChannelSelectSecondary
N#else
N#define MAP_uDMAChannelSelectSecondary \
N        uDMAChannelSelectSecondary
X#define MAP_uDMAChannelSelectSecondary         uDMAChannelSelectSecondary
N#endif
N#ifdef ROM_uDMAChannelSelectDefault
S#define MAP_uDMAChannelSelectDefault \
S        ROM_uDMAChannelSelectDefault
X#define MAP_uDMAChannelSelectDefault         ROM_uDMAChannelSelectDefault
N#else
N#define MAP_uDMAChannelSelectDefault \
N        uDMAChannelSelectDefault
X#define MAP_uDMAChannelSelectDefault         uDMAChannelSelectDefault
N#endif
N#ifdef ROM_uDMAIntStatus
S#define MAP_uDMAIntStatus \
S        ROM_uDMAIntStatus
X#define MAP_uDMAIntStatus         ROM_uDMAIntStatus
N#else
N#define MAP_uDMAIntStatus \
N        uDMAIntStatus
X#define MAP_uDMAIntStatus         uDMAIntStatus
N#endif
N#ifdef ROM_uDMAIntClear
S#define MAP_uDMAIntClear \
S        ROM_uDMAIntClear
X#define MAP_uDMAIntClear         ROM_uDMAIntClear
N#else
N#define MAP_uDMAIntClear \
N        uDMAIntClear
X#define MAP_uDMAIntClear         uDMAIntClear
N#endif
N#ifdef ROM_uDMAControlAlternateBaseGet
S#define MAP_uDMAControlAlternateBaseGet \
S        ROM_uDMAControlAlternateBaseGet
X#define MAP_uDMAControlAlternateBaseGet         ROM_uDMAControlAlternateBaseGet
N#else
N#define MAP_uDMAControlAlternateBaseGet \
N        uDMAControlAlternateBaseGet
X#define MAP_uDMAControlAlternateBaseGet         uDMAControlAlternateBaseGet
N#endif
N#ifdef ROM_uDMAChannelScatterGatherSet
S#define MAP_uDMAChannelScatterGatherSet \
S        ROM_uDMAChannelScatterGatherSet
X#define MAP_uDMAChannelScatterGatherSet         ROM_uDMAChannelScatterGatherSet
N#else
N#define MAP_uDMAChannelScatterGatherSet \
N        uDMAChannelScatterGatherSet
X#define MAP_uDMAChannelScatterGatherSet         uDMAChannelScatterGatherSet
N#endif
N#ifdef ROM_uDMAChannelAssign
S#define MAP_uDMAChannelAssign \
S        ROM_uDMAChannelAssign
X#define MAP_uDMAChannelAssign         ROM_uDMAChannelAssign
N#else
N#define MAP_uDMAChannelAssign \
N        uDMAChannelAssign
X#define MAP_uDMAChannelAssign         uDMAChannelAssign
N#endif
N
N//*****************************************************************************
N//
N// Macros for the USB API.
N//
N//*****************************************************************************
N#ifdef ROM_USBIntStatus
N#define MAP_USBIntStatus \
N        ROM_USBIntStatus
X#define MAP_USBIntStatus         ROM_USBIntStatus
N#else
S#define MAP_USBIntStatus \
S        USBIntStatus
X#define MAP_USBIntStatus         USBIntStatus
N#endif
N#ifdef ROM_USBDevAddrGet
N#define MAP_USBDevAddrGet \
N        ROM_USBDevAddrGet
X#define MAP_USBDevAddrGet         ROM_USBDevAddrGet
N#else
S#define MAP_USBDevAddrGet \
S        USBDevAddrGet
X#define MAP_USBDevAddrGet         USBDevAddrGet
N#endif
N#ifdef ROM_USBDevAddrSet
N#define MAP_USBDevAddrSet \
N        ROM_USBDevAddrSet
X#define MAP_USBDevAddrSet         ROM_USBDevAddrSet
N#else
S#define MAP_USBDevAddrSet \
S        USBDevAddrSet
X#define MAP_USBDevAddrSet         USBDevAddrSet
N#endif
N#ifdef ROM_USBDevConnect
N#define MAP_USBDevConnect \
N        ROM_USBDevConnect
X#define MAP_USBDevConnect         ROM_USBDevConnect
N#else
S#define MAP_USBDevConnect \
S        USBDevConnect
X#define MAP_USBDevConnect         USBDevConnect
N#endif
N#ifdef ROM_USBDevDisconnect
N#define MAP_USBDevDisconnect \
N        ROM_USBDevDisconnect
X#define MAP_USBDevDisconnect         ROM_USBDevDisconnect
N#else
S#define MAP_USBDevDisconnect \
S        USBDevDisconnect
X#define MAP_USBDevDisconnect         USBDevDisconnect
N#endif
N#ifdef ROM_USBDevEndpointConfigSet
N#define MAP_USBDevEndpointConfigSet \
N        ROM_USBDevEndpointConfigSet
X#define MAP_USBDevEndpointConfigSet         ROM_USBDevEndpointConfigSet
N#else
S#define MAP_USBDevEndpointConfigSet \
S        USBDevEndpointConfigSet
X#define MAP_USBDevEndpointConfigSet         USBDevEndpointConfigSet
N#endif
N#ifdef ROM_USBDevEndpointDataAck
N#define MAP_USBDevEndpointDataAck \
N        ROM_USBDevEndpointDataAck
X#define MAP_USBDevEndpointDataAck         ROM_USBDevEndpointDataAck
N#else
S#define MAP_USBDevEndpointDataAck \
S        USBDevEndpointDataAck
X#define MAP_USBDevEndpointDataAck         USBDevEndpointDataAck
N#endif
N#ifdef ROM_USBDevEndpointStall
N#define MAP_USBDevEndpointStall \
N        ROM_USBDevEndpointStall
X#define MAP_USBDevEndpointStall         ROM_USBDevEndpointStall
N#else
S#define MAP_USBDevEndpointStall \
S        USBDevEndpointStall
X#define MAP_USBDevEndpointStall         USBDevEndpointStall
N#endif
N#ifdef ROM_USBDevEndpointStallClear
S#define MAP_USBDevEndpointStallClear \
S        ROM_USBDevEndpointStallClear
X#define MAP_USBDevEndpointStallClear         ROM_USBDevEndpointStallClear
N#else
N#define MAP_USBDevEndpointStallClear \
N        USBDevEndpointStallClear
X#define MAP_USBDevEndpointStallClear         USBDevEndpointStallClear
N#endif
N#ifdef ROM_USBDevEndpointStatusClear
N#define MAP_USBDevEndpointStatusClear \
N        ROM_USBDevEndpointStatusClear
X#define MAP_USBDevEndpointStatusClear         ROM_USBDevEndpointStatusClear
N#else
S#define MAP_USBDevEndpointStatusClear \
S        USBDevEndpointStatusClear
X#define MAP_USBDevEndpointStatusClear         USBDevEndpointStatusClear
N#endif
N#ifdef ROM_USBEndpointDataGet
N#define MAP_USBEndpointDataGet \
N        ROM_USBEndpointDataGet
X#define MAP_USBEndpointDataGet         ROM_USBEndpointDataGet
N#else
S#define MAP_USBEndpointDataGet \
S        USBEndpointDataGet
X#define MAP_USBEndpointDataGet         USBEndpointDataGet
N#endif
N#ifdef ROM_USBEndpointDataPut
N#define MAP_USBEndpointDataPut \
N        ROM_USBEndpointDataPut
X#define MAP_USBEndpointDataPut         ROM_USBEndpointDataPut
N#else
S#define MAP_USBEndpointDataPut \
S        USBEndpointDataPut
X#define MAP_USBEndpointDataPut         USBEndpointDataPut
N#endif
N#ifdef ROM_USBEndpointDataSend
N#define MAP_USBEndpointDataSend \
N        ROM_USBEndpointDataSend
X#define MAP_USBEndpointDataSend         ROM_USBEndpointDataSend
N#else
S#define MAP_USBEndpointDataSend \
S        USBEndpointDataSend
X#define MAP_USBEndpointDataSend         USBEndpointDataSend
N#endif
N#ifdef ROM_USBEndpointDataToggleClear
N#define MAP_USBEndpointDataToggleClear \
N        ROM_USBEndpointDataToggleClear
X#define MAP_USBEndpointDataToggleClear         ROM_USBEndpointDataToggleClear
N#else
S#define MAP_USBEndpointDataToggleClear \
S        USBEndpointDataToggleClear
X#define MAP_USBEndpointDataToggleClear         USBEndpointDataToggleClear
N#endif
N#ifdef ROM_USBEndpointStatus
N#define MAP_USBEndpointStatus \
N        ROM_USBEndpointStatus
X#define MAP_USBEndpointStatus         ROM_USBEndpointStatus
N#else
S#define MAP_USBEndpointStatus \
S        USBEndpointStatus
X#define MAP_USBEndpointStatus         USBEndpointStatus
N#endif
N#ifdef ROM_USBFIFOAddrGet
N#define MAP_USBFIFOAddrGet \
N        ROM_USBFIFOAddrGet
X#define MAP_USBFIFOAddrGet         ROM_USBFIFOAddrGet
N#else
S#define MAP_USBFIFOAddrGet \
S        USBFIFOAddrGet
X#define MAP_USBFIFOAddrGet         USBFIFOAddrGet
N#endif
N#ifdef ROM_USBFIFOConfigGet
N#define MAP_USBFIFOConfigGet \
N        ROM_USBFIFOConfigGet
X#define MAP_USBFIFOConfigGet         ROM_USBFIFOConfigGet
N#else
S#define MAP_USBFIFOConfigGet \
S        USBFIFOConfigGet
X#define MAP_USBFIFOConfigGet         USBFIFOConfigGet
N#endif
N#ifdef ROM_USBFIFOConfigSet
N#define MAP_USBFIFOConfigSet \
N        ROM_USBFIFOConfigSet
X#define MAP_USBFIFOConfigSet         ROM_USBFIFOConfigSet
N#else
S#define MAP_USBFIFOConfigSet \
S        USBFIFOConfigSet
X#define MAP_USBFIFOConfigSet         USBFIFOConfigSet
N#endif
N#ifdef ROM_USBFIFOFlush
S#define MAP_USBFIFOFlush \
S        ROM_USBFIFOFlush
X#define MAP_USBFIFOFlush         ROM_USBFIFOFlush
N#else
N#define MAP_USBFIFOFlush \
N        USBFIFOFlush
X#define MAP_USBFIFOFlush         USBFIFOFlush
N#endif
N#ifdef ROM_USBFrameNumberGet
N#define MAP_USBFrameNumberGet \
N        ROM_USBFrameNumberGet
X#define MAP_USBFrameNumberGet         ROM_USBFrameNumberGet
N#else
S#define MAP_USBFrameNumberGet \
S        USBFrameNumberGet
X#define MAP_USBFrameNumberGet         USBFrameNumberGet
N#endif
N#ifdef ROM_USBHostAddrGet
N#define MAP_USBHostAddrGet \
N        ROM_USBHostAddrGet
X#define MAP_USBHostAddrGet         ROM_USBHostAddrGet
N#else
S#define MAP_USBHostAddrGet \
S        USBHostAddrGet
X#define MAP_USBHostAddrGet         USBHostAddrGet
N#endif
N#ifdef ROM_USBHostAddrSet
N#define MAP_USBHostAddrSet \
N        ROM_USBHostAddrSet
X#define MAP_USBHostAddrSet         ROM_USBHostAddrSet
N#else
S#define MAP_USBHostAddrSet \
S        USBHostAddrSet
X#define MAP_USBHostAddrSet         USBHostAddrSet
N#endif
N#ifdef ROM_USBHostEndpointDataAck
N#define MAP_USBHostEndpointDataAck \
N        ROM_USBHostEndpointDataAck
X#define MAP_USBHostEndpointDataAck         ROM_USBHostEndpointDataAck
N#else
S#define MAP_USBHostEndpointDataAck \
S        USBHostEndpointDataAck
X#define MAP_USBHostEndpointDataAck         USBHostEndpointDataAck
N#endif
N#ifdef ROM_USBHostEndpointDataToggle
N#define MAP_USBHostEndpointDataToggle \
N        ROM_USBHostEndpointDataToggle
X#define MAP_USBHostEndpointDataToggle         ROM_USBHostEndpointDataToggle
N#else
S#define MAP_USBHostEndpointDataToggle \
S        USBHostEndpointDataToggle
X#define MAP_USBHostEndpointDataToggle         USBHostEndpointDataToggle
N#endif
N#ifdef ROM_USBHostEndpointStatusClear
N#define MAP_USBHostEndpointStatusClear \
N        ROM_USBHostEndpointStatusClear
X#define MAP_USBHostEndpointStatusClear         ROM_USBHostEndpointStatusClear
N#else
S#define MAP_USBHostEndpointStatusClear \
S        USBHostEndpointStatusClear
X#define MAP_USBHostEndpointStatusClear         USBHostEndpointStatusClear
N#endif
N#ifdef ROM_USBHostHubAddrGet
N#define MAP_USBHostHubAddrGet \
N        ROM_USBHostHubAddrGet
X#define MAP_USBHostHubAddrGet         ROM_USBHostHubAddrGet
N#else
S#define MAP_USBHostHubAddrGet \
S        USBHostHubAddrGet
X#define MAP_USBHostHubAddrGet         USBHostHubAddrGet
N#endif
N#ifdef ROM_USBHostHubAddrSet
N#define MAP_USBHostHubAddrSet \
N        ROM_USBHostHubAddrSet
X#define MAP_USBHostHubAddrSet         ROM_USBHostHubAddrSet
N#else
S#define MAP_USBHostHubAddrSet \
S        USBHostHubAddrSet
X#define MAP_USBHostHubAddrSet         USBHostHubAddrSet
N#endif
N#ifdef ROM_USBHostPwrDisable
N#define MAP_USBHostPwrDisable \
N        ROM_USBHostPwrDisable
X#define MAP_USBHostPwrDisable         ROM_USBHostPwrDisable
N#else
S#define MAP_USBHostPwrDisable \
S        USBHostPwrDisable
X#define MAP_USBHostPwrDisable         USBHostPwrDisable
N#endif
N#ifdef ROM_USBHostPwrEnable
N#define MAP_USBHostPwrEnable \
N        ROM_USBHostPwrEnable
X#define MAP_USBHostPwrEnable         ROM_USBHostPwrEnable
N#else
S#define MAP_USBHostPwrEnable \
S        USBHostPwrEnable
X#define MAP_USBHostPwrEnable         USBHostPwrEnable
N#endif
N#ifdef ROM_USBHostPwrConfig
N#define MAP_USBHostPwrConfig \
N        ROM_USBHostPwrConfig
X#define MAP_USBHostPwrConfig         ROM_USBHostPwrConfig
N#else
S#define MAP_USBHostPwrConfig \
S        USBHostPwrConfig
X#define MAP_USBHostPwrConfig         USBHostPwrConfig
N#endif
N#ifdef ROM_USBHostPwrFaultDisable
N#define MAP_USBHostPwrFaultDisable \
N        ROM_USBHostPwrFaultDisable
X#define MAP_USBHostPwrFaultDisable         ROM_USBHostPwrFaultDisable
N#else
S#define MAP_USBHostPwrFaultDisable \
S        USBHostPwrFaultDisable
X#define MAP_USBHostPwrFaultDisable         USBHostPwrFaultDisable
N#endif
N#ifdef ROM_USBHostPwrFaultEnable
N#define MAP_USBHostPwrFaultEnable \
N        ROM_USBHostPwrFaultEnable
X#define MAP_USBHostPwrFaultEnable         ROM_USBHostPwrFaultEnable
N#else
S#define MAP_USBHostPwrFaultEnable \
S        USBHostPwrFaultEnable
X#define MAP_USBHostPwrFaultEnable         USBHostPwrFaultEnable
N#endif
N#ifdef ROM_USBHostRequestIN
N#define MAP_USBHostRequestIN \
N        ROM_USBHostRequestIN
X#define MAP_USBHostRequestIN         ROM_USBHostRequestIN
N#else
S#define MAP_USBHostRequestIN \
S        USBHostRequestIN
X#define MAP_USBHostRequestIN         USBHostRequestIN
N#endif
N#ifdef ROM_USBHostRequestStatus
N#define MAP_USBHostRequestStatus \
N        ROM_USBHostRequestStatus
X#define MAP_USBHostRequestStatus         ROM_USBHostRequestStatus
N#else
S#define MAP_USBHostRequestStatus \
S        USBHostRequestStatus
X#define MAP_USBHostRequestStatus         USBHostRequestStatus
N#endif
N#ifdef ROM_USBHostReset
N#define MAP_USBHostReset \
N        ROM_USBHostReset
X#define MAP_USBHostReset         ROM_USBHostReset
N#else
S#define MAP_USBHostReset \
S        USBHostReset
X#define MAP_USBHostReset         USBHostReset
N#endif
N#ifdef ROM_USBHostResume
N#define MAP_USBHostResume \
N        ROM_USBHostResume
X#define MAP_USBHostResume         ROM_USBHostResume
N#else
S#define MAP_USBHostResume \
S        USBHostResume
X#define MAP_USBHostResume         USBHostResume
N#endif
N#ifdef ROM_USBHostSpeedGet
N#define MAP_USBHostSpeedGet \
N        ROM_USBHostSpeedGet
X#define MAP_USBHostSpeedGet         ROM_USBHostSpeedGet
N#else
S#define MAP_USBHostSpeedGet \
S        USBHostSpeedGet
X#define MAP_USBHostSpeedGet         USBHostSpeedGet
N#endif
N#ifdef ROM_USBHostSuspend
N#define MAP_USBHostSuspend \
N        ROM_USBHostSuspend
X#define MAP_USBHostSuspend         ROM_USBHostSuspend
N#else
S#define MAP_USBHostSuspend \
S        USBHostSuspend
X#define MAP_USBHostSuspend         USBHostSuspend
N#endif
N#ifdef ROM_USBIntDisable
N#define MAP_USBIntDisable \
N        ROM_USBIntDisable
X#define MAP_USBIntDisable         ROM_USBIntDisable
N#else
S#define MAP_USBIntDisable \
S        USBIntDisable
X#define MAP_USBIntDisable         USBIntDisable
N#endif
N#ifdef ROM_USBIntEnable
N#define MAP_USBIntEnable \
N        ROM_USBIntEnable
X#define MAP_USBIntEnable         ROM_USBIntEnable
N#else
S#define MAP_USBIntEnable \
S        USBIntEnable
X#define MAP_USBIntEnable         USBIntEnable
N#endif
N#ifdef ROM_USBDevEndpointConfigGet
S#define MAP_USBDevEndpointConfigGet \
S        ROM_USBDevEndpointConfigGet
X#define MAP_USBDevEndpointConfigGet         ROM_USBDevEndpointConfigGet
N#else
N#define MAP_USBDevEndpointConfigGet \
N        USBDevEndpointConfigGet
X#define MAP_USBDevEndpointConfigGet         USBDevEndpointConfigGet
N#endif
N#ifdef ROM_USBEndpointDMAEnable
S#define MAP_USBEndpointDMAEnable \
S        ROM_USBEndpointDMAEnable
X#define MAP_USBEndpointDMAEnable         ROM_USBEndpointDMAEnable
N#else
N#define MAP_USBEndpointDMAEnable \
N        USBEndpointDMAEnable
X#define MAP_USBEndpointDMAEnable         USBEndpointDMAEnable
N#endif
N#ifdef ROM_USBEndpointDMADisable
S#define MAP_USBEndpointDMADisable \
S        ROM_USBEndpointDMADisable
X#define MAP_USBEndpointDMADisable         ROM_USBEndpointDMADisable
N#else
N#define MAP_USBEndpointDMADisable \
N        USBEndpointDMADisable
X#define MAP_USBEndpointDMADisable         USBEndpointDMADisable
N#endif
N#ifdef ROM_USBEndpointDataAvail
S#define MAP_USBEndpointDataAvail \
S        ROM_USBEndpointDataAvail
X#define MAP_USBEndpointDataAvail         ROM_USBEndpointDataAvail
N#else
N#define MAP_USBEndpointDataAvail \
N        USBEndpointDataAvail
X#define MAP_USBEndpointDataAvail         USBEndpointDataAvail
N#endif
N#ifdef ROM_USBOTGHostRequest
S#define MAP_USBOTGHostRequest \
S        ROM_USBOTGHostRequest
X#define MAP_USBOTGHostRequest         ROM_USBOTGHostRequest
N#else
N#define MAP_USBOTGHostRequest \
N        USBOTGHostRequest
X#define MAP_USBOTGHostRequest         USBOTGHostRequest
N#endif
N#ifdef ROM_USBModeGet
S#define MAP_USBModeGet \
S        ROM_USBModeGet
X#define MAP_USBModeGet         ROM_USBModeGet
N#else
N#define MAP_USBModeGet \
N        USBModeGet
X#define MAP_USBModeGet         USBModeGet
N#endif
N#ifdef ROM_USBEndpointDMAChannel
S#define MAP_USBEndpointDMAChannel \
S        ROM_USBEndpointDMAChannel
X#define MAP_USBEndpointDMAChannel         ROM_USBEndpointDMAChannel
N#else
N#define MAP_USBEndpointDMAChannel \
N        USBEndpointDMAChannel
X#define MAP_USBEndpointDMAChannel         USBEndpointDMAChannel
N#endif
N#ifdef ROM_USBIntDisableControl
S#define MAP_USBIntDisableControl \
S        ROM_USBIntDisableControl
X#define MAP_USBIntDisableControl         ROM_USBIntDisableControl
N#else
N#define MAP_USBIntDisableControl \
N        USBIntDisableControl
X#define MAP_USBIntDisableControl         USBIntDisableControl
N#endif
N#ifdef ROM_USBIntEnableControl
S#define MAP_USBIntEnableControl \
S        ROM_USBIntEnableControl
X#define MAP_USBIntEnableControl         ROM_USBIntEnableControl
N#else
N#define MAP_USBIntEnableControl \
N        USBIntEnableControl
X#define MAP_USBIntEnableControl         USBIntEnableControl
N#endif
N#ifdef ROM_USBIntStatusControl
S#define MAP_USBIntStatusControl \
S        ROM_USBIntStatusControl
X#define MAP_USBIntStatusControl         ROM_USBIntStatusControl
N#else
N#define MAP_USBIntStatusControl \
N        USBIntStatusControl
X#define MAP_USBIntStatusControl         USBIntStatusControl
N#endif
N#ifdef ROM_USBIntDisableEndpoint
S#define MAP_USBIntDisableEndpoint \
S        ROM_USBIntDisableEndpoint
X#define MAP_USBIntDisableEndpoint         ROM_USBIntDisableEndpoint
N#else
N#define MAP_USBIntDisableEndpoint \
N        USBIntDisableEndpoint
X#define MAP_USBIntDisableEndpoint         USBIntDisableEndpoint
N#endif
N#ifdef ROM_USBIntEnableEndpoint
S#define MAP_USBIntEnableEndpoint \
S        ROM_USBIntEnableEndpoint
X#define MAP_USBIntEnableEndpoint         ROM_USBIntEnableEndpoint
N#else
N#define MAP_USBIntEnableEndpoint \
N        USBIntEnableEndpoint
X#define MAP_USBIntEnableEndpoint         USBIntEnableEndpoint
N#endif
N#ifdef ROM_USBIntStatusEndpoint
S#define MAP_USBIntStatusEndpoint \
S        ROM_USBIntStatusEndpoint
X#define MAP_USBIntStatusEndpoint         ROM_USBIntStatusEndpoint
N#else
N#define MAP_USBIntStatusEndpoint \
N        USBIntStatusEndpoint
X#define MAP_USBIntStatusEndpoint         USBIntStatusEndpoint
N#endif
N#ifdef ROM_USBHostMode
S#define MAP_USBHostMode \
S        ROM_USBHostMode
X#define MAP_USBHostMode         ROM_USBHostMode
N#else
N#define MAP_USBHostMode \
N        USBHostMode
X#define MAP_USBHostMode         USBHostMode
N#endif
N#ifdef ROM_USBDevMode
S#define MAP_USBDevMode \
S        ROM_USBDevMode
X#define MAP_USBDevMode         ROM_USBDevMode
N#else
N#define MAP_USBDevMode \
N        USBDevMode
X#define MAP_USBDevMode         USBDevMode
N#endif
N#ifdef ROM_USBPHYPowerOff
S#define MAP_USBPHYPowerOff \
S        ROM_USBPHYPowerOff
X#define MAP_USBPHYPowerOff         ROM_USBPHYPowerOff
N#else
N#define MAP_USBPHYPowerOff \
N        USBPHYPowerOff
X#define MAP_USBPHYPowerOff         USBPHYPowerOff
N#endif
N#ifdef ROM_USBPHYPowerOn
S#define MAP_USBPHYPowerOn \
S        ROM_USBPHYPowerOn
X#define MAP_USBPHYPowerOn         ROM_USBPHYPowerOn
N#else
N#define MAP_USBPHYPowerOn \
N        USBPHYPowerOn
X#define MAP_USBPHYPowerOn         USBPHYPowerOn
N#endif
N#ifdef ROM_USBOTGMode
S#define MAP_USBOTGMode \
S        ROM_USBOTGMode
X#define MAP_USBOTGMode         ROM_USBOTGMode
N#else
N#define MAP_USBOTGMode \
N        USBOTGMode
X#define MAP_USBOTGMode         USBOTGMode
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Watchdog API.
N//
N//*****************************************************************************
N#ifdef ROM_WatchdogIntClear
N#define MAP_WatchdogIntClear \
N        ROM_WatchdogIntClear
X#define MAP_WatchdogIntClear         ROM_WatchdogIntClear
N#else
S#define MAP_WatchdogIntClear \
S        WatchdogIntClear
X#define MAP_WatchdogIntClear         WatchdogIntClear
N#endif
N#ifdef ROM_WatchdogRunning
N#define MAP_WatchdogRunning \
N        ROM_WatchdogRunning
X#define MAP_WatchdogRunning         ROM_WatchdogRunning
N#else
S#define MAP_WatchdogRunning \
S        WatchdogRunning
X#define MAP_WatchdogRunning         WatchdogRunning
N#endif
N#ifdef ROM_WatchdogEnable
N#define MAP_WatchdogEnable \
N        ROM_WatchdogEnable
X#define MAP_WatchdogEnable         ROM_WatchdogEnable
N#else
S#define MAP_WatchdogEnable \
S        WatchdogEnable
X#define MAP_WatchdogEnable         WatchdogEnable
N#endif
N#ifdef ROM_WatchdogResetEnable
N#define MAP_WatchdogResetEnable \
N        ROM_WatchdogResetEnable
X#define MAP_WatchdogResetEnable         ROM_WatchdogResetEnable
N#else
S#define MAP_WatchdogResetEnable \
S        WatchdogResetEnable
X#define MAP_WatchdogResetEnable         WatchdogResetEnable
N#endif
N#ifdef ROM_WatchdogResetDisable
N#define MAP_WatchdogResetDisable \
N        ROM_WatchdogResetDisable
X#define MAP_WatchdogResetDisable         ROM_WatchdogResetDisable
N#else
S#define MAP_WatchdogResetDisable \
S        WatchdogResetDisable
X#define MAP_WatchdogResetDisable         WatchdogResetDisable
N#endif
N#ifdef ROM_WatchdogLock
N#define MAP_WatchdogLock \
N        ROM_WatchdogLock
X#define MAP_WatchdogLock         ROM_WatchdogLock
N#else
S#define MAP_WatchdogLock \
S        WatchdogLock
X#define MAP_WatchdogLock         WatchdogLock
N#endif
N#ifdef ROM_WatchdogUnlock
N#define MAP_WatchdogUnlock \
N        ROM_WatchdogUnlock
X#define MAP_WatchdogUnlock         ROM_WatchdogUnlock
N#else
S#define MAP_WatchdogUnlock \
S        WatchdogUnlock
X#define MAP_WatchdogUnlock         WatchdogUnlock
N#endif
N#ifdef ROM_WatchdogLockState
N#define MAP_WatchdogLockState \
N        ROM_WatchdogLockState
X#define MAP_WatchdogLockState         ROM_WatchdogLockState
N#else
S#define MAP_WatchdogLockState \
S        WatchdogLockState
X#define MAP_WatchdogLockState         WatchdogLockState
N#endif
N#ifdef ROM_WatchdogReloadSet
N#define MAP_WatchdogReloadSet \
N        ROM_WatchdogReloadSet
X#define MAP_WatchdogReloadSet         ROM_WatchdogReloadSet
N#else
S#define MAP_WatchdogReloadSet \
S        WatchdogReloadSet
X#define MAP_WatchdogReloadSet         WatchdogReloadSet
N#endif
N#ifdef ROM_WatchdogReloadGet
N#define MAP_WatchdogReloadGet \
N        ROM_WatchdogReloadGet
X#define MAP_WatchdogReloadGet         ROM_WatchdogReloadGet
N#else
S#define MAP_WatchdogReloadGet \
S        WatchdogReloadGet
X#define MAP_WatchdogReloadGet         WatchdogReloadGet
N#endif
N#ifdef ROM_WatchdogValueGet
N#define MAP_WatchdogValueGet \
N        ROM_WatchdogValueGet
X#define MAP_WatchdogValueGet         ROM_WatchdogValueGet
N#else
S#define MAP_WatchdogValueGet \
S        WatchdogValueGet
X#define MAP_WatchdogValueGet         WatchdogValueGet
N#endif
N#ifdef ROM_WatchdogIntEnable
N#define MAP_WatchdogIntEnable \
N        ROM_WatchdogIntEnable
X#define MAP_WatchdogIntEnable         ROM_WatchdogIntEnable
N#else
S#define MAP_WatchdogIntEnable \
S        WatchdogIntEnable
X#define MAP_WatchdogIntEnable         WatchdogIntEnable
N#endif
N#ifdef ROM_WatchdogIntStatus
N#define MAP_WatchdogIntStatus \
N        ROM_WatchdogIntStatus
X#define MAP_WatchdogIntStatus         ROM_WatchdogIntStatus
N#else
S#define MAP_WatchdogIntStatus \
S        WatchdogIntStatus
X#define MAP_WatchdogIntStatus         WatchdogIntStatus
N#endif
N#ifdef ROM_WatchdogStallEnable
N#define MAP_WatchdogStallEnable \
N        ROM_WatchdogStallEnable
X#define MAP_WatchdogStallEnable         ROM_WatchdogStallEnable
N#else
S#define MAP_WatchdogStallEnable \
S        WatchdogStallEnable
X#define MAP_WatchdogStallEnable         WatchdogStallEnable
N#endif
N#ifdef ROM_WatchdogStallDisable
N#define MAP_WatchdogStallDisable \
N        ROM_WatchdogStallDisable
X#define MAP_WatchdogStallDisable         ROM_WatchdogStallDisable
N#else
S#define MAP_WatchdogStallDisable \
S        WatchdogStallDisable
X#define MAP_WatchdogStallDisable         WatchdogStallDisable
N#endif
N#ifdef ROM_WatchdogIntTypeSet
S#define MAP_WatchdogIntTypeSet \
S        ROM_WatchdogIntTypeSet
X#define MAP_WatchdogIntTypeSet         ROM_WatchdogIntTypeSet
N#else
N#define MAP_WatchdogIntTypeSet \
N        WatchdogIntTypeSet
X#define MAP_WatchdogIntTypeSet         WatchdogIntTypeSet
N#endif
N
N//*****************************************************************************
N//
N// Macros for the Software API.
N//
N//*****************************************************************************
N#ifdef ROM_Crc16Array
N#define MAP_Crc16Array \
N        ROM_Crc16Array
X#define MAP_Crc16Array         ROM_Crc16Array
N#else
S#define MAP_Crc16Array \
S        Crc16Array
X#define MAP_Crc16Array         Crc16Array
N#endif
N#ifdef ROM_Crc16Array3
N#define MAP_Crc16Array3 \
N        ROM_Crc16Array3
X#define MAP_Crc16Array3         ROM_Crc16Array3
N#else
S#define MAP_Crc16Array3 \
S        Crc16Array3
X#define MAP_Crc16Array3         Crc16Array3
N#endif
N#ifdef ROM_Crc16
S#define MAP_Crc16 \
S        ROM_Crc16
X#define MAP_Crc16         ROM_Crc16
N#else
N#define MAP_Crc16 \
N        Crc16
X#define MAP_Crc16         Crc16
N#endif
N#ifdef ROM_Crc8CCITT
S#define MAP_Crc8CCITT \
S        ROM_Crc8CCITT
X#define MAP_Crc8CCITT         ROM_Crc8CCITT
N#else
N#define MAP_Crc8CCITT \
N        Crc8CCITT
X#define MAP_Crc8CCITT         Crc8CCITT
N#endif
N
N//*****************************************************************************
N//
N// Deprecated ROM functions.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N#define MAP_FlashIntGetStatus \
N        MAP_FlashIntStatus
X#define MAP_FlashIntGetStatus         MAP_FlashIntStatus
N#define MAP_USBDevEndpointConfig \
N        MAP_USBDevEndpointConfigSet
X#define MAP_USBDevEndpointConfig         MAP_USBDevEndpointConfigSet
N#define MAP_USBHostPwrFaultConfig \
N        MAP_USBHostPwrConfig
X#define MAP_USBHostPwrFaultConfig         MAP_USBHostPwrConfig
N#endif
N
N#endif // __ROM_MAP_H__
L 34 "..\..\..\utils\uartstdio.c" 2
N#include "driverlib/sysctl.h"
L 1 "..\..\..\driverlib/sysctl.h" 1
N//*****************************************************************************
N//
N// sysctl.h - Prototypes for the system control driver.
N//
N// Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __SYSCTL_H__
N#define __SYSCTL_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the
N// SysCtlPeripheralPresent(), SysCtlPeripheralEnable(),
N// SysCtlPeripheralDisable(), and SysCtlPeripheralReset() APIs as the
N// ulPeripheral parameter.  The peripherals in the fourth group (upper nibble
N// is 3) can only be used with the SysCtlPeripheralPresent() API.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N#define SYSCTL_PERIPH_WDOG      0x00000008  // Watchdog
N#endif
N#define SYSCTL_PERIPH_WDOG0     0x00000008  // Watchdog 0
N#define SYSCTL_PERIPH_HIBERNATE 0x00000040  // Hibernation module
N#ifndef DEPRECATED
N#define SYSCTL_PERIPH_ADC       0x00100001  // ADC
N#endif
N#define SYSCTL_PERIPH_ADC0      0x00100001  // ADC0
N#define SYSCTL_PERIPH_ADC1      0x00100002  // ADC1
N#ifndef DEPRECATED
N#define SYSCTL_PERIPH_PWM       0x00100010  // PWM
N#endif
N#define SYSCTL_PERIPH_PWM0      0x00100010  // PWM
N#define SYSCTL_PERIPH_CAN0      0x00100100  // CAN 0
N#define SYSCTL_PERIPH_CAN1      0x00100200  // CAN 1
N#define SYSCTL_PERIPH_CAN2      0x00100400  // CAN 2
N#define SYSCTL_PERIPH_WDOG1     0x00101000  // Watchdog 1
N#define SYSCTL_PERIPH_UART0     0x10000001  // UART 0
N#define SYSCTL_PERIPH_UART1     0x10000002  // UART 1
N#define SYSCTL_PERIPH_UART2     0x10000004  // UART 2
N#ifndef DEPRECATED
N#define SYSCTL_PERIPH_SSI       0x10000010  // SSI
N#endif
N#define SYSCTL_PERIPH_SSI0      0x10000010  // SSI 0
N#define SYSCTL_PERIPH_SSI1      0x10000020  // SSI 1
N#ifndef DEPRECATED
N#define SYSCTL_PERIPH_QEI       0x10000100  // QEI
N#endif
N#define SYSCTL_PERIPH_QEI0      0x10000100  // QEI 0
N#define SYSCTL_PERIPH_QEI1      0x10000200  // QEI 1
N#ifndef DEPRECATED
N#define SYSCTL_PERIPH_I2C       0x10001000  // I2C
N#endif
N#define SYSCTL_PERIPH_I2C0      0x10001000  // I2C 0
N#define SYSCTL_PERIPH_I2C1      0x10004000  // I2C 1
N#define SYSCTL_PERIPH_TIMER0    0x10100001  // Timer 0
N#define SYSCTL_PERIPH_TIMER1    0x10100002  // Timer 1
N#define SYSCTL_PERIPH_TIMER2    0x10100004  // Timer 2
N#define SYSCTL_PERIPH_TIMER3    0x10100008  // Timer 3
N#define SYSCTL_PERIPH_COMP0     0x10100100  // Analog comparator 0
N#define SYSCTL_PERIPH_COMP1     0x10100200  // Analog comparator 1
N#define SYSCTL_PERIPH_COMP2     0x10100400  // Analog comparator 2
N#define SYSCTL_PERIPH_I2S0      0x10101000  // I2S0
N#define SYSCTL_PERIPH_EPI0      0x10104000  // EPI0
N#define SYSCTL_PERIPH_GPIOA     0x20000001  // GPIO A
N#define SYSCTL_PERIPH_GPIOB     0x20000002  // GPIO B
N#define SYSCTL_PERIPH_GPIOC     0x20000004  // GPIO C
N#define SYSCTL_PERIPH_GPIOD     0x20000008  // GPIO D
N#define SYSCTL_PERIPH_GPIOE     0x20000010  // GPIO E
N#define SYSCTL_PERIPH_GPIOF     0x20000020  // GPIO F
N#define SYSCTL_PERIPH_GPIOG     0x20000040  // GPIO G
N#define SYSCTL_PERIPH_GPIOH     0x20000080  // GPIO H
N#define SYSCTL_PERIPH_GPIOJ     0x20000100  // GPIO J
N#define SYSCTL_PERIPH_UDMA      0x20002000  // uDMA
N#define SYSCTL_PERIPH_USB0      0x20100001  // USB0
N#define SYSCTL_PERIPH_ETH       0x20105000  // ETH
N#define SYSCTL_PERIPH_IEEE1588  0x20100100  // IEEE1588
N#define SYSCTL_PERIPH_PLL       0x30000010  // PLL
N#define SYSCTL_PERIPH_TEMP      0x30000020  // Temperature sensor
N#define SYSCTL_PERIPH_MPU       0x30000080  // Cortex M3 MPU
N#define SYSCTL_PERIPH2_ADC0     0xf0003800  // ADC 0
N#define SYSCTL_PERIPH2_ADC1     0xf0003801  // ADC 1
N#define SYSCTL_PERIPH2_CAN0     0xf0003400  // CAN 0
N#define SYSCTL_PERIPH2_CAN1     0xf0003401  // CAN 1
N#define SYSCTL_PERIPH2_CAN2     0xf0003402  // CAN 2
N#define SYSCTL_PERIPH2_COMP0    0xf0003c00  // Analog comparator 0
N#define SYSCTL_PERIPH_EEPROM0   0xf0005800  // EEPROM 0
N#define SYSCTL_PERIPH2_EPI0     0xf0001000  // EPI0
N#define SYSCTL_PERIPH2_ETH      0xf0002c00  // ETH
N#define SYSCTL_PERIPH_FAN0      0xf0005400  // FAN 0
N#define SYSCTL_PERIPH2_GPIOA    0xf0000800  // GPIO A
N#define SYSCTL_PERIPH2_GPIOB    0xf0000801  // GPIO B
N#define SYSCTL_PERIPH2_GPIOC    0xf0000802  // GPIO C
N#define SYSCTL_PERIPH2_GPIOD    0xf0000803  // GPIO D
N#define SYSCTL_PERIPH2_GPIOE    0xf0000804  // GPIO E
N#define SYSCTL_PERIPH2_GPIOF    0xf0000805  // GPIO F
N#define SYSCTL_PERIPH2_GPIOG    0xf0000806  // GPIO G
N#define SYSCTL_PERIPH2_GPIOH    0xf0000807  // GPIO H
N#define SYSCTL_PERIPH2_GPIOJ    0xf0000808  // GPIO J
N#define SYSCTL_PERIPH_GPIOK     0xf0000809  // GPIO K
N#define SYSCTL_PERIPH_GPIOL     0xf000080a  // GPIO L
N#define SYSCTL_PERIPH_GPIOM     0xf000080b  // GPIO M
N#define SYSCTL_PERIPH_GPION     0xf000080c  // GPIO N
N#define SYSCTL_PERIPH_GPIOP     0xf000080d  // GPIO P
N#define SYSCTL_PERIPH_GPIOQ     0xf000080e  // GPIO Q
N#define SYSCTL_PERIPH_GPIOR     0xf000080f  // GPIO R
N#define SYSCTL_PERIPH_GPIOS     0xf0000810  // GPIO S
N#define SYSCTL_PERIPH2_HIB      0xf0001400  // Hibernation module
N#define SYSCTL_PERIPH2_I2C0     0xf0002000  // I2C 0
N#define SYSCTL_PERIPH2_I2C1     0xf0002001  // I2C 1
N#define SYSCTL_PERIPH_I2C2      0xf0002002  // I2C 2
N#define SYSCTL_PERIPH_I2C3      0xf0002003  // I2C 3
N#define SYSCTL_PERIPH_I2C4      0xf0002004  // I2C 4
N#define SYSCTL_PERIPH_I2C5      0xf0002005  // I2C 5
N#define SYSCTL_PERIPH2_I2S0     0xf0002400  // I2S0
N#define SYSCTL_PERIPH_LPC0      0xf0004800  // LPC 0
N#define SYSCTL_PERIPH_PECI0     0xf0005000  // PECI 0
N#define SYSCTL_PERIPH2_PWM0     0xf0004000  // PWM 0
N#define SYSCTL_PERIPH_PWM1      0xf0004001  // PWM 1
N#define SYSCTL_PERIPH2_QEI0     0xf0004400  // QEI 0
N#define SYSCTL_PERIPH2_QEI1     0xf0004401  // QEI 1
N#define SYSCTL_PERIPH2_SSI0     0xf0001c00  // SSI 0
N#define SYSCTL_PERIPH2_SSI1     0xf0001c01  // SSI 1
N#define SYSCTL_PERIPH_SSI2      0xf0001c02  // SSI 2
N#define SYSCTL_PERIPH_SSI3      0xf0001c03  // SSI 3
N#define SYSCTL_PERIPH2_TIMER0   0xf0000400  // Timer 0
N#define SYSCTL_PERIPH2_TIMER1   0xf0000401  // Timer 1
N#define SYSCTL_PERIPH2_TIMER2   0xf0000402  // Timer 2
N#define SYSCTL_PERIPH2_TIMER3   0xf0000403  // Timer 3
N#define SYSCTL_PERIPH_TIMER4    0xf0000404  // Timer 4
N#define SYSCTL_PERIPH_TIMER5    0xf0000405  // Timer 5
N#define SYSCTL_PERIPH_WTIMER0   0xf0005c00  // Wide Timer 0
N#define SYSCTL_PERIPH_WTIMER1   0xf0005c01  // Wide Timer 1
N#define SYSCTL_PERIPH_WTIMER2   0xf0005c02  // Wide Timer 2
N#define SYSCTL_PERIPH_WTIMER3   0xf0005c03  // Wide Timer 3
N#define SYSCTL_PERIPH_WTIMER4   0xf0005c04  // Wide Timer 4
N#define SYSCTL_PERIPH_WTIMER5   0xf0005c05  // Wide Timer 5
N#define SYSCTL_PERIPH2_UART0    0xf0001800  // UART 0
N#define SYSCTL_PERIPH2_UART1    0xf0001801  // UART 1
N#define SYSCTL_PERIPH2_UART2    0xf0001802  // UART 2
N#define SYSCTL_PERIPH_UART3     0xf0001803  // UART 3
N#define SYSCTL_PERIPH_UART4     0xf0001804  // UART 4
N#define SYSCTL_PERIPH_UART5     0xf0001805  // UART 5
N#define SYSCTL_PERIPH_UART6     0xf0001806  // UART 6
N#define SYSCTL_PERIPH_UART7     0xf0001807  // UART 7
N#define SYSCTL_PERIPH2_UDMA     0xf0000c00  // uDMA
N#define SYSCTL_PERIPH2_USB0     0xf0002800  // USB 0
N#define SYSCTL_PERIPH2_WDOG0    0xf0000000  // Watchdog 0
N#define SYSCTL_PERIPH2_WDOG1    0xf0000001  // Watchdog 1
N#define SYSCTL_PERIPH2_HIBERNATE \
N                                0xf0001400  // Hibernate
X#define SYSCTL_PERIPH2_HIBERNATE                                 0xf0001400  
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPinPresent() API
N// as the ulPin parameter.
N//
N//*****************************************************************************
N#define SYSCTL_PIN_PWM0         0x00000001  // PWM0 pin
N#define SYSCTL_PIN_PWM1         0x00000002  // PWM1 pin
N#define SYSCTL_PIN_PWM2         0x00000004  // PWM2 pin
N#define SYSCTL_PIN_PWM3         0x00000008  // PWM3 pin
N#define SYSCTL_PIN_PWM4         0x00000010  // PWM4 pin
N#define SYSCTL_PIN_PWM5         0x00000020  // PWM5 pin
N#define SYSCTL_PIN_PWM6         0x00000040  // PWM6 pin
N#define SYSCTL_PIN_PWM7         0x00000080  // PWM7 pin
N#define SYSCTL_PIN_C0MINUS      0x00000040  // C0- pin
N#define SYSCTL_PIN_C0PLUS       0x00000080  // C0+ pin
N#define SYSCTL_PIN_C0O          0x00000100  // C0o pin
N#define SYSCTL_PIN_C1MINUS      0x00000200  // C1- pin
N#define SYSCTL_PIN_C1PLUS       0x00000400  // C1+ pin
N#define SYSCTL_PIN_C1O          0x00000800  // C1o pin
N#define SYSCTL_PIN_C2MINUS      0x00001000  // C2- pin
N#define SYSCTL_PIN_C2PLUS       0x00002000  // C2+ pin
N#define SYSCTL_PIN_C2O          0x00004000  // C2o pin
N#define SYSCTL_PIN_MC_FAULT0    0x00008000  // MC0 Fault pin
N#define SYSCTL_PIN_ADC0         0x00010000  // ADC0 pin
N#define SYSCTL_PIN_ADC1         0x00020000  // ADC1 pin
N#define SYSCTL_PIN_ADC2         0x00040000  // ADC2 pin
N#define SYSCTL_PIN_ADC3         0x00080000  // ADC3 pin
N#define SYSCTL_PIN_ADC4         0x00100000  // ADC4 pin
N#define SYSCTL_PIN_ADC5         0x00200000  // ADC5 pin
N#define SYSCTL_PIN_ADC6         0x00400000  // ADC6 pin
N#define SYSCTL_PIN_ADC7         0x00800000  // ADC7 pin
N#define SYSCTL_PIN_CCP0         0x01000000  // CCP0 pin
N#define SYSCTL_PIN_CCP1         0x02000000  // CCP1 pin
N#define SYSCTL_PIN_CCP2         0x04000000  // CCP2 pin
N#define SYSCTL_PIN_CCP3         0x08000000  // CCP3 pin
N#define SYSCTL_PIN_CCP4         0x10000000  // CCP4 pin
N#define SYSCTL_PIN_CCP5         0x20000000  // CCP5 pin
N#define SYSCTL_PIN_32KHZ        0x80000000  // 32kHz pin
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlLDOSet() API as
N// the ulVoltage value, or returned by the SysCtlLDOGet() API.
N//
N//*****************************************************************************
N#define SYSCTL_LDO_2_25V        0x00000005  // LDO output of 2.25V
N#define SYSCTL_LDO_2_30V        0x00000004  // LDO output of 2.30V
N#define SYSCTL_LDO_2_35V        0x00000003  // LDO output of 2.35V
N#define SYSCTL_LDO_2_40V        0x00000002  // LDO output of 2.40V
N#define SYSCTL_LDO_2_45V        0x00000001  // LDO output of 2.45V
N#define SYSCTL_LDO_2_50V        0x00000000  // LDO output of 2.50V
N#define SYSCTL_LDO_2_55V        0x0000001f  // LDO output of 2.55V
N#define SYSCTL_LDO_2_60V        0x0000001e  // LDO output of 2.60V
N#define SYSCTL_LDO_2_65V        0x0000001d  // LDO output of 2.65V
N#define SYSCTL_LDO_2_70V        0x0000001c  // LDO output of 2.70V
N#define SYSCTL_LDO_2_75V        0x0000001b  // LDO output of 2.75V
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlLDOConfigSet() API.
N//
N//*****************************************************************************
N#define SYSCTL_LDOCFG_ARST      0x00000001  // Allow LDO failure to reset
N#define SYSCTL_LDOCFG_NORST     0x00000000  // Do not reset on LDO failure
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlIntEnable(),
N// SysCtlIntDisable(), and SysCtlIntClear() APIs, or returned in the bit mask
N// by the SysCtlIntStatus() API.
N//
N//*****************************************************************************
N#define SYSCTL_INT_MOSC_PUP     0x00000100  // MOSC power-up interrupt
N#define SYSCTL_INT_USBPLL_LOCK  0x00000080  // USB PLL lock interrupt
N#define SYSCTL_INT_PLL_LOCK     0x00000040  // PLL lock interrupt
N#define SYSCTL_INT_CUR_LIMIT    0x00000020  // Current limit interrupt
N#define SYSCTL_INT_IOSC_FAIL    0x00000010  // Internal oscillator failure int
N#define SYSCTL_INT_MOSC_FAIL    0x00000008  // Main oscillator failure int
N#define SYSCTL_INT_POR          0x00000004  // Power on reset interrupt
N#define SYSCTL_INT_BOR          0x00000002  // Brown out interrupt
N#define SYSCTL_INT_PLL_FAIL     0x00000001  // PLL failure interrupt
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlResetCauseClear()
N// API or returned by the SysCtlResetCauseGet() API.
N//
N//*****************************************************************************
N#define SYSCTL_CAUSE_LDO        0x00000020  // LDO power not OK reset
N#define SYSCTL_CAUSE_WDOG1      0x00000020  // Watchdog1 reset
N#define SYSCTL_CAUSE_SW         0x00000010  // Software reset
N#define SYSCTL_CAUSE_WDOG       0x00000008  // Watchdog reset
N#define SYSCTL_CAUSE_BOR        0x00000004  // Brown-out reset
N#define SYSCTL_CAUSE_POR        0x00000002  // Power on reset
N#define SYSCTL_CAUSE_EXT        0x00000001  // External reset
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlBrownOutConfigSet()
N// API as the ulConfig parameter.
N//
N//*****************************************************************************
N#define SYSCTL_BOR_RESET        0x00000002  // Reset instead of interrupting
N#define SYSCTL_BOR_RESAMPLE     0x00000001  // Resample BOR before asserting
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPWMClockSet() API
N// as the ulConfig parameter, and can be returned by the SysCtlPWMClockGet()
N// API.
N//
N//*****************************************************************************
N#define SYSCTL_PWMDIV_1         0x00000000  // PWM clock is processor clock /1
N#define SYSCTL_PWMDIV_2         0x00100000  // PWM clock is processor clock /2
N#define SYSCTL_PWMDIV_4         0x00120000  // PWM clock is processor clock /4
N#define SYSCTL_PWMDIV_8         0x00140000  // PWM clock is processor clock /8
N#define SYSCTL_PWMDIV_16        0x00160000  // PWM clock is processor clock /16
N#define SYSCTL_PWMDIV_32        0x00180000  // PWM clock is processor clock /32
N#define SYSCTL_PWMDIV_64        0x001A0000  // PWM clock is processor clock /64
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlADCSpeedSet() API
N// as the ulSpeed parameter, and can be returned by the SyCtlADCSpeedGet()
N// API.
N//
N//*****************************************************************************
N#define SYSCTL_ADCSPEED_1MSPS   0x00000F00  // 1,000,000 samples per second
N#define SYSCTL_ADCSPEED_500KSPS 0x00000A00  // 500,000 samples per second
N#define SYSCTL_ADCSPEED_250KSPS 0x00000500  // 250,000 samples per second
N#define SYSCTL_ADCSPEED_125KSPS 0x00000000  // 125,000 samples per second
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlClockSet() API as
N// the ulConfig parameter.
N//
N//*****************************************************************************
N#define SYSCTL_SYSDIV_1         0x07800000  // Processor clock is osc/pll /1
N#define SYSCTL_SYSDIV_2         0x00C00000  // Processor clock is osc/pll /2
N#define SYSCTL_SYSDIV_3         0x01400000  // Processor clock is osc/pll /3
N#define SYSCTL_SYSDIV_4         0x01C00000  // Processor clock is osc/pll /4
N#define SYSCTL_SYSDIV_5         0x02400000  // Processor clock is osc/pll /5
N#define SYSCTL_SYSDIV_6         0x02C00000  // Processor clock is osc/pll /6
N#define SYSCTL_SYSDIV_7         0x03400000  // Processor clock is osc/pll /7
N#define SYSCTL_SYSDIV_8         0x03C00000  // Processor clock is osc/pll /8
N#define SYSCTL_SYSDIV_9         0x04400000  // Processor clock is osc/pll /9
N#define SYSCTL_SYSDIV_10        0x04C00000  // Processor clock is osc/pll /10
N#define SYSCTL_SYSDIV_11        0x05400000  // Processor clock is osc/pll /11
N#define SYSCTL_SYSDIV_12        0x05C00000  // Processor clock is osc/pll /12
N#define SYSCTL_SYSDIV_13        0x06400000  // Processor clock is osc/pll /13
N#define SYSCTL_SYSDIV_14        0x06C00000  // Processor clock is osc/pll /14
N#define SYSCTL_SYSDIV_15        0x07400000  // Processor clock is osc/pll /15
N#define SYSCTL_SYSDIV_16        0x07C00000  // Processor clock is osc/pll /16
N#define SYSCTL_SYSDIV_17        0x88400000  // Processor clock is osc/pll /17
N#define SYSCTL_SYSDIV_18        0x88C00000  // Processor clock is osc/pll /18
N#define SYSCTL_SYSDIV_19        0x89400000  // Processor clock is osc/pll /19
N#define SYSCTL_SYSDIV_20        0x89C00000  // Processor clock is osc/pll /20
N#define SYSCTL_SYSDIV_21        0x8A400000  // Processor clock is osc/pll /21
N#define SYSCTL_SYSDIV_22        0x8AC00000  // Processor clock is osc/pll /22
N#define SYSCTL_SYSDIV_23        0x8B400000  // Processor clock is osc/pll /23
N#define SYSCTL_SYSDIV_24        0x8BC00000  // Processor clock is osc/pll /24
N#define SYSCTL_SYSDIV_25        0x8C400000  // Processor clock is osc/pll /25
N#define SYSCTL_SYSDIV_26        0x8CC00000  // Processor clock is osc/pll /26
N#define SYSCTL_SYSDIV_27        0x8D400000  // Processor clock is osc/pll /27
N#define SYSCTL_SYSDIV_28        0x8DC00000  // Processor clock is osc/pll /28
N#define SYSCTL_SYSDIV_29        0x8E400000  // Processor clock is osc/pll /29
N#define SYSCTL_SYSDIV_30        0x8EC00000  // Processor clock is osc/pll /30
N#define SYSCTL_SYSDIV_31        0x8F400000  // Processor clock is osc/pll /31
N#define SYSCTL_SYSDIV_32        0x8FC00000  // Processor clock is osc/pll /32
N#define SYSCTL_SYSDIV_33        0x90400000  // Processor clock is osc/pll /33
N#define SYSCTL_SYSDIV_34        0x90C00000  // Processor clock is osc/pll /34
N#define SYSCTL_SYSDIV_35        0x91400000  // Processor clock is osc/pll /35
N#define SYSCTL_SYSDIV_36        0x91C00000  // Processor clock is osc/pll /36
N#define SYSCTL_SYSDIV_37        0x92400000  // Processor clock is osc/pll /37
N#define SYSCTL_SYSDIV_38        0x92C00000  // Processor clock is osc/pll /38
N#define SYSCTL_SYSDIV_39        0x93400000  // Processor clock is osc/pll /39
N#define SYSCTL_SYSDIV_40        0x93C00000  // Processor clock is osc/pll /40
N#define SYSCTL_SYSDIV_41        0x94400000  // Processor clock is osc/pll /41
N#define SYSCTL_SYSDIV_42        0x94C00000  // Processor clock is osc/pll /42
N#define SYSCTL_SYSDIV_43        0x95400000  // Processor clock is osc/pll /43
N#define SYSCTL_SYSDIV_44        0x95C00000  // Processor clock is osc/pll /44
N#define SYSCTL_SYSDIV_45        0x96400000  // Processor clock is osc/pll /45
N#define SYSCTL_SYSDIV_46        0x96C00000  // Processor clock is osc/pll /46
N#define SYSCTL_SYSDIV_47        0x97400000  // Processor clock is osc/pll /47
N#define SYSCTL_SYSDIV_48        0x97C00000  // Processor clock is osc/pll /48
N#define SYSCTL_SYSDIV_49        0x98400000  // Processor clock is osc/pll /49
N#define SYSCTL_SYSDIV_50        0x98C00000  // Processor clock is osc/pll /50
N#define SYSCTL_SYSDIV_51        0x99400000  // Processor clock is osc/pll /51
N#define SYSCTL_SYSDIV_52        0x99C00000  // Processor clock is osc/pll /52
N#define SYSCTL_SYSDIV_53        0x9A400000  // Processor clock is osc/pll /53
N#define SYSCTL_SYSDIV_54        0x9AC00000  // Processor clock is osc/pll /54
N#define SYSCTL_SYSDIV_55        0x9B400000  // Processor clock is osc/pll /55
N#define SYSCTL_SYSDIV_56        0x9BC00000  // Processor clock is osc/pll /56
N#define SYSCTL_SYSDIV_57        0x9C400000  // Processor clock is osc/pll /57
N#define SYSCTL_SYSDIV_58        0x9CC00000  // Processor clock is osc/pll /58
N#define SYSCTL_SYSDIV_59        0x9D400000  // Processor clock is osc/pll /59
N#define SYSCTL_SYSDIV_60        0x9DC00000  // Processor clock is osc/pll /60
N#define SYSCTL_SYSDIV_61        0x9E400000  // Processor clock is osc/pll /61
N#define SYSCTL_SYSDIV_62        0x9EC00000  // Processor clock is osc/pll /62
N#define SYSCTL_SYSDIV_63        0x9F400000  // Processor clock is osc/pll /63
N#define SYSCTL_SYSDIV_64        0x9FC00000  // Processor clock is osc/pll /64
N#define SYSCTL_SYSDIV_2_5       0xC1000000  // Processor clock is pll / 2.5
N#define SYSCTL_SYSDIV_3_5       0xC1800000  // Processor clock is pll / 3.5
N#define SYSCTL_SYSDIV_4_5       0xC2000000  // Processor clock is pll / 4.5
N#define SYSCTL_SYSDIV_5_5       0xC2800000  // Processor clock is pll / 5.5
N#define SYSCTL_SYSDIV_6_5       0xC3000000  // Processor clock is pll / 6.5
N#define SYSCTL_SYSDIV_7_5       0xC3800000  // Processor clock is pll / 7.5
N#define SYSCTL_SYSDIV_8_5       0xC4000000  // Processor clock is pll / 8.5
N#define SYSCTL_SYSDIV_9_5       0xC4800000  // Processor clock is pll / 9.5
N#define SYSCTL_SYSDIV_10_5      0xC5000000  // Processor clock is pll / 10.5
N#define SYSCTL_SYSDIV_11_5      0xC5800000  // Processor clock is pll / 11.5
N#define SYSCTL_SYSDIV_12_5      0xC6000000  // Processor clock is pll / 12.5
N#define SYSCTL_SYSDIV_13_5      0xC6800000  // Processor clock is pll / 13.5
N#define SYSCTL_SYSDIV_14_5      0xC7000000  // Processor clock is pll / 14.5
N#define SYSCTL_SYSDIV_15_5      0xC7800000  // Processor clock is pll / 15.5
N#define SYSCTL_SYSDIV_16_5      0xC8000000  // Processor clock is pll / 16.5
N#define SYSCTL_SYSDIV_17_5      0xC8800000  // Processor clock is pll / 17.5
N#define SYSCTL_SYSDIV_18_5      0xC9000000  // Processor clock is pll / 18.5
N#define SYSCTL_SYSDIV_19_5      0xC9800000  // Processor clock is pll / 19.5
N#define SYSCTL_SYSDIV_20_5      0xCA000000  // Processor clock is pll / 20.5
N#define SYSCTL_SYSDIV_21_5      0xCA800000  // Processor clock is pll / 21.5
N#define SYSCTL_SYSDIV_22_5      0xCB000000  // Processor clock is pll / 22.5
N#define SYSCTL_SYSDIV_23_5      0xCB800000  // Processor clock is pll / 23.5
N#define SYSCTL_SYSDIV_24_5      0xCC000000  // Processor clock is pll / 24.5
N#define SYSCTL_SYSDIV_25_5      0xCC800000  // Processor clock is pll / 25.5
N#define SYSCTL_SYSDIV_26_5      0xCD000000  // Processor clock is pll / 26.5
N#define SYSCTL_SYSDIV_27_5      0xCD800000  // Processor clock is pll / 27.5
N#define SYSCTL_SYSDIV_28_5      0xCE000000  // Processor clock is pll / 28.5
N#define SYSCTL_SYSDIV_29_5      0xCE800000  // Processor clock is pll / 29.5
N#define SYSCTL_SYSDIV_30_5      0xCF000000  // Processor clock is pll / 30.5
N#define SYSCTL_SYSDIV_31_5      0xCF800000  // Processor clock is pll / 31.5
N#define SYSCTL_SYSDIV_32_5      0xD0000000  // Processor clock is pll / 32.5
N#define SYSCTL_SYSDIV_33_5      0xD0800000  // Processor clock is pll / 33.5
N#define SYSCTL_SYSDIV_34_5      0xD1000000  // Processor clock is pll / 34.5
N#define SYSCTL_SYSDIV_35_5      0xD1800000  // Processor clock is pll / 35.5
N#define SYSCTL_SYSDIV_36_5      0xD2000000  // Processor clock is pll / 36.5
N#define SYSCTL_SYSDIV_37_5      0xD2800000  // Processor clock is pll / 37.5
N#define SYSCTL_SYSDIV_38_5      0xD3000000  // Processor clock is pll / 38.5
N#define SYSCTL_SYSDIV_39_5      0xD3800000  // Processor clock is pll / 39.5
N#define SYSCTL_SYSDIV_40_5      0xD4000000  // Processor clock is pll / 40.5
N#define SYSCTL_SYSDIV_41_5      0xD4800000  // Processor clock is pll / 41.5
N#define SYSCTL_SYSDIV_42_5      0xD5000000  // Processor clock is pll / 42.5
N#define SYSCTL_SYSDIV_43_5      0xD5800000  // Processor clock is pll / 43.5
N#define SYSCTL_SYSDIV_44_5      0xD6000000  // Processor clock is pll / 44.5
N#define SYSCTL_SYSDIV_45_5      0xD6800000  // Processor clock is pll / 45.5
N#define SYSCTL_SYSDIV_46_5      0xD7000000  // Processor clock is pll / 46.5
N#define SYSCTL_SYSDIV_47_5      0xD7800000  // Processor clock is pll / 47.5
N#define SYSCTL_SYSDIV_48_5      0xD8000000  // Processor clock is pll / 48.5
N#define SYSCTL_SYSDIV_49_5      0xD8800000  // Processor clock is pll / 49.5
N#define SYSCTL_SYSDIV_50_5      0xD9000000  // Processor clock is pll / 50.5
N#define SYSCTL_SYSDIV_51_5      0xD9800000  // Processor clock is pll / 51.5
N#define SYSCTL_SYSDIV_52_5      0xDA000000  // Processor clock is pll / 52.5
N#define SYSCTL_SYSDIV_53_5      0xDA800000  // Processor clock is pll / 53.5
N#define SYSCTL_SYSDIV_54_5      0xDB000000  // Processor clock is pll / 54.5
N#define SYSCTL_SYSDIV_55_5      0xDB800000  // Processor clock is pll / 55.5
N#define SYSCTL_SYSDIV_56_5      0xDC000000  // Processor clock is pll / 56.5
N#define SYSCTL_SYSDIV_57_5      0xDC800000  // Processor clock is pll / 57.5
N#define SYSCTL_SYSDIV_58_5      0xDD000000  // Processor clock is pll / 58.5
N#define SYSCTL_SYSDIV_59_5      0xDD800000  // Processor clock is pll / 59.5
N#define SYSCTL_SYSDIV_60_5      0xDE000000  // Processor clock is pll / 60.5
N#define SYSCTL_SYSDIV_61_5      0xDE800000  // Processor clock is pll / 61.5
N#define SYSCTL_SYSDIV_62_5      0xDF000000  // Processor clock is pll / 62.5
N#define SYSCTL_SYSDIV_63_5      0xDF800000  // Processor clock is pll / 63.5
N#define SYSCTL_USE_PLL          0x00000000  // System clock is the PLL clock
N#define SYSCTL_USE_OSC          0x00003800  // System clock is the osc clock
N#define SYSCTL_XTAL_1MHZ        0x00000000  // External crystal is 1MHz
N#define SYSCTL_XTAL_1_84MHZ     0x00000040  // External crystal is 1.8432MHz
N#define SYSCTL_XTAL_2MHZ        0x00000080  // External crystal is 2MHz
N#define SYSCTL_XTAL_2_45MHZ     0x000000C0  // External crystal is 2.4576MHz
N#define SYSCTL_XTAL_3_57MHZ     0x00000100  // External crystal is 3.579545MHz
N#define SYSCTL_XTAL_3_68MHZ     0x00000140  // External crystal is 3.6864MHz
N#define SYSCTL_XTAL_4MHZ        0x00000180  // External crystal is 4MHz
N#define SYSCTL_XTAL_4_09MHZ     0x000001C0  // External crystal is 4.096MHz
N#define SYSCTL_XTAL_4_91MHZ     0x00000200  // External crystal is 4.9152MHz
N#define SYSCTL_XTAL_5MHZ        0x00000240  // External crystal is 5MHz
N#define SYSCTL_XTAL_5_12MHZ     0x00000280  // External crystal is 5.12MHz
N#define SYSCTL_XTAL_6MHZ        0x000002C0  // External crystal is 6MHz
N#define SYSCTL_XTAL_6_14MHZ     0x00000300  // External crystal is 6.144MHz
N#define SYSCTL_XTAL_7_37MHZ     0x00000340  // External crystal is 7.3728MHz
N#define SYSCTL_XTAL_8MHZ        0x00000380  // External crystal is 8MHz
N#define SYSCTL_XTAL_8_19MHZ     0x000003C0  // External crystal is 8.192MHz
N#define SYSCTL_XTAL_10MHZ       0x00000400  // External crystal is 10 MHz
N#define SYSCTL_XTAL_12MHZ       0x00000440  // External crystal is 12 MHz
N#define SYSCTL_XTAL_12_2MHZ     0x00000480  // External crystal is 12.288 MHz
N#define SYSCTL_XTAL_13_5MHZ     0x000004C0  // External crystal is 13.56 MHz
N#define SYSCTL_XTAL_14_3MHZ     0x00000500  // External crystal is 14.31818 MHz
N#define SYSCTL_XTAL_16MHZ       0x00000540  // External crystal is 16 MHz
N#define SYSCTL_XTAL_16_3MHZ     0x00000580  // External crystal is 16.384 MHz
N#define SYSCTL_XTAL_18MHZ       0x000005C0  // External crystal is 18.0 MHz
N#define SYSCTL_XTAL_20MHZ       0x00000600  // External crystal is 20.0 MHz
N#define SYSCTL_XTAL_24MHZ       0x00000640  // External crystal is 24.0 MHz
N#define SYSCTL_XTAL_25MHZ       0x00000680  // External crystal is 25.0 MHz
N#define SYSCTL_OSC_MAIN         0x00000000  // Osc source is main osc
N#define SYSCTL_OSC_INT          0x00000010  // Osc source is int. osc
N#define SYSCTL_OSC_INT4         0x00000020  // Osc source is int. osc /4
N#define SYSCTL_OSC_INT30        0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_OSC_EXT4_19      0x80000028  // Osc source is ext. 4.19 MHz
N#define SYSCTL_OSC_EXT32        0x80000038  // Osc source is ext. 32 KHz
N#define SYSCTL_INT_OSC_DIS      0x00000002  // Disable internal oscillator
N#define SYSCTL_MAIN_OSC_DIS     0x00000001  // Disable main oscillator
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlDeepSleepClockSet()
N// API as the ulConfig parameter.
N//
N//*****************************************************************************
N#define SYSCTL_DSLP_DIV_1       0x00000000  // Deep-sleep clock is osc /1
N#define SYSCTL_DSLP_DIV_2       0x00800000  // Deep-sleep clock is osc /2
N#define SYSCTL_DSLP_DIV_3       0x01000000  // Deep-sleep clock is osc /3
N#define SYSCTL_DSLP_DIV_4       0x01800000  // Deep-sleep clock is osc /4
N#define SYSCTL_DSLP_DIV_5       0x02000000  // Deep-sleep clock is osc /5
N#define SYSCTL_DSLP_DIV_6       0x02800000  // Deep-sleep clock is osc /6
N#define SYSCTL_DSLP_DIV_7       0x03000000  // Deep-sleep clock is osc /7
N#define SYSCTL_DSLP_DIV_8       0x03800000  // Deep-sleep clock is osc /8
N#define SYSCTL_DSLP_DIV_9       0x04000000  // Deep-sleep clock is osc /9
N#define SYSCTL_DSLP_DIV_10      0x04800000  // Deep-sleep clock is osc /10
N#define SYSCTL_DSLP_DIV_11      0x05000000  // Deep-sleep clock is osc /11
N#define SYSCTL_DSLP_DIV_12      0x05800000  // Deep-sleep clock is osc /12
N#define SYSCTL_DSLP_DIV_13      0x06000000  // Deep-sleep clock is osc /13
N#define SYSCTL_DSLP_DIV_14      0x06800000  // Deep-sleep clock is osc /14
N#define SYSCTL_DSLP_DIV_15      0x07000000  // Deep-sleep clock is osc /15
N#define SYSCTL_DSLP_DIV_16      0x07800000  // Deep-sleep clock is osc /16
N#define SYSCTL_DSLP_DIV_17      0x08000000  // Deep-sleep clock is osc /17
N#define SYSCTL_DSLP_DIV_18      0x08800000  // Deep-sleep clock is osc /18
N#define SYSCTL_DSLP_DIV_19      0x09000000  // Deep-sleep clock is osc /19
N#define SYSCTL_DSLP_DIV_20      0x09800000  // Deep-sleep clock is osc /20
N#define SYSCTL_DSLP_DIV_21      0x0A000000  // Deep-sleep clock is osc /21
N#define SYSCTL_DSLP_DIV_22      0x0A800000  // Deep-sleep clock is osc /22
N#define SYSCTL_DSLP_DIV_23      0x0B000000  // Deep-sleep clock is osc /23
N#define SYSCTL_DSLP_DIV_24      0x0B800000  // Deep-sleep clock is osc /24
N#define SYSCTL_DSLP_DIV_25      0x0C000000  // Deep-sleep clock is osc /25
N#define SYSCTL_DSLP_DIV_26      0x0C800000  // Deep-sleep clock is osc /26
N#define SYSCTL_DSLP_DIV_27      0x0D000000  // Deep-sleep clock is osc /27
N#define SYSCTL_DSLP_DIV_28      0x0D800000  // Deep-sleep clock is osc /28
N#define SYSCTL_DSLP_DIV_29      0x0E000000  // Deep-sleep clock is osc /29
N#define SYSCTL_DSLP_DIV_30      0x0E800000  // Deep-sleep clock is osc /30
N#define SYSCTL_DSLP_DIV_31      0x0F000000  // Deep-sleep clock is osc /31
N#define SYSCTL_DSLP_DIV_32      0x0F800000  // Deep-sleep clock is osc /32
N#define SYSCTL_DSLP_DIV_33      0x10000000  // Deep-sleep clock is osc /33
N#define SYSCTL_DSLP_DIV_34      0x10800000  // Deep-sleep clock is osc /34
N#define SYSCTL_DSLP_DIV_35      0x11000000  // Deep-sleep clock is osc /35
N#define SYSCTL_DSLP_DIV_36      0x11800000  // Deep-sleep clock is osc /36
N#define SYSCTL_DSLP_DIV_37      0x12000000  // Deep-sleep clock is osc /37
N#define SYSCTL_DSLP_DIV_38      0x12800000  // Deep-sleep clock is osc /38
N#define SYSCTL_DSLP_DIV_39      0x13000000  // Deep-sleep clock is osc /39
N#define SYSCTL_DSLP_DIV_40      0x13800000  // Deep-sleep clock is osc /40
N#define SYSCTL_DSLP_DIV_41      0x14000000  // Deep-sleep clock is osc /41
N#define SYSCTL_DSLP_DIV_42      0x14800000  // Deep-sleep clock is osc /42
N#define SYSCTL_DSLP_DIV_43      0x15000000  // Deep-sleep clock is osc /43
N#define SYSCTL_DSLP_DIV_44      0x15800000  // Deep-sleep clock is osc /44
N#define SYSCTL_DSLP_DIV_45      0x16000000  // Deep-sleep clock is osc /45
N#define SYSCTL_DSLP_DIV_46      0x16800000  // Deep-sleep clock is osc /46
N#define SYSCTL_DSLP_DIV_47      0x17000000  // Deep-sleep clock is osc /47
N#define SYSCTL_DSLP_DIV_48      0x17800000  // Deep-sleep clock is osc /48
N#define SYSCTL_DSLP_DIV_49      0x18000000  // Deep-sleep clock is osc /49
N#define SYSCTL_DSLP_DIV_50      0x18800000  // Deep-sleep clock is osc /50
N#define SYSCTL_DSLP_DIV_51      0x19000000  // Deep-sleep clock is osc /51
N#define SYSCTL_DSLP_DIV_52      0x19800000  // Deep-sleep clock is osc /52
N#define SYSCTL_DSLP_DIV_53      0x1A000000  // Deep-sleep clock is osc /53
N#define SYSCTL_DSLP_DIV_54      0x1A800000  // Deep-sleep clock is osc /54
N#define SYSCTL_DSLP_DIV_55      0x1B000000  // Deep-sleep clock is osc /55
N#define SYSCTL_DSLP_DIV_56      0x1B800000  // Deep-sleep clock is osc /56
N#define SYSCTL_DSLP_DIV_57      0x1C000000  // Deep-sleep clock is osc /57
N#define SYSCTL_DSLP_DIV_58      0x1C800000  // Deep-sleep clock is osc /58
N#define SYSCTL_DSLP_DIV_59      0x1D000000  // Deep-sleep clock is osc /59
N#define SYSCTL_DSLP_DIV_60      0x1D800000  // Deep-sleep clock is osc /60
N#define SYSCTL_DSLP_DIV_61      0x1E000000  // Deep-sleep clock is osc /61
N#define SYSCTL_DSLP_DIV_62      0x1E800000  // Deep-sleep clock is osc /62
N#define SYSCTL_DSLP_DIV_63      0x1F000000  // Deep-sleep clock is osc /63
N#define SYSCTL_DSLP_DIV_64      0x1F800000  // Deep-sleep clock is osc /64
N#define SYSCTL_DSLP_OSC_MAIN    0x00000000  // Osc source is main osc
N#define SYSCTL_DSLP_OSC_INT     0x00000010  // Osc source is int. osc
N#define SYSCTL_DSLP_OSC_INT30   0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_DSLP_OSC_EXT32   0x00000070  // Osc source is ext. 32 KHz
N#define SYSCTL_DSLP_PIOSC_PD    0x00000002  // Power down PIOSC in deep-sleep
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPIOSCCalibrate()
N// API as the ulType parameter.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSC_CAL_AUTO   0x00000200  // Automatic calibration
N#define SYSCTL_PIOSC_CAL_FACT   0x00000100  // Factory calibration
N#define SYSCTL_PIOSC_CAL_USER   0x80000100  // User-supplied calibration
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlMOSCConfigSet() API
N// as the ulConfig parameter.
N//
N//*****************************************************************************
N#define SYSCTL_MOSC_VALIDATE    0x00000001  // Enable MOSC validation
N#define SYSCTL_MOSC_INTERRUPT   0x00000002  // Generate interrupt on MOSC fail
N#define SYSCTL_MOSC_NO_XTAL     0x00000004  // No crystal is attached to MOSC
N
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern unsigned long SysCtlSRAMSizeGet(void);
Nextern unsigned long SysCtlFlashSizeGet(void);
Nextern tBoolean SysCtlPinPresent(unsigned long ulPin);
Nextern tBoolean SysCtlPeripheralPresent(unsigned long ulPeripheral);
Nextern tBoolean SysCtlPeripheralReady(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralPowerOn(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralPowerOff(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralReset(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralEnable(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralDisable(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralSleepEnable(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralSleepDisable(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralDeepSleepEnable(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralDeepSleepDisable(unsigned long ulPeripheral);
Nextern void SysCtlPeripheralClockGating(tBoolean bEnable);
Nextern void SysCtlIntRegister(void (*pfnHandler)(void));
Nextern void SysCtlIntUnregister(void);
Nextern void SysCtlIntEnable(unsigned long ulInts);
Nextern void SysCtlIntDisable(unsigned long ulInts);
Nextern void SysCtlIntClear(unsigned long ulInts);
Nextern unsigned long SysCtlIntStatus(tBoolean bMasked);
Nextern void SysCtlLDOSet(unsigned long ulVoltage);
Nextern unsigned long SysCtlLDOGet(void);
Nextern void SysCtlLDOConfigSet(unsigned long ulConfig);
Nextern void SysCtlReset(void);
Nextern void SysCtlSleep(void);
Nextern void SysCtlDeepSleep(void);
Nextern unsigned long SysCtlResetCauseGet(void);
Nextern void SysCtlResetCauseClear(unsigned long ulCauses);
Nextern void SysCtlBrownOutConfigSet(unsigned long ulConfig,
N                                    unsigned long ulDelay);
Nextern void SysCtlDelay(unsigned long ulCount);
Nextern void SysCtlMOSCConfigSet(unsigned long ulConfig);
Nextern unsigned long SysCtlPIOSCCalibrate(unsigned long ulType);
Nextern void SysCtlClockSet(unsigned long ulConfig);
Nextern unsigned long SysCtlClockGet(void);
Nextern void SysCtlDeepSleepClockSet(unsigned long ulConfig);
Nextern void SysCtlPWMClockSet(unsigned long ulConfig);
Nextern unsigned long SysCtlPWMClockGet(void);
Nextern void SysCtlADCSpeedSet(unsigned long ulSpeed);
Nextern unsigned long SysCtlADCSpeedGet(void);
Nextern void SysCtlIOSCVerificationSet(tBoolean bEnable);
Nextern void SysCtlMOSCVerificationSet(tBoolean bEnable);
Nextern void SysCtlPLLVerificationSet(tBoolean bEnable);
Nextern void SysCtlClkVerificationClear(void);
Nextern void SysCtlGPIOAHBEnable(unsigned long ulGPIOPeripheral);
Nextern void SysCtlGPIOAHBDisable(unsigned long ulGPIOPeripheral);
Nextern void SysCtlUSBPLLEnable(void);
Nextern void SysCtlUSBPLLDisable(void);
Nextern unsigned long SysCtlI2SMClkSet(unsigned long ulInputClock,
N                                      unsigned long ulMClk);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __SYSCTL_H__
L 35 "..\..\..\utils\uartstdio.c" 2
N#include "driverlib/uart.h"
L 1 "..\..\..\driverlib/uart.h" 1
N//*****************************************************************************
N//
N// uart.h - Defines and Macros for the UART.
N//
N// Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 9107 of the Stellaris Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __UART_H__
N#define __UART_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTIntEnable, UARTIntDisable, and UARTIntClear
N// as the ulIntFlags parameter, and returned from UARTIntStatus.
N//
N//*****************************************************************************
N#define UART_INT_9BIT           0x1000      // 9-bit address match interrupt
N#define UART_INT_OE             0x400       // Overrun Error Interrupt Mask
N#define UART_INT_BE             0x200       // Break Error Interrupt Mask
N#define UART_INT_PE             0x100       // Parity Error Interrupt Mask
N#define UART_INT_FE             0x080       // Framing Error Interrupt Mask
N#define UART_INT_RT             0x040       // Receive Timeout Interrupt Mask
N#define UART_INT_TX             0x020       // Transmit Interrupt Mask
N#define UART_INT_RX             0x010       // Receive Interrupt Mask
N#define UART_INT_DSR            0x008       // DSR Modem Interrupt Mask
N#define UART_INT_DCD            0x004       // DCD Modem Interrupt Mask
N#define UART_INT_CTS            0x002       // CTS Modem Interrupt Mask
N#define UART_INT_RI             0x001       // RI Modem Interrupt Mask
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTConfigSetExpClk as the ulConfig parameter
N// and returned by UARTConfigGetExpClk in the pulConfig parameter.
N// Additionally, the UART_CONFIG_PAR_* subset can be passed to
N// UARTParityModeSet as the ulParity parameter, and are returned by
N// UARTParityModeGet.
N//
N//*****************************************************************************
N#define UART_CONFIG_WLEN_MASK   0x00000060  // Mask for extracting word length
N#define UART_CONFIG_WLEN_8      0x00000060  // 8 bit data
N#define UART_CONFIG_WLEN_7      0x00000040  // 7 bit data
N#define UART_CONFIG_WLEN_6      0x00000020  // 6 bit data
N#define UART_CONFIG_WLEN_5      0x00000000  // 5 bit data
N#define UART_CONFIG_STOP_MASK   0x00000008  // Mask for extracting stop bits
N#define UART_CONFIG_STOP_ONE    0x00000000  // One stop bit
N#define UART_CONFIG_STOP_TWO    0x00000008  // Two stop bits
N#define UART_CONFIG_PAR_MASK    0x00000086  // Mask for extracting parity
N#define UART_CONFIG_PAR_NONE    0x00000000  // No parity
N#define UART_CONFIG_PAR_EVEN    0x00000006  // Even parity
N#define UART_CONFIG_PAR_ODD     0x00000002  // Odd parity
N#define UART_CONFIG_PAR_ONE     0x00000082  // Parity bit is one
N#define UART_CONFIG_PAR_ZERO    0x00000086  // Parity bit is zero
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTFIFOLevelSet as the ulTxLevel parameter and
N// returned by UARTFIFOLevelGet in the pulTxLevel.
N//
N//*****************************************************************************
N#define UART_FIFO_TX1_8         0x00000000  // Transmit interrupt at 1/8 Full
N#define UART_FIFO_TX2_8         0x00000001  // Transmit interrupt at 1/4 Full
N#define UART_FIFO_TX4_8         0x00000002  // Transmit interrupt at 1/2 Full
N#define UART_FIFO_TX6_8         0x00000003  // Transmit interrupt at 3/4 Full
N#define UART_FIFO_TX7_8         0x00000004  // Transmit interrupt at 7/8 Full
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTFIFOLevelSet as the ulRxLevel parameter and
N// returned by UARTFIFOLevelGet in the pulRxLevel.
N//
N//*****************************************************************************
N#define UART_FIFO_RX1_8         0x00000000  // Receive interrupt at 1/8 Full
N#define UART_FIFO_RX2_8         0x00000008  // Receive interrupt at 1/4 Full
N#define UART_FIFO_RX4_8         0x00000010  // Receive interrupt at 1/2 Full
N#define UART_FIFO_RX6_8         0x00000018  // Receive interrupt at 3/4 Full
N#define UART_FIFO_RX7_8         0x00000020  // Receive interrupt at 7/8 Full
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTDMAEnable() and UARTDMADisable().
N//
N//*****************************************************************************
N#define UART_DMA_ERR_RXSTOP     0x00000004  // Stop DMA receive if UART error
N#define UART_DMA_TX             0x00000002  // Enable DMA for transmit
N#define UART_DMA_RX             0x00000001  // Enable DMA for receive
N
N//*****************************************************************************
N//
N// Values returned from UARTRxErrorGet().
N//
N//*****************************************************************************
N#define UART_RXERROR_OVERRUN    0x00000008
N#define UART_RXERROR_BREAK      0x00000004
N#define UART_RXERROR_PARITY     0x00000002
N#define UART_RXERROR_FRAMING    0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTHandshakeOutputsSet() or returned from
N// UARTHandshakeOutputGet().
N//
N//*****************************************************************************
N#define UART_OUTPUT_RTS         0x00000800
N#define UART_OUTPUT_DTR         0x00000400
N
N//*****************************************************************************
N//
N// Values that can be returned from UARTHandshakeInputsGet().
N//
N//*****************************************************************************
N#define UART_INPUT_RI           0x00000100
N#define UART_INPUT_DCD          0x00000004
N#define UART_INPUT_DSR          0x00000002
N#define UART_INPUT_CTS          0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTFlowControl() or returned from
N// UARTFlowControlGet().
N//
N//*****************************************************************************
N#define UART_FLOWCONTROL_TX     0x00008000
N#define UART_FLOWCONTROL_RX     0x00004000
N#define UART_FLOWCONTROL_NONE   0x00000000
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTTxIntModeSet() or returned from
N// UARTTxIntModeGet().
N//
N//*****************************************************************************
N#define UART_TXINT_MODE_FIFO    0x00000000
N#define UART_TXINT_MODE_EOT     0x00000010
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTClockSourceSet() or returned from
N// UARTClockSourceGet().
N//
N//*****************************************************************************
N#define UART_CLOCK_SYSTEM       0x00000000
N#define UART_CLOCK_PIOSC        0x00000005
N
N//*****************************************************************************
N//
N// API Function prototypes
N//
N//*****************************************************************************
Nextern void UARTParityModeSet(unsigned long ulBase, unsigned long ulParity);
Nextern unsigned long UARTParityModeGet(unsigned long ulBase);
Nextern void UARTFIFOLevelSet(unsigned long ulBase, unsigned long ulTxLevel,
N                             unsigned long ulRxLevel);
Nextern void UARTFIFOLevelGet(unsigned long ulBase, unsigned long *pulTxLevel,
N                             unsigned long *pulRxLevel);
Nextern void UARTConfigSetExpClk(unsigned long ulBase, unsigned long ulUARTClk,
N                                unsigned long ulBaud, unsigned long ulConfig);
Nextern void UARTConfigGetExpClk(unsigned long ulBase, unsigned long ulUARTClk,
N                                unsigned long *pulBaud,
N                                unsigned long *pulConfig);
Nextern void UARTEnable(unsigned long ulBase);
Nextern void UARTDisable(unsigned long ulBase);
Nextern void UARTFIFOEnable(unsigned long ulBase);
Nextern void UARTFIFODisable(unsigned long ulBase);
Nextern void UARTEnableSIR(unsigned long ulBase, tBoolean bLowPower);
Nextern void UARTDisableSIR(unsigned long ulBase);
Nextern tBoolean UARTCharsAvail(unsigned long ulBase);
Nextern tBoolean UARTSpaceAvail(unsigned long ulBase);
Nextern long UARTCharGetNonBlocking(unsigned long ulBase);
Nextern long UARTCharGet(unsigned long ulBase);
Nextern tBoolean UARTCharPutNonBlocking(unsigned long ulBase,
N                                       unsigned char ucData);
Nextern void UARTCharPut(unsigned long ulBase, unsigned char ucData);
Nextern void UARTBreakCtl(unsigned long ulBase, tBoolean bBreakState);
Nextern tBoolean UARTBusy(unsigned long ulBase);
Nextern void UARTIntRegister(unsigned long ulBase, void(*pfnHandler)(void));
Nextern void UARTIntUnregister(unsigned long ulBase);
Nextern void UARTIntEnable(unsigned long ulBase, unsigned long ulIntFlags);
Nextern void UARTIntDisable(unsigned long ulBase, unsigned long ulIntFlags);
Nextern unsigned long UARTIntStatus(unsigned long ulBase, tBoolean bMasked);
Nextern void UARTIntClear(unsigned long ulBase, unsigned long ulIntFlags);
Nextern void UARTDMAEnable(unsigned long ulBase, unsigned long ulDMAFlags);
Nextern void UARTDMADisable(unsigned long ulBase, unsigned long ulDMAFlags);
Nextern unsigned long UARTRxErrorGet(unsigned long ulBase);
Nextern void UARTRxErrorClear(unsigned long ulBase);
Nextern void UARTSmartCardEnable(unsigned long ulBase);
Nextern void UARTSmartCardDisable(unsigned long ulBase);
Nextern void UARTModemControlSet(unsigned long ulBase,
N                                unsigned long ulControl);
Nextern void UARTModemControlClear(unsigned long ulBase,
N                                  unsigned long ulControl);
Nextern unsigned long UARTModemControlGet(unsigned long ulBase);
Nextern unsigned long UARTModemStatusGet(unsigned long ulBase);
Nextern void UARTFlowControlSet(unsigned long ulBase, unsigned long ulMode);
Nextern unsigned long UARTFlowControlGet(unsigned long ulBase);
Nextern void UARTTxIntModeSet(unsigned long ulBase, unsigned long ulMode);
Nextern unsigned long UARTTxIntModeGet(unsigned long ulBase);
Nextern void UARTClockSourceSet(unsigned long ulBase, unsigned long ulSource);
Nextern unsigned long UARTClockSourceGet(unsigned long ulBase);
Nextern void UART9BitEnable(unsigned long ulBase);
Nextern void UART9BitDisable(unsigned long ulBase);
Nextern void UART9BitAddrSet(unsigned long ulBase, unsigned char ucAddr,
N                            unsigned char ucMask);
Nextern void UART9BitAddrSend(unsigned long ulBase, unsigned char ucAddr);
N
N//*****************************************************************************
N//
N// Several UART APIs have been renamed, with the original function name being
N// deprecated.  These defines provide backward compatibility.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N#include "driverlib/sysctl.h"
N#define UARTConfigSet(a, b, c)                         \
N        UARTConfigSetExpClk(a, SysCtlClockGet(), b, c)
X#define UARTConfigSet(a, b, c)                                 UARTConfigSetExpClk(a, SysCtlClockGet(), b, c)
N#define UARTConfigGet(a, b, c)                         \
N        UARTConfigGetExpClk(a, SysCtlClockGet(), b, c)
X#define UARTConfigGet(a, b, c)                                 UARTConfigGetExpClk(a, SysCtlClockGet(), b, c)
N#define UARTCharNonBlockingGet(a) \
N        UARTCharGetNonBlocking(a)
X#define UARTCharNonBlockingGet(a)         UARTCharGetNonBlocking(a)
N#define UARTCharNonBlockingPut(a, b) \
N        UARTCharPutNonBlocking(a, b)
X#define UARTCharNonBlockingPut(a, b)         UARTCharPutNonBlocking(a, b)
N#endif
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif //  __UART_H__
L 36 "..\..\..\utils\uartstdio.c" 2
N#include "utils/uartstdio.h"
L 1 "..\..\..\utils/uartstdio.h" 1
N//*****************************************************************************
N//
N// uartstdio.h - Prototypes for the UART console functions.
N//
N// Copyright (c) 2007-2012 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 9107 of the Stellaris Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __UARTSTDIO_H__
N#define __UARTSTDIO_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// If built for buffered operation, the following labels define the sizes of
N// the transmit and receive buffers respectively.
N//
N//*****************************************************************************
N#ifdef UART_BUFFERED
N#ifndef UART_RX_BUFFER_SIZE
N#define UART_RX_BUFFER_SIZE     128
N#endif
N#ifndef UART_TX_BUFFER_SIZE
N#define UART_TX_BUFFER_SIZE     1024
N#endif
N#endif
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void UARTStdioInit(unsigned long ulPort);
Nextern void UARTStdioInitExpClk(unsigned long ulPort, unsigned long ulBaud);
Nextern int UARTgets(char *pcBuf, unsigned long ulLen);
Nextern unsigned char UARTgetc(void);
Nextern void UARTprintf(const char *pcString, ...);
Nextern int UARTwrite(const char *pcBuf, unsigned long ulLen);
N#ifdef UART_BUFFERED
Nextern int UARTPeek(unsigned char ucChar);
Nextern void UARTFlushTx(tBoolean bDiscard);
Nextern void UARTFlushRx(void);
Nextern int UARTRxBytesAvail(void);
Nextern int UARTTxBytesFree(void);
Nextern void UARTEchoSet(tBoolean bEnable);
N#endif
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __UARTSTDIO_H__
L 37 "..\..\..\utils\uartstdio.c" 2
N
N//*****************************************************************************
N//
N//! \addtogroup uartstdio_api
N//! @{
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// If buffered mode is defined, set aside RX and TX buffers and read/write
N// pointers to control them.
N//
N//*****************************************************************************
N#ifdef UART_BUFFERED
N
N//*****************************************************************************
N//
N// This global controls whether or not we are echoing characters back to the
N// transmitter.  By default, echo is enabled but if using this module as a
N// convenient method of implementing a buffered serial interface over which
N// you will be running an application protocol, you are likely to want to
N// disable echo by calling UARTEchoSet(false).
N//
N//*****************************************************************************
Nstatic tBoolean g_bDisableEcho;
N
N//*****************************************************************************
N//
N// Output ring buffer.  Buffer is full if g_ulUARTTxReadIndex is one ahead of
N// g_ulUARTTxWriteIndex.  Buffer is empty if the two indices are the same.
N//
N//*****************************************************************************
Nstatic unsigned char g_pcUARTTxBuffer[UART_TX_BUFFER_SIZE];
Xstatic unsigned char g_pcUARTTxBuffer[1024];
Nstatic volatile unsigned long g_ulUARTTxWriteIndex = 0;
Nstatic volatile unsigned long g_ulUARTTxReadIndex = 0;
N
N//*****************************************************************************
N//
N// Input ring buffer.  Buffer is full if g_ulUARTTxReadIndex is one ahead of
N// g_ulUARTTxWriteIndex.  Buffer is empty if the two indices are the same.
N//
N//*****************************************************************************
Nstatic unsigned char g_pcUARTRxBuffer[UART_RX_BUFFER_SIZE];
Xstatic unsigned char g_pcUARTRxBuffer[128];
Nstatic volatile unsigned long g_ulUARTRxWriteIndex = 0;
Nstatic volatile unsigned long g_ulUARTRxReadIndex = 0;
N
N//*****************************************************************************
N//
N// Macros to determine number of free and used bytes in the transmit buffer.
N//
N//*****************************************************************************
N#define TX_BUFFER_USED          (GetBufferCount(&g_ulUARTTxReadIndex,  \
N                                                &g_ulUARTTxWriteIndex, \
N                                                UART_TX_BUFFER_SIZE))
X#define TX_BUFFER_USED          (GetBufferCount(&g_ulUARTTxReadIndex,                                                  &g_ulUARTTxWriteIndex,                                                 UART_TX_BUFFER_SIZE))
N#define TX_BUFFER_FREE          (UART_TX_BUFFER_SIZE - TX_BUFFER_USED)
N#define TX_BUFFER_EMPTY         (IsBufferEmpty(&g_ulUARTTxReadIndex,   \
N                                               &g_ulUARTTxWriteIndex))
X#define TX_BUFFER_EMPTY         (IsBufferEmpty(&g_ulUARTTxReadIndex,                                                  &g_ulUARTTxWriteIndex))
N#define TX_BUFFER_FULL          (IsBufferFull(&g_ulUARTTxReadIndex,  \
N                                              &g_ulUARTTxWriteIndex, \
N                                              UART_TX_BUFFER_SIZE))
X#define TX_BUFFER_FULL          (IsBufferFull(&g_ulUARTTxReadIndex,                                                &g_ulUARTTxWriteIndex,                                               UART_TX_BUFFER_SIZE))
N#define ADVANCE_TX_BUFFER_INDEX(Index) \
N                                (Index) = ((Index) + 1) % UART_TX_BUFFER_SIZE
X#define ADVANCE_TX_BUFFER_INDEX(Index)                                 (Index) = ((Index) + 1) % UART_TX_BUFFER_SIZE
N
N//*****************************************************************************
N//
N// Macros to determine number of free and used bytes in the receive buffer.
N//
N//*****************************************************************************
N#define RX_BUFFER_USED          (GetBufferCount(&g_ulUARTRxReadIndex,  \
N                                                &g_ulUARTRxWriteIndex, \
N                                                UART_RX_BUFFER_SIZE))
X#define RX_BUFFER_USED          (GetBufferCount(&g_ulUARTRxReadIndex,                                                  &g_ulUARTRxWriteIndex,                                                 UART_RX_BUFFER_SIZE))
N#define RX_BUFFER_FREE          (UART_RX_BUFFER_SIZE - RX_BUFFER_USED)
N#define RX_BUFFER_EMPTY         (IsBufferEmpty(&g_ulUARTRxReadIndex,   \
N                                               &g_ulUARTRxWriteIndex))
X#define RX_BUFFER_EMPTY         (IsBufferEmpty(&g_ulUARTRxReadIndex,                                                  &g_ulUARTRxWriteIndex))
N#define RX_BUFFER_FULL          (IsBufferFull(&g_ulUARTRxReadIndex,  \
N                                              &g_ulUARTRxWriteIndex, \
N                                              UART_RX_BUFFER_SIZE))
X#define RX_BUFFER_FULL          (IsBufferFull(&g_ulUARTRxReadIndex,                                                &g_ulUARTRxWriteIndex,                                               UART_RX_BUFFER_SIZE))
N#define ADVANCE_RX_BUFFER_INDEX(Index) \
N                                (Index) = ((Index) + 1) % UART_RX_BUFFER_SIZE
X#define ADVANCE_RX_BUFFER_INDEX(Index)                                 (Index) = ((Index) + 1) % UART_RX_BUFFER_SIZE
N#endif
N
N//*****************************************************************************
N//
N// The base address of the chosen UART.
N//
N//*****************************************************************************
Nstatic unsigned long g_ulBase = 0;
N
N//*****************************************************************************
N//
N// A mapping from an integer between 0 and 15 to its ASCII character
N// equivalent.
N//
N//*****************************************************************************
Nstatic const char * const g_pcHex = "0123456789abcdef";
N
N//*****************************************************************************
N//
N// The list of possible base addresses for the console UART.
N//
N//*****************************************************************************
Nstatic const unsigned long g_ulUARTBase[3] =
N{
N    UART0_BASE, UART1_BASE, UART2_BASE
X    0x4000C000, 0x4000D000, 0x4000E000
N};
N
N#ifdef UART_BUFFERED
N//*****************************************************************************
N//
N// The list of possible interrupts for the console UART.
N//
N//*****************************************************************************
Nstatic const unsigned long g_ulUARTInt[3] =
N{
N    INT_UART0, INT_UART1, INT_UART2
X    21, 22, 49
N};
N
N//*****************************************************************************
N//
N// The port number in use.
N//
N//*****************************************************************************
Nstatic unsigned long g_ulPortNum;
N#endif
N
N//*****************************************************************************
N//
N// The list of UART peripherals.
N//
N//*****************************************************************************
Nstatic const unsigned long g_ulUARTPeriph[3] =
N{
N    SYSCTL_PERIPH_UART0, SYSCTL_PERIPH_UART1, SYSCTL_PERIPH_UART2
X    0x10000001, 0x10000002, 0x10000004
N};
N
N//*****************************************************************************
N//
N//! Determines whether the ring buffer whose pointers and size are provided
N//! is full or not.
N//!
N//! \param pulRead points to the read index for the buffer.
N//! \param pulWrite points to the write index for the buffer.
N//! \param ulSize is the size of the buffer in bytes.
N//!
N//! This function is used to determine whether or not a given ring buffer is
N//! full.  The structure of the code is specifically to ensure that we do not
N//! see warnings from the compiler related to the order of volatile accesses
N//! being undefined.
N//!
N//! \return Returns \b true if the buffer is full or \b false otherwise.
N//
N//*****************************************************************************
N#ifdef UART_BUFFERED
Nstatic tBoolean
NIsBufferFull(volatile unsigned long *pulRead,
N             volatile unsigned long *pulWrite, unsigned long ulSize)
N{
N    unsigned long ulWrite;
N    unsigned long ulRead;
N
N    ulWrite = *pulWrite;
N    ulRead = *pulRead;
N
N    return((((ulWrite + 1) % ulSize) == ulRead) ? true : false);
X    return((((ulWrite + 1) % ulSize) == ulRead) ? 1 : 0);
N}
N#endif
N
N//*****************************************************************************
N//
N//! Determines whether the ring buffer whose pointers and size are provided
N//! is empty or not.
N//!
N//! \param pulRead points to the read index for the buffer.
N//! \param pulWrite points to the write index for the buffer.
N//!
N//! This function is used to determine whether or not a given ring buffer is
N//! empty.  The structure of the code is specifically to ensure that we do not
N//! see warnings from the compiler related to the order of volatile accesses
N//! being undefined.
N//!
N//! \return Returns \b true if the buffer is empty or \b false otherwise.
N//
N//*****************************************************************************
N#ifdef UART_BUFFERED
Nstatic tBoolean
NIsBufferEmpty(volatile unsigned long *pulRead,
N              volatile unsigned long *pulWrite)
N{
N    unsigned long ulWrite;
N    unsigned long ulRead;
N
N    ulWrite = *pulWrite;
N    ulRead = *pulRead;
N
N    return((ulWrite  == ulRead) ? true : false);
X    return((ulWrite  == ulRead) ? 1 : 0);
N}
N#endif
N
N//*****************************************************************************
N//
N//! Determines the number of bytes of data contained in a ring buffer.
N//!
N//! \param pulRead points to the read index for the buffer.
N//! \param pulWrite points to the write index for the buffer.
N//! \param ulSize is the size of the buffer in bytes.
N//!
N//! This function is used to determine how many bytes of data a given ring
N//! buffer currently contains.  The structure of the code is specifically to
N//! ensure that we do not see warnings from the compiler related to the order
N//! of volatile accesses being undefined.
N//!
N//! \return Returns the number of bytes of data currently in the buffer.
N//
N//*****************************************************************************
N#ifdef UART_BUFFERED
Nstatic unsigned long
NGetBufferCount(volatile unsigned long *pulRead,
N               volatile unsigned long *pulWrite, unsigned long ulSize)
N{
N    unsigned long ulWrite;
N    unsigned long ulRead;
N
N    ulWrite = *pulWrite;
N    ulRead = *pulRead;
N
N    return((ulWrite >= ulRead) ? (ulWrite - ulRead) :
N                                 (ulSize - (ulRead - ulWrite)));
N}
N#endif
N
N//*****************************************************************************
N//
N// Take as many bytes from the transmit buffer as we have space for and move
N// them into the UART transmit FIFO.
N//
N//*****************************************************************************
N#ifdef UART_BUFFERED
Nstatic void
NUARTPrimeTransmit(unsigned long ulBase)
N{
N    //
N    // Do we have any data to transmit?
N    //
N    if(!TX_BUFFER_EMPTY)
X    if(!(IsBufferEmpty(&g_ulUARTTxReadIndex, &g_ulUARTTxWriteIndex)))
N    {
N        //
N        // Disable the UART interrupt. If we don't do this there is a race
N        // condition which can cause the read index to be corrupted.
N        //
N        MAP_IntDisable(g_ulUARTInt[g_ulPortNum]);
X        ((void (*)(unsigned long ulInterrupt))((unsigned long *)(((unsigned long *)0x01000010)[14]))[3])(g_ulUARTInt[g_ulPortNum]);
N
N        //
N        // Yes - take some characters out of the transmit buffer and feed
N        // them to the UART transmit FIFO.
N        //
N        while(MAP_UARTSpaceAvail(ulBase) && !TX_BUFFER_EMPTY)
X        while(((tBoolean (*)(unsigned long ulBase))((unsigned long *)(((unsigned long *)0x01000010)[1]))[12])(ulBase) && !(IsBufferEmpty(&g_ulUARTTxReadIndex, &g_ulUARTTxWriteIndex)))
N        {
N            MAP_UARTCharPutNonBlocking(ulBase,
X            ((tBoolean (*)(unsigned long ulBase, unsigned char ucData))((unsigned long *)(((unsigned long *)0x01000010)[1]))[15])(ulBase,
N                                       g_pcUARTTxBuffer[g_ulUARTTxReadIndex]);
N            ADVANCE_TX_BUFFER_INDEX(g_ulUARTTxReadIndex);
X            (g_ulUARTTxReadIndex) = ((g_ulUARTTxReadIndex) + 1) % 1024;
N        }
N
N        //
N        // Reenable the UART interrupt.
N        //
N        MAP_IntEnable(g_ulUARTInt[g_ulPortNum]);
X        ((void (*)(unsigned long ulInterrupt))((unsigned long *)(((unsigned long *)0x01000010)[14]))[0])(g_ulUARTInt[g_ulPortNum]);
N    }
N}
N#endif
N
N//*****************************************************************************
N//
N//! Initializes the UART console.
N//!
N//! \param ulPortNum is the number of UART port to use for the serial console
N//! (0-2)
N//!
N//! This function will initialize the specified serial port to be used as a
N//! serial console.  The serial parameters will be set to 115200, 8-N-1.
N//! An application wishing to use a different baud rate may call
N//! UARTStdioInitExpClk() instead of this function.
N//!
N//! This function or UARTStdioInitExpClk() must be called prior to using any
N//! of the other UART console functions: UARTprintf() or UARTgets().  In order
N//! for this function to work correctly, SysCtlClockSet() must be called prior
N//! to calling this function.
N//!
N//! It is assumed that the caller has previously configured the relevant UART
N//! pins for operation as a UART rather than as GPIOs.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NUARTStdioInit(unsigned long ulPortNum)
N{
N    //
N    // Pass this call on to the version of the function allowing the baud rate
N    // to be specified.
N    //
N    UARTStdioInitExpClk(ulPortNum, 115200);
N}
N
N//*****************************************************************************
N//
N//! Initializes the UART console and allows the baud rate to be selected.
N//!
N//! \param ulPortNum is the number of UART port to use for the serial console
N//! (0-2)
N//! \param ulBaud is the bit rate that the UART is to be configured to use.
N//!
N//! This function will initialize the specified serial port to be used as a
N//! serial console.  The serial parameters will be set to 8-N-1 and the bit
N//! rate set according to the value of the \e ulBaud parameter.
N//!
N//! This function or UARTStdioInit() must be called prior to using any of the
N//! other UART console functions: UARTprintf() or UARTgets().  In order for
N//! this function to work correctly, SysCtlClockSet() must be called prior to
N//! calling this function.  An application wishing to use 115,200 baud may call
N//! UARTStdioInit() instead of this function but should not call both
N//! functions.
N//!
N//! It is assumed that the caller has previously configured the relevant UART
N//! pins for operation as a UART rather than as GPIOs.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NUARTStdioInitExpClk(unsigned long ulPortNum, unsigned long ulBaud)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT((ulPortNum == 0) || (ulPortNum == 1) ||
N           (ulPortNum == 2));
X    ;
N
N#ifdef UART_BUFFERED
N    //
N    // In buffered mode, we only allow a single instance to be opened.
N    //
N    ASSERT(g_ulBase == 0);
X    ;
N#endif
N
N    //
N    // Check to make sure the UART peripheral is present.
N    //
N    if(!MAP_SysCtlPeripheralPresent(g_ulUARTPeriph[ulPortNum]))
X    if(!((tBoolean (*)(unsigned long ulPeripheral))((unsigned long *)(((unsigned long *)0x01000010)[13]))[4])(g_ulUARTPeriph[ulPortNum]))
N    {
N        return;
N    }
N
N    //
N    // Select the base address of the UART.
N    //
N    g_ulBase = g_ulUARTBase[ulPortNum];
N
N    //
N    // Enable the UART peripheral for use.
N    //
N    MAP_SysCtlPeripheralEnable(g_ulUARTPeriph[ulPortNum]);
X    ((void (*)(unsigned long ulPeripheral))((unsigned long *)(((unsigned long *)0x01000010)[13]))[6])(g_ulUARTPeriph[ulPortNum]);
N
N    //
N    // Configure the UART for 115200, n, 8, 1
N    //
N    MAP_UARTConfigSetExpClk(g_ulBase, MAP_SysCtlClockGet(), ulBaud,
X    ((void (*)(unsigned long ulBase, unsigned long ulUARTClk, unsigned long ulBaud, unsigned long ulConfig))((unsigned long *)(((unsigned long *)0x01000010)[1]))[5])(g_ulBase, ((unsigned long (*)(void))((unsigned long *)(((unsigned long *)0x01000010)[13]))[24])(), ulBaud,
N                            (UART_CONFIG_PAR_NONE | UART_CONFIG_STOP_ONE |
X                            (0x00000000 | 0x00000000 |
N                             UART_CONFIG_WLEN_8));
X                             0x00000060));
N
N#ifdef UART_BUFFERED
N    //
N    // Set the UART to interrupt whenever the TX FIFO is almost empty or
N    // when any character is received.
N    //
N    MAP_UARTFIFOLevelSet(g_ulBase, UART_FIFO_TX1_8, UART_FIFO_RX1_8);
X    ((void (*)(unsigned long ulBase, unsigned long ulTxLevel, unsigned long ulRxLevel))((unsigned long *)(((unsigned long *)0x01000010)[1]))[3])(g_ulBase, 0x00000000, 0x00000000);
N
N    //
N    // Flush both the buffers.
N    //
N    UARTFlushRx();
N    UARTFlushTx(true);
X    UARTFlushTx(1);
N
N    //
N    // Remember which interrupt we are dealing with.
N    //
N    g_ulPortNum = ulPortNum;
N
N    //
N    // We are configured for buffered output so enable the master interrupt
N    // for this UART and the receive interrupts.  We don't actually enable the
N    // transmit interrupt in the UART itself until some data has been placed
N    // in the transmit buffer.
N    //
N    MAP_UARTIntDisable(g_ulBase, 0xFFFFFFFF);
X    ((void (*)(unsigned long ulBase, unsigned long ulIntFlags))((unsigned long *)(((unsigned long *)0x01000010)[1]))[18])(g_ulBase, 0xFFFFFFFF);
N    MAP_UARTIntEnable(g_ulBase, UART_INT_RX | UART_INT_RT);
X    ((void (*)(unsigned long ulBase, unsigned long ulIntFlags))((unsigned long *)(((unsigned long *)0x01000010)[1]))[17])(g_ulBase, 0x010 | 0x040);
N    MAP_IntEnable(g_ulUARTInt[ulPortNum]);
X    ((void (*)(unsigned long ulInterrupt))((unsigned long *)(((unsigned long *)0x01000010)[14]))[0])(g_ulUARTInt[ulPortNum]);
N#endif
N
N    //
N    // Enable the UART operation.
N    //
N    MAP_UARTEnable(g_ulBase);
X    ((void (*)(unsigned long ulBase))((unsigned long *)(((unsigned long *)0x01000010)[1]))[7])(g_ulBase);
N}
N
N//*****************************************************************************
N//
N//! Writes a string of characters to the UART output.
N//!
N//! \param pcBuf points to a buffer containing the string to transmit.
N//! \param ulLen is the length of the string to transmit.
N//!
N//! This function will transmit the string to the UART output.  The number of
N//! characters transmitted is determined by the \e ulLen parameter.  This
N//! function does no interpretation or translation of any characters.  Since
N//! the output is sent to a UART, any LF (/n) characters encountered will be
N//! replaced with a CRLF pair.
N//!
N//! Besides using the \e ulLen parameter to stop transmitting the string, if a
N//! null character (0) is encountered, then no more characters will be
N//! transmitted and the function will return.
N//!
N//! In non-buffered mode, this function is blocking and will not return until
N//! all the characters have been written to the output FIFO.  In buffered mode,
N//! the characters are written to the UART transmit buffer and the call returns
N//! immediately.  If insufficient space remains in the transmit buffer,
N//! additional characters are discarded.
N//!
N//! \return Returns the count of characters written.
N//
N//*****************************************************************************
Nint
NUARTwrite(const char *pcBuf, unsigned long ulLen)
N{
N#ifdef UART_BUFFERED
N    unsigned int uIdx;
N
N    //
N    // Check for valid arguments.
N    //
N    ASSERT(pcBuf != 0);
X    ;
N    ASSERT(g_ulBase != 0);
X    ;
N
N    //
N    // Send the characters
N    //
N    for(uIdx = 0; uIdx < ulLen; uIdx++)
N    {
N        //
N        // If the character to the UART is \n, then add a \r before it so that
N        // \n is translated to \n\r in the output.
N        //
N        if(pcBuf[uIdx] == '\n')
N        {
N            if(!TX_BUFFER_FULL)
X            if(!(IsBufferFull(&g_ulUARTTxReadIndex, &g_ulUARTTxWriteIndex, 1024)))
N            {
N                g_pcUARTTxBuffer[g_ulUARTTxWriteIndex] = '\r';
N                ADVANCE_TX_BUFFER_INDEX(g_ulUARTTxWriteIndex);
X                (g_ulUARTTxWriteIndex) = ((g_ulUARTTxWriteIndex) + 1) % 1024;
N            }
N            else
N            {
N                //
N                // Buffer is full - discard remaining characters and return.
N                //
N                break;
N            }
N        }
N
N        //
N        // Send the character to the UART output.
N        //
N        if(!TX_BUFFER_FULL)
X        if(!(IsBufferFull(&g_ulUARTTxReadIndex, &g_ulUARTTxWriteIndex, 1024)))
N        {
N            g_pcUARTTxBuffer[g_ulUARTTxWriteIndex] = pcBuf[uIdx];
N            ADVANCE_TX_BUFFER_INDEX(g_ulUARTTxWriteIndex);
X            (g_ulUARTTxWriteIndex) = ((g_ulUARTTxWriteIndex) + 1) % 1024;
N        }
N        else
N        {
N            //
N            // Buffer is full - discard remaining characters and return.
N            //
N            break;
N        }
N    }
N
N    //
N    // If we have anything in the buffer, make sure that the UART is set
N    // up to transmit it.
N    //
N    if(!TX_BUFFER_EMPTY)
X    if(!(IsBufferEmpty(&g_ulUARTTxReadIndex, &g_ulUARTTxWriteIndex)))
N    {
N        UARTPrimeTransmit(g_ulBase);
N        MAP_UARTIntEnable(g_ulBase, UART_INT_TX);
X        ((void (*)(unsigned long ulBase, unsigned long ulIntFlags))((unsigned long *)(((unsigned long *)0x01000010)[1]))[17])(g_ulBase, 0x020);
N    }
N
N    //
N    // Return the number of characters written.
N    //
N    return(uIdx);
N#else
S    unsigned int uIdx;
S
S    //
S    // Check for valid UART base address, and valid arguments.
S    //
S    ASSERT(g_ulBase != 0);
S    ASSERT(pcBuf != 0);
S
S    //
S    // Send the characters
S    //
S    for(uIdx = 0; uIdx < ulLen; uIdx++)
S    {
S        //
S        // If the character to the UART is \n, then add a \r before it so that
S        // \n is translated to \n\r in the output.
S        //
S        if(pcBuf[uIdx] == '\n')
S        {
S            MAP_UARTCharPut(g_ulBase, '\r');
S        }
S
S        //
S        // Send the character to the UART output.
S        //
S        MAP_UARTCharPut(g_ulBase, pcBuf[uIdx]);
S    }
S
S    //
S    // Return the number of characters written.
S    //
S    return(uIdx);
N#endif
N}
N
N//*****************************************************************************
N//
N//! A simple UART based get string function, with some line processing.
N//!
N//! \param pcBuf points to a buffer for the incoming string from the UART.
N//! \param ulLen is the length of the buffer for storage of the string,
N//! including the trailing 0.
N//!
N//! This function will receive a string from the UART input and store the
N//! characters in the buffer pointed to by \e pcBuf.  The characters will
N//! continue to be stored until a termination character is received.  The
N//! termination characters are CR, LF, or ESC.  A CRLF pair is treated as a
N//! single termination character.  The termination characters are not stored in
N//! the string.  The string will be terminated with a 0 and the function will
N//! return.
N//!
N//! In both buffered and unbuffered modes, this function will block until
N//! a termination character is received.  If non-blocking operation is required
N//! in buffered mode, a call to UARTPeek() may be made to determine whether
N//! a termination character already exists in the receive buffer prior to
N//! calling UARTgets().
N//!
N//! Since the string will be null terminated, the user must ensure that the
N//! buffer is sized to allow for the additional null character.
N//!
N//! \return Returns the count of characters that were stored, not including
N//! the trailing 0.
N//
N//*****************************************************************************
Nint
NUARTgets(char *pcBuf, unsigned long ulLen)
N{
N#ifdef UART_BUFFERED
N    unsigned long ulCount = 0;
N    char cChar;
N
N    //
N    // Check the arguments.
N    //
N    ASSERT(pcBuf != 0);
X    ;
N    ASSERT(ulLen != 0);
X    ;
N    ASSERT(g_ulBase != 0);
X    ;
N
N    //
N    // Adjust the length back by 1 to leave space for the trailing
N    // null terminator.
N    //
N    ulLen--;
N
N    //
N    // Process characters until a newline is received.
N    //
N    while(1)
N    {
N        //
N        // Read the next character from the receive buffer.
N        //
N        if(!RX_BUFFER_EMPTY)
X        if(!(IsBufferEmpty(&g_ulUARTRxReadIndex, &g_ulUARTRxWriteIndex)))
N        {
N            cChar = g_pcUARTRxBuffer[g_ulUARTRxReadIndex];
N            ADVANCE_RX_BUFFER_INDEX(g_ulUARTRxReadIndex);
X            (g_ulUARTRxReadIndex) = ((g_ulUARTRxReadIndex) + 1) % 128;
N
N            //
N            // See if a newline or escape character was received.
N            //
N            if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b))
N            {
N                //
N                // Stop processing the input and end the line.
N                //
N                break;
N            }
N
N            //
N            // Process the received character as long as we are not at the end
N            // of the buffer.  If the end of the buffer has been reached then
N            // all additional characters are ignored until a newline is
N            // received.
N            //
N            if(ulCount < ulLen)
N            {
N                //
N                // Store the character in the caller supplied buffer.
N                //
N                pcBuf[ulCount] = cChar;
N
N                //
N                // Increment the count of characters received.
N                //
N                ulCount++;
N            }
N        }
N    }
N
N    //
N    // Add a null termination to the string.
N    //
N    pcBuf[ulCount] = 0;
N
N    //
N    // Return the count of chars in the buffer, not counting the trailing 0.
N    //
N    return(ulCount);
N#else
S    unsigned long ulCount = 0;
S    char cChar;
S    static char bLastWasCR = 0;
S
S    //
S    // Check the arguments.
S    //
S    ASSERT(pcBuf != 0);
S    ASSERT(ulLen != 0);
S    ASSERT(g_ulBase != 0);
S
S    //
S    // Adjust the length back by 1 to leave space for the trailing
S    // null terminator.
S    //
S    ulLen--;
S
S    //
S    // Process characters until a newline is received.
S    //
S    while(1)
S    {
S        //
S        // Read the next character from the console.
S        //
S        cChar = MAP_UARTCharGet(g_ulBase);
S
S        //
S        // See if the backspace key was pressed.
S        //
S        if(cChar == '\b')
S        {
S            //
S            // If there are any characters already in the buffer, then delete
S            // the last.
S            //
S            if(ulCount)
S            {
S                //
S                // Rub out the previous character.
S                //
S                UARTwrite("\b \b", 3);
S
S                //
S                // Decrement the number of characters in the buffer.
S                //
S                ulCount--;
S            }
S
S            //
S            // Skip ahead to read the next character.
S            //
S            continue;
S        }
S
S        //
S        // If this character is LF and last was CR, then just gobble up the
S        // character because the EOL processing was taken care of with the CR.
S        //
S        if((cChar == '\n') && bLastWasCR)
S        {
S            bLastWasCR = 0;
S            continue;
S        }
S
S        //
S        // See if a newline or escape character was received.
S        //
S        if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b))
S        {
S            //
S            // If the character is a CR, then it may be followed by a LF which
S            // should be paired with the CR.  So remember that a CR was
S            // received.
S            //
S            if(cChar == '\r')
S            {
S                bLastWasCR = 1;
S            }
S
S            //
S            // Stop processing the input and end the line.
S            //
S            break;
S        }
S
S        //
S        // Process the received character as long as we are not at the end of
S        // the buffer.  If the end of the buffer has been reached then all
S        // additional characters are ignored until a newline is received.
S        //
S        if(ulCount < ulLen)
S        {
S            //
S            // Store the character in the caller supplied buffer.
S            //
S            pcBuf[ulCount] = cChar;
S
S            //
S            // Increment the count of characters received.
S            //
S            ulCount++;
S
S            //
S            // Reflect the character back to the user.
S            //
S            MAP_UARTCharPut(g_ulBase, cChar);
S        }
S    }
S
S    //
S    // Add a null termination to the string.
S    //
S    pcBuf[ulCount] = 0;
S
S    //
S    // Send a CRLF pair to the terminal to end the line.
S    //
S    UARTwrite("\r\n", 2);
S
S    //
S    // Return the count of chars in the buffer, not counting the trailing 0.
S    //
S    return(ulCount);
N#endif
N}
N
N//*****************************************************************************
N//
N//! Read a single character from the UART, blocking if necessary.
N//!
N//! This function will receive a single character from the UART and store it at
N//! the supplied address.
N//!
N//! In both buffered and unbuffered modes, this function will block until a
N//! character is received.  If non-blocking operation is required in buffered
N//! mode, a call to UARTRxAvail() may be made to determine whether any
N//! characters are currently available for reading.
N//!
N//! \return Returns the character read.
N//
N//*****************************************************************************
Nunsigned char
NUARTgetc(void)
N{
N#ifdef UART_BUFFERED
N    unsigned char cChar;
N
N    //
N    // Wait for a character to be received.
N    //
N    while(RX_BUFFER_EMPTY)
X    while((IsBufferEmpty(&g_ulUARTRxReadIndex, &g_ulUARTRxWriteIndex)))
N    {
N        //
N        // Block waiting for a character to be received (if the buffer is
N        // currently empty).
N        //
N    }
N
N    //
N    // Read a character from the buffer.
N    //
N    cChar = g_pcUARTRxBuffer[g_ulUARTRxReadIndex];
N    ADVANCE_RX_BUFFER_INDEX(g_ulUARTRxReadIndex);
X    (g_ulUARTRxReadIndex) = ((g_ulUARTRxReadIndex) + 1) % 128;
N
N    //
N    // Return the character to the caller.
N    //
N    return(cChar);
N#else
S    //
S    // Block until a character is received by the UART then return it to
S    // the caller.
S    //
S    return(MAP_UARTCharGet(g_ulBase));
N#endif
N}
N
N//*****************************************************************************
N//
N//! A simple UART based printf function supporting \%c, \%d, \%p, \%s, \%u,
N//! \%x, and \%X.
N//!
N//! \param pcString is the format string.
N//! \param ... are the optional arguments, which depend on the contents of the
N//! format string.
N//!
N//! This function is very similar to the C library <tt>fprintf()</tt> function.
N//! All of its output will be sent to the UART.  Only the following formatting
N//! characters are supported:
N//!
N//! - \%c to print a character
N//! - \%d to print a decimal value
N//! - \%s to print a string
N//! - \%u to print an unsigned decimal value
N//! - \%x to print a hexadecimal value using lower case letters
N//! - \%X to print a hexadecimal value using lower case letters (not upper case
N//! letters as would typically be used)
N//! - \%p to print a pointer as a hexadecimal value
N//! - \%\% to print out a \% character
N//!
N//! For \%s, \%d, \%u, \%p, \%x, and \%X, an optional number may reside
N//! between the \% and the format character, which specifies the minimum number
N//! of characters to use for that value; if preceded by a 0 then the extra
N//! characters will be filled with zeros instead of spaces.  For example,
N//! ``\%8d'' will use eight characters to print the decimal value with spaces
N//! added to reach eight; ``\%08d'' will use eight characters as well but will
N//! add zeroes instead of spaces.
N//!
N//! The type of the arguments after \e pcString must match the requirements of
N//! the format string.  For example, if an integer was passed where a string
N//! was expected, an error of some kind will most likely occur.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NUARTprintf(const char *pcString, ...)
N{
N    unsigned long ulIdx, ulValue, ulPos, ulCount, ulBase, ulNeg;
N    char *pcStr, pcBuf[16], cFill;
N    va_list vaArgP;
N
N    //
N    // Check the arguments.
N    //
N    ASSERT(pcString != 0);
X    ;
N
N    //
N    // Start the varargs processing.
N    //
N    va_start(vaArgP, pcString);
X    __va_start(vaArgP, pcString);
N
N    //
N    // Loop while there are more characters in the string.
N    //
N    while(*pcString)
N    {
N        //
N        // Find the first non-% character, or the end of the string.
N        //
N        for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
N            ulIdx++)
N        {
N        }
N
N        //
N        // Write this portion of the string.
N        //
N        UARTwrite(pcString, ulIdx);
N
N        //
N        // Skip the portion of the string that was written.
N        //
N        pcString += ulIdx;
N
N        //
N        // See if the next character is a %.
N        //
N        if(*pcString == '%')
N        {
N            //
N            // Skip the %.
N            //
N            pcString++;
N
N            //
N            // Set the digit count to zero, and the fill character to space
N            // (i.e. to the defaults).
N            //
N            ulCount = 0;
N            cFill = ' ';
N
N            //
N            // It may be necessary to get back here to process more characters.
N            // Goto's aren't pretty, but effective.  I feel extremely dirty for
N            // using not one but two of the beasts.
N            //
Nagain:
N
N            //
N            // Determine how to handle the next character.
N            //
N            switch(*pcString++)
N            {
N                //
N                // Handle the digit characters.
N                //
N                case '0':
N                case '1':
N                case '2':
N                case '3':
N                case '4':
N                case '5':
N                case '6':
N                case '7':
N                case '8':
N                case '9':
N                {
N                    //
N                    // If this is a zero, and it is the first digit, then the
N                    // fill character is a zero instead of a space.
N                    //
N                    if((pcString[-1] == '0') && (ulCount == 0))
N                    {
N                        cFill = '0';
N                    }
N
N                    //
N                    // Update the digit count.
N                    //
N                    ulCount *= 10;
N                    ulCount += pcString[-1] - '0';
N
N                    //
N                    // Get the next character.
N                    //
N                    goto again;
N                }
N
N                //
N                // Handle the %c command.
N                //
N                case 'c':
N                {
N                    //
N                    // Get the value from the varargs.
N                    //
N                    ulValue = va_arg(vaArgP, unsigned long);
X                    ulValue = __va_arg(vaArgP, unsigned long);
N
N                    //
N                    // Print out the character.
N                    //
N                    UARTwrite((char *)&ulValue, 1);
N
N                    //
N                    // This command has been handled.
N                    //
N                    break;
N                }
N
N                //
N                // Handle the %d command.
N                //
N                case 'd':
N                {
N                    //
N                    // Get the value from the varargs.
N                    //
N                    ulValue = va_arg(vaArgP, unsigned long);
X                    ulValue = __va_arg(vaArgP, unsigned long);
N
N                    //
N                    // Reset the buffer position.
N                    //
N                    ulPos = 0;
N
N                    //
N                    // If the value is negative, make it positive and indicate
N                    // that a minus sign is needed.
N                    //
N                    if((long)ulValue < 0)
N                    {
N                        //
N                        // Make the value positive.
N                        //
N                        ulValue = -(long)ulValue;
N
N                        //
N                        // Indicate that the value is negative.
N                        //
N                        ulNeg = 1;
N                    }
N                    else
N                    {
N                        //
N                        // Indicate that the value is positive so that a minus
N                        // sign isn't inserted.
N                        //
N                        ulNeg = 0;
N                    }
N
N                    //
N                    // Set the base to 10.
N                    //
N                    ulBase = 10;
N
N                    //
N                    // Convert the value to ASCII.
N                    //
N                    goto convert;
N                }
N
N                //
N                // Handle the %s command.
N                //
N                case 's':
N                {
N                    //
N                    // Get the string pointer from the varargs.
N                    //
N                    pcStr = va_arg(vaArgP, char *);
X                    pcStr = __va_arg(vaArgP, char *);
N
N                    //
N                    // Determine the length of the string.
N                    //
N                    for(ulIdx = 0; pcStr[ulIdx] != '\0'; ulIdx++)
N                    {
N                    }
N
N                    //
N                    // Write the string.
N                    //
N                    UARTwrite(pcStr, ulIdx);
N
N                    //
N                    // Write any required padding spaces
N                    //
N                    if(ulCount > ulIdx)
N                    {
N                        ulCount -= ulIdx;
N                        while(ulCount--)
N                        {
N                            UARTwrite(" ", 1);
N                        }
N                    }
N                    //
N                    // This command has been handled.
N                    //
N                    break;
N                }
N
N                //
N                // Handle the %u command.
N                //
N                case 'u':
N                {
N                    //
N                    // Get the value from the varargs.
N                    //
N                    ulValue = va_arg(vaArgP, unsigned long);
X                    ulValue = __va_arg(vaArgP, unsigned long);
N
N                    //
N                    // Reset the buffer position.
N                    //
N                    ulPos = 0;
N
N                    //
N                    // Set the base to 10.
N                    //
N                    ulBase = 10;
N
N                    //
N                    // Indicate that the value is positive so that a minus sign
N                    // isn't inserted.
N                    //
N                    ulNeg = 0;
N
N                    //
N                    // Convert the value to ASCII.
N                    //
N                    goto convert;
N                }
N
N                //
N                // Handle the %x and %X commands.  Note that they are treated
N                // identically; i.e. %X will use lower case letters for a-f
N                // instead of the upper case letters is should use.  We also
N                // alias %p to %x.
N                //
N                case 'x':
N                case 'X':
N                case 'p':
N                {
N                    //
N                    // Get the value from the varargs.
N                    //
N                    ulValue = va_arg(vaArgP, unsigned long);
X                    ulValue = __va_arg(vaArgP, unsigned long);
N
N                    //
N                    // Reset the buffer position.
N                    //
N                    ulPos = 0;
N
N                    //
N                    // Set the base to 16.
N                    //
N                    ulBase = 16;
N
N                    //
N                    // Indicate that the value is positive so that a minus sign
N                    // isn't inserted.
N                    //
N                    ulNeg = 0;
N
N                    //
N                    // Determine the number of digits in the string version of
N                    // the value.
N                    //
Nconvert:
N                    for(ulIdx = 1;
N                        (((ulIdx * ulBase) <= ulValue) &&
N                         (((ulIdx * ulBase) / ulBase) == ulIdx));
N                        ulIdx *= ulBase, ulCount--)
N                    {
N                    }
N
N                    //
N                    // If the value is negative, reduce the count of padding
N                    // characters needed.
N                    //
N                    if(ulNeg)
N                    {
N                        ulCount--;
N                    }
N
N                    //
N                    // If the value is negative and the value is padded with
N                    // zeros, then place the minus sign before the padding.
N                    //
N                    if(ulNeg && (cFill == '0'))
N                    {
N                        //
N                        // Place the minus sign in the output buffer.
N                        //
N                        pcBuf[ulPos++] = '-';
N
N                        //
N                        // The minus sign has been placed, so turn off the
N                        // negative flag.
N                        //
N                        ulNeg = 0;
N                    }
N
N                    //
N                    // Provide additional padding at the beginning of the
N                    // string conversion if needed.
N                    //
N                    if((ulCount > 1) && (ulCount < 16))
N                    {
N                        for(ulCount--; ulCount; ulCount--)
N                        {
N                            pcBuf[ulPos++] = cFill;
N                        }
N                    }
N
N                    //
N                    // If the value is negative, then place the minus sign
N                    // before the number.
N                    //
N                    if(ulNeg)
N                    {
N                        //
N                        // Place the minus sign in the output buffer.
N                        //
N                        pcBuf[ulPos++] = '-';
N                    }
N
N                    //
N                    // Convert the value into a string.
N                    //
N                    for(; ulIdx; ulIdx /= ulBase)
N                    {
N                        pcBuf[ulPos++] = g_pcHex[(ulValue / ulIdx) % ulBase];
N                    }
N
N                    //
N                    // Write the string.
N                    //
N                    UARTwrite(pcBuf, ulPos);
N
N                    //
N                    // This command has been handled.
N                    //
N                    break;
N                }
N
N                //
N                // Handle the %% command.
N                //
N                case '%':
N                {
N                    //
N                    // Simply write a single %.
N                    //
N                    UARTwrite(pcString - 1, 1);
N
N                    //
N                    // This command has been handled.
N                    //
N                    break;
N                }
N
N                //
N                // Handle all other commands.
N                //
N                default:
N                {
N                    //
N                    // Indicate an error.
N                    //
N                    UARTwrite("ERROR", 5);
N
N                    //
N                    // This command has been handled.
N                    //
N                    break;
N                }
N            }
N        }
N    }
N
N    //
N    // End the varargs processing.
N    //
N    va_end(vaArgP);
X    __va_end(vaArgP);
N}
N
N//*****************************************************************************
N//
N//! Returns the number of bytes available in the receive buffer.
N//!
N//! This function, available only when the module is built to operate in
N//! buffered mode using \b UART_BUFFERED, may be used to determine the number
N//! of bytes of data currently available in the receive buffer.
N//!
N//! \return Returns the number of available bytes.
N//
N//*****************************************************************************
N#if defined(UART_BUFFERED) || defined(DOXYGEN)
X#if 1L || 0L
Nint
NUARTRxBytesAvail(void)
N{
N    return(RX_BUFFER_USED);
X    return((GetBufferCount(&g_ulUARTRxReadIndex, &g_ulUARTRxWriteIndex, 128)));
N}
N#endif
N
N#if defined(UART_BUFFERED) || defined(DOXYGEN)
X#if 1L || 0L
N//*****************************************************************************
N//
N//! Returns the number of bytes free in the transmit buffer.
N//!
N//! This function, available only when the module is built to operate in
N//! buffered mode using \b UART_BUFFERED, may be used to determine the amount
N//! of space currently available in the transmit buffer.
N//!
N//! \return Returns the number of free bytes.
N//
N//*****************************************************************************
Nint
NUARTTxBytesFree(void)
N{
N    return(TX_BUFFER_FREE);
X    return((1024 - (GetBufferCount(&g_ulUARTTxReadIndex, &g_ulUARTTxWriteIndex, 1024))));
N}
N#endif
N
N//*****************************************************************************
N//
N//! Looks ahead in the receive buffer for a particular character.
N//!
N//! \param ucChar is the character that is to be searched for.
N//!
N//! This function, available only when the module is built to operate in
N//! buffered mode using \b UART_BUFFERED, may be used to look ahead in the
N//! receive buffer for a particular character and report its position if found.
N//! It is typically used to determine whether a complete line of user input is
N//! available, in which case ucChar should be set to CR ('\\r') which is used
N//! as the line end marker in the receive buffer.
N//!
N//! \return Returns -1 to indicate that the requested character does not exist
N//! in the receive buffer.  Returns a non-negative number if the character was
N//! found in which case the value represents the position of the first instance
N//! of \e ucChar relative to the receive buffer read pointer.
N//
N//*****************************************************************************
N#if defined(UART_BUFFERED) || defined(DOXYGEN)
X#if 1L || 0L
Nint
NUARTPeek(unsigned char ucChar)
N{
N    int iCount;
N    int iAvail;
N    unsigned long ulReadIndex;
N
N    //
N    // How many characters are there in the receive buffer?
N    //
N    iAvail = (int)RX_BUFFER_USED;
X    iAvail = (int)(GetBufferCount(&g_ulUARTRxReadIndex, &g_ulUARTRxWriteIndex, 128));
N    ulReadIndex = g_ulUARTRxReadIndex;
N
N    //
N    // Check all the unread characters looking for the one passed.
N    //
N    for(iCount = 0; iCount < iAvail; iCount++)
N    {
N        if(g_pcUARTRxBuffer[ulReadIndex] == ucChar)
N        {
N            //
N            // We found it so return the index
N            //
N            return(iCount);
N        }
N        else
N        {
N            //
N            // This one didn't match so move on to the next character.
N            //
N            ADVANCE_RX_BUFFER_INDEX(ulReadIndex);
X            (ulReadIndex) = ((ulReadIndex) + 1) % 128;
N        }
N    }
N
N    //
N    // If we drop out of the loop, we didn't find the character in the receive
N    // buffer.
N    //
N    return(-1);
N}
N#endif
N
N//*****************************************************************************
N//
N//! Flushes the receive buffer.
N//!
N//! This function, available only when the module is built to operate in
N//! buffered mode using \b UART_BUFFERED, may be used to discard any data
N//! received from the UART but not yet read using UARTgets().
N//!
N//! \return None.
N//
N//*****************************************************************************
N#if defined(UART_BUFFERED) || defined(DOXYGEN)
X#if 1L || 0L
Nvoid
NUARTFlushRx(void)
N{
N    unsigned long ulInt;
N
N    //
N    // Temporarily turn off interrupts.
N    //
N    ulInt = MAP_IntMasterDisable();
X    ulInt = ((tBoolean (*)(void))((unsigned long *)(((unsigned long *)0x01000010)[14]))[2])();
N
N    //
N    // Flush the receive buffer.
N    //
N    g_ulUARTRxReadIndex = 0;
N    g_ulUARTRxWriteIndex = 0;
N
N    //
N    // If interrupts were enabled when we turned them off, turn them
N    // back on again.
N    //
N    if(!ulInt)
N    {
N        MAP_IntMasterEnable();
X        ((tBoolean (*)(void))((unsigned long *)(((unsigned long *)0x01000010)[14]))[1])();
N    }
N}
N#endif
N
N//*****************************************************************************
N//
N//! Flushes the transmit buffer.
N//!
N//! \param bDiscard indicates whether any remaining data in the buffer should
N//! be discarded (\b true) or transmitted (\b false).
N//!
N//! This function, available only when the module is built to operate in
N//! buffered mode using \b UART_BUFFERED, may be used to flush the transmit
N//! buffer, either discarding or transmitting any data received via calls to
N//! UARTprintf() that is waiting to be transmitted.  On return, the transmit
N//! buffer will be empty.
N//!
N//! \return None.
N//
N//*****************************************************************************
N#if defined(UART_BUFFERED) || defined(DOXYGEN)
X#if 1L || 0L
Nvoid
NUARTFlushTx(tBoolean bDiscard)
N{
N    unsigned long ulInt;
N
N    //
N    // Should the remaining data be discarded or transmitted?
N    //
N    if(bDiscard)
N    {
N        //
N        // The remaining data should be discarded, so temporarily turn off
N        // interrupts.
N        //
N        ulInt = MAP_IntMasterDisable();
X        ulInt = ((tBoolean (*)(void))((unsigned long *)(((unsigned long *)0x01000010)[14]))[2])();
N
N        //
N        // Flush the transmit buffer.
N        //
N        g_ulUARTTxReadIndex = 0;
N        g_ulUARTTxWriteIndex = 0;
N
N        //
N        // If interrupts were enabled when we turned them off, turn them
N        // back on again.
N        //
N        if(!ulInt)
N        {
N            MAP_IntMasterEnable();
X            ((tBoolean (*)(void))((unsigned long *)(((unsigned long *)0x01000010)[14]))[1])();
N        }
N    }
N    else
N    {
N        //
N        // Wait for all remaining data to be transmitted before returning.
N        //
N        while(!TX_BUFFER_EMPTY)
X        while(!(IsBufferEmpty(&g_ulUARTTxReadIndex, &g_ulUARTTxWriteIndex)))
N        {
N        }
N    }
N}
N#endif
N
N//*****************************************************************************
N//
N//! Enables or disables echoing of received characters to the transmitter.
N//!
N//! \param bEnable must be set to \b true to enable echo or \b false to
N//! disable it.
N//!
N//! This function, available only when the module is built to operate in
N//! buffered mode using \b UART_BUFFERED, may be used to control whether or not
N//! received characters are automatically echoed back to the transmitter.  By
N//! default, echo is enabled and this is typically the desired behavior if
N//! the module is being used to support a serial command line.  In applications
N//! where this module is being used to provide a convenient, buffered serial
N//! interface over which application-specific binary protocols are being run,
N//! however, echo may be undesirable and this function can be used to disable
N//! it.
N//!
N//! \return None.
N//
N//*****************************************************************************
N#if defined(UART_BUFFERED) || defined(DOXYGEN)
X#if 1L || 0L
Nvoid
NUARTEchoSet(tBoolean bEnable)
N{
N    g_bDisableEcho = !bEnable;
N}
N#endif
N
N//*****************************************************************************
N//
N//! Handles UART interrupts.
N//!
N//! This function handles interrupts from the UART.  It will copy data from the
N//! transmit buffer to the UART transmit FIFO if space is available, and it
N//! will copy data from the UART receive FIFO to the receive buffer if data is
N//! available.
N//!
N//! \return None.
N//
N//*****************************************************************************
N#if defined(UART_BUFFERED) || defined(DOXYGEN)
X#if 1L || 0L
Nvoid
NUARTStdioIntHandler(void)
N{
N    unsigned long ulInts;
N    char cChar;
N    long lChar;
N    static tBoolean bLastWasCR = false;
X    static tBoolean bLastWasCR = 0;
N
N    //
N    // Get and clear the current interrupt source(s)
N    //
N    ulInts = MAP_UARTIntStatus(g_ulBase, true);
X    ulInts = ((unsigned long (*)(unsigned long ulBase, tBoolean bMasked))((unsigned long *)(((unsigned long *)0x01000010)[1]))[19])(g_ulBase, 1);
N    MAP_UARTIntClear(g_ulBase, ulInts);
X    ((void (*)(unsigned long ulBase, unsigned long ulIntFlags))((unsigned long *)(((unsigned long *)0x01000010)[1]))[20])(g_ulBase, ulInts);
N
N    //
N    // Are we being interrupted because the TX FIFO has space available?
N    //
N    if(ulInts & UART_INT_TX)
X    if(ulInts & 0x020)
N    {
N        //
N        // Move as many bytes as we can into the transmit FIFO.
N        //
N        UARTPrimeTransmit(g_ulBase);
N
N        //
N        // If the output buffer is empty, turn off the transmit interrupt.
N        //
N        if(TX_BUFFER_EMPTY)
X        if((IsBufferEmpty(&g_ulUARTTxReadIndex, &g_ulUARTTxWriteIndex)))
N        {
N            MAP_UARTIntDisable(g_ulBase, UART_INT_TX);
X            ((void (*)(unsigned long ulBase, unsigned long ulIntFlags))((unsigned long *)(((unsigned long *)0x01000010)[1]))[18])(g_ulBase, 0x020);
N        }
N    }
N
N    //
N    // Are we being interrupted due to a received character?
N    //
N    if(ulInts & (UART_INT_RX | UART_INT_RT))
X    if(ulInts & (0x010 | 0x040))
N    {
N        //
N        // Get all the available characters from the UART.
N        //
N        while(MAP_UARTCharsAvail(g_ulBase))
X        while(((tBoolean (*)(unsigned long ulBase))((unsigned long *)(((unsigned long *)0x01000010)[1]))[11])(g_ulBase))
N        {
N            //
N            // Read a character
N            //
N            lChar = MAP_UARTCharGetNonBlocking(g_ulBase);
X            lChar = ((long (*)(unsigned long ulBase))((unsigned long *)(((unsigned long *)0x01000010)[1]))[13])(g_ulBase);
N            cChar = (unsigned char)(lChar & 0xFF);
N
N            //
N            // If echo is disabled, we skip the various text filtering
N            // operations that would typically be required when supporting a
N            // command line.
N            //
N            if(!g_bDisableEcho)
N            {
N                //
N                // Handle backspace by erasing the last character in the buffer.
N                //
N                if(cChar == '\b')
N                {
N                    //
N                    // If there are any characters already in the buffer, then
N                    // delete the last.
N                    //
N                    if(!RX_BUFFER_EMPTY)
X                    if(!(IsBufferEmpty(&g_ulUARTRxReadIndex, &g_ulUARTRxWriteIndex)))
N                    {
N                        //
N                        // Rub out the previous character on the users terminal.
N                        //
N                        UARTwrite("\b \b", 3);
N
N                        //
N                        // Decrement the number of characters in the buffer.
N                        //
N                        if(g_ulUARTRxWriteIndex == 0)
N                        {
N                            g_ulUARTRxWriteIndex = UART_RX_BUFFER_SIZE - 1;
X                            g_ulUARTRxWriteIndex = 128 - 1;
N                        }
N                        else
N                        {
N                            g_ulUARTRxWriteIndex--;
N                        }
N                    }
N
N                    //
N                    // Skip ahead to read the next character.
N                    //
N                    continue;
N                }
N
N                //
N                // If this character is LF and last was CR, then just gobble up
N                // the character since we already echoed the previous CR and we
N                // don't want to store 2 characters in the buffer if we don't
N                // need to.
N                //
N                if((cChar == '\n') && bLastWasCR)
N                {
N                    bLastWasCR = false;
X                    bLastWasCR = 0;
N                    continue;
N                }
N
N                //
N                // See if a newline or escape character was received.
N                //
N                if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b))
N                {
N                    //
N                    // If the character is a CR, then it may be followed by an
N                    // LF which should be paired with the CR.  So remember that
N                    // a CR was received.
N                    //
N                    if(cChar == '\r')
N                    {
N                        bLastWasCR = 1;
N                    }
N
N                    //
N                    // Regardless of the line termination character received,
N                    // put a CR in the receive buffer as a marker telling
N                    // UARTgets() where the line ends.  We also send an
N                    // additional LF to ensure that the local terminal echo
N                    // receives both CR and LF.
N                    //
N                    cChar = '\r';
N                    UARTwrite("\n", 1);
N                }
N            }
N
N            //
N            // If there is space in the receive buffer, put the character
N            // there, otherwise throw it away.
N            //
N            if(!RX_BUFFER_FULL)
X            if(!(IsBufferFull(&g_ulUARTRxReadIndex, &g_ulUARTRxWriteIndex, 128)))
N            {
N                //
N                // Store the new character in the receive buffer
N                //
N                g_pcUARTRxBuffer[g_ulUARTRxWriteIndex] =
N                    (unsigned char)(lChar & 0xFF);
N                ADVANCE_RX_BUFFER_INDEX(g_ulUARTRxWriteIndex);
X                (g_ulUARTRxWriteIndex) = ((g_ulUARTRxWriteIndex) + 1) % 128;
N
N                //
N                // If echo is enabled, write the character to the transmit
N                // buffer so that the user gets some immediate feedback.
N                //
N                if(!g_bDisableEcho)
N                {
N                    UARTwrite(&cChar, 1);
N                }
N            }
N        }
N
N        //
N        // If we wrote anything to the transmit buffer, make sure it actually
N        // gets transmitted.
N        //
N        UARTPrimeTransmit(g_ulBase);
N        MAP_UARTIntEnable(g_ulBase, UART_INT_TX);
X        ((void (*)(unsigned long ulBase, unsigned long ulIntFlags))((unsigned long *)(((unsigned long *)0x01000010)[1]))[17])(g_ulBase, 0x020);
N    }
N}
N#endif
N
N//*****************************************************************************
N//
N// Close the Doxygen group.
N//! @}
N//
N//*****************************************************************************
