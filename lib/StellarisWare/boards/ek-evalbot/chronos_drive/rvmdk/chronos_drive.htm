<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\chronos_drive.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\chronos_drive.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Fri Jan 04 13:05:40 2013
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BSP_GpioPort1Isr &rArr; MRFI_GpioIsr &rArr; Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[18]">Reset_Handler</a>
 <LI><a href="#[9]">NmiSR</a>
 <LI><a href="#[a]">FaultISR</a>
 <LI><a href="#[b]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">SysCtlDelay</a><BR>
 <LI><a href="#[9]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NmiSR</a><BR>
 <LI><a href="#[a]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">FaultISR</a><BR>
 <LI><a href="#[b]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">BSP_GpioPort1Isr</a> from simplicitilib.o(i.BSP_GpioPort1Isr) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">BufferCallback</a> from wav.o(i.BufferCallback) referenced from wav.o(i.WavePlayContinue)
 <LI><a href="#[7]">CheckForReceivedRadioPacket</a> from chronos_drive.o(i.CheckForReceivedRadioPacket) referenced 2 times from chronos_drive.o(.data)
 <LI><a href="#[5]">CheckForStateChange</a> from chronos_drive.o(i.CheckForStateChange) referenced 2 times from chronos_drive.o(.data)
 <LI><a href="#[6]">CheckSoundEffect</a> from chronos_drive.o(i.CheckSoundEffect) referenced 2 times from chronos_drive.o(.data)
 <LI><a href="#[1]">CycleDisplayString</a> from chronos_drive.o(i.CycleDisplayString) referenced 2 times from chronos_drive.o(.data)
 <LI><a href="#[a]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 59 times from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">OutputAccelerometerReadings</a> from chronos_drive.o(i.OutputAccelerometerReadings) referenced 2 times from chronos_drive.o(.data)
 <LI><a href="#[11]">ReceiveCallback</a> from chronos_drive.o(i.ReceiveCallback) referenced from chronos_drive.o(i.main)
 <LI><a href="#[18]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">SchedulerSysTickIntHandler</a> from scheduler.o(i.SchedulerSysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[0]">ScrollTextBanner</a> from chronos_drive.o(i.ScrollTextBanner) referenced 2 times from chronos_drive.o(.data)
 <LI><a href="#[e]">SoundIntHandler</a> from sound.o(i.SoundIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2]">ToggleLED</a> from chronos_drive.o(i.ToggleLED) referenced 2 times from chronos_drive.o(.data)
 <LI><a href="#[3]">UpdateSpeedFromAccelReadings</a> from chronos_drive.o(i.UpdateSpeedFromAccelReadings) referenced 2 times from chronos_drive.o(.data)
 <LI><a href="#[f]">main</a> from chronos_drive.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
 <LI><a href="#[16]">nwk_processFreq</a> from simplicitilib.o(i.nwk_processFreq) referenced from simplicitilib.o(.constdata)
 <LI><a href="#[14]">nwk_processJoin</a> from simplicitilib.o(i.nwk_processJoin) referenced from simplicitilib.o(.constdata)
 <LI><a href="#[13]">nwk_processLink</a> from simplicitilib.o(i.nwk_processLink) referenced from simplicitilib.o(.constdata)
 <LI><a href="#[17]">nwk_processMgmt</a> from simplicitilib.o(i.nwk_processMgmt) referenced from simplicitilib.o(.constdata)
 <LI><a href="#[12]">nwk_processPing</a> from simplicitilib.o(i.nwk_processPing) referenced from simplicitilib.o(.constdata)
 <LI><a href="#[15]">nwk_processSecurity</a> from simplicitilib.o(i.nwk_processSecurity) referenced from simplicitilib.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[18]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[19]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[d7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[20]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[30]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForReceivedRadioPacket
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>

<P><STRONG><a name="[39]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForReceivedRadioPacket
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>

<P><STRONG><a name="[3a]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForReceivedRadioPacket
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>

<P><STRONG><a name="[da]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[db]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[dc]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[dd]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[55]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawCentered
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollTextBanner
</UL>

<P><STRONG><a name="[a8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_saveJoinedDevice
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findPeer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[1b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>BSP_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, simplicitilib.o(i.BSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>

<P><STRONG><a name="[d]"></a>BSP_GpioPort1Isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simplicitilib.o(i.BSP_GpioPort1Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = BSP_GpioPort1Isr &rArr; MRFI_GpioIsr &rArr; Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>BSP_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simplicitilib.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_Init &rArr; BSP_InitDrivers &rArr; BSP_InitButtons
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitDrivers
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>BSP_InitButtons</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, simplicitilib.o(i.BSP_InitButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_InitButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitDrivers
</UL>

<P><STRONG><a name="[2f]"></a>BSP_InitDrivers</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, simplicitilib.o(i.BSP_InitDrivers))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_InitDrivers &rArr; BSP_InitButtons
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitLeds
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[31]"></a>BSP_InitLeds</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, simplicitilib.o(i.BSP_InitLeds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_InitLeds
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitDrivers
</UL>

<P><STRONG><a name="[2b]"></a>BumpSensorGetStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sensors.o(i.BumpSensorGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BumpSensorGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundEffect
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeTurnStart
</UL>

<P><STRONG><a name="[b6]"></a>BumpSensorsInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sensors.o(i.BumpSensorsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BumpSensorsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>DACClassDDis</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac.o(i.DACClassDDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DACClassDDis &rArr; DACWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACWriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundClassDDis
</UL>

<P><STRONG><a name="[46]"></a>DACClassDEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac.o(i.DACClassDEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DACClassDEn &rArr; DACWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACWriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundClassDEn
</UL>

<P><STRONG><a name="[47]"></a>DACInit</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, dac.o(i.DACInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DACInit &rArr; DACWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACWriteRegister
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[4b]"></a>Display96x16x1Clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, display96x16x1.o(i.Display96x16x1Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display96x16x1Clear &rArr; Display96x16x1ClearLine &rArr; Display96x16x1WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1ClearLine
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>Display96x16x1ClearLine</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, display96x16x1.o(i.Display96x16x1ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Display96x16x1ClearLine &rArr; Display96x16x1WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFirst
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFinal
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteByte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawCentered
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Clear
</UL>

<P><STRONG><a name="[51]"></a>Display96x16x1DisplayOn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, display96x16x1.o(i.Display96x16x1DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display96x16x1DisplayOn &rArr; Display96x16x1WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFirst
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFinal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>

<P><STRONG><a name="[52]"></a>Display96x16x1Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, display96x16x1.o(i.Display96x16x1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display96x16x1Init &rArr; Display96x16x1DisplayOn &rArr; Display96x16x1WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1DisplayOn
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFirst
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFinal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteArray
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>Display96x16x1StringDraw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display96x16x1.o(i.Display96x16x1StringDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display96x16x1StringDraw &rArr; Display96x16x1StringDrawLen &rArr; Display96x16x1WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawLen
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpliciTIAddress
</UL>

<P><STRONG><a name="[43]"></a>Display96x16x1StringDrawCentered</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, display96x16x1.o(i.Display96x16x1StringDrawCentered))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Display96x16x1StringDrawCentered &rArr; Display96x16x1StringDrawLen &rArr; Display96x16x1WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1ClearLine
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawLen
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CycleDisplayString
</UL>

<P><STRONG><a name="[54]"></a>Display96x16x1StringDrawLen</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, display96x16x1.o(i.Display96x16x1StringDrawLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display96x16x1StringDrawLen &rArr; Display96x16x1WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFirst
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFinal
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteByte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawCentered
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDraw
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollTextBanner
</UL>

<P><STRONG><a name="[94]"></a>FlashUserGet</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash.o(i.FlashUserGet))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpliciTIAddress
</UL>

<P><STRONG><a name="[57]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2S
</UL>

<P><STRONG><a name="[58]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2S
</UL>

<P><STRONG><a name="[48]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
</UL>

<P><STRONG><a name="[56]"></a>GPIOPinTypeI2S</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2S))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeI2S
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[59]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>I2SIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s.o(i.I2SIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundIntHandler
</UL>

<P><STRONG><a name="[9c]"></a>I2SIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s.o(i.I2SIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundIntHandler
</UL>

<P><STRONG><a name="[9e]"></a>I2SMasterClockSelect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s.o(i.I2SMasterClockSelect))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>

<P><STRONG><a name="[9f]"></a>I2STxConfigSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2s.o(i.I2STxConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>

<P><STRONG><a name="[96]"></a>I2STxEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2s.o(i.I2STxEnable))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
</UL>

<P><STRONG><a name="[9a]"></a>I2STxFIFOLimitSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2s.o(i.I2STxFIFOLimitSet))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[5a]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>LED_Off</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, io.o(i.LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDsInit
</UL>

<P><STRONG><a name="[a2]"></a>LED_Toggle</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, io.o(i.LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleLED
</UL>

<P><STRONG><a name="[5b]"></a>LEDsInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, io.o(i.LEDsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEDsInit &rArr; LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>MRFI_DelayMs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, simplicitilib.o(i.MRFI_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MRFI_DelayMs &rArr; Mrfi_DelayUsec &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayFrame
</UL>

<P><STRONG><a name="[2d]"></a>MRFI_GpioIsr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, simplicitilib.o(i.MRFI_GpioIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MRFI_GpioIsr &rArr; Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GpioPort1Isr
</UL>

<P><STRONG><a name="[60]"></a>MRFI_Init</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, simplicitilib.o(i.MRFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MRFI_Init &rArr; MRFI_SetRFPwr &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[c7]"></a>MRFI_PostKillSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, simplicitilib.o(i.MRFI_PostKillSem))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
</UL>

<P><STRONG><a name="[76]"></a>MRFI_RandomByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, simplicitilib.o(i.MRFI_RandomByte))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[69]"></a>MRFI_Receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simplicitilib.o(i.MRFI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MRFI_Receive &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[6b]"></a>MRFI_Rssi</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, simplicitilib.o(i.MRFI_Rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MRFI_Rssi &rArr; mrfiSpiReadReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateRssi
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[7a]"></a>MRFI_RxAddrIsFiltered</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, simplicitilib.o(i.MRFI_RxAddrIsFiltered))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MRFI_RxAddrIsFiltered
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[6d]"></a>MRFI_RxCompleteISR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, simplicitilib.o(i.MRFI_RxCompleteISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[70]"></a>MRFI_RxIdle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, simplicitilib.o(i.MRFI_RxIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
</UL>

<P><STRONG><a name="[71]"></a>MRFI_RxOn</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, simplicitilib.o(i.MRFI_RxOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MRFI_RxOn &rArr; Mrfi_RxModeOn &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[65]"></a>MRFI_SetLogicalChannel</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, simplicitilib.o(i.MRFI_SetLogicalChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MRFI_SetLogicalChannel &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[66]"></a>MRFI_SetRFPwr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, simplicitilib.o(i.MRFI_SetRFPwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MRFI_SetRFPwr &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[73]"></a>MRFI_Sleep</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, simplicitilib.o(i.MRFI_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MRFI_Sleep &rArr; MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[74]"></a>MRFI_Transmit</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, simplicitilib.o(i.MRFI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteTxFifo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendAckReply
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_SendEmptyPollRspFrame
</UL>

<P><STRONG><a name="[77]"></a>MRFI_WakeUp</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, simplicitilib.o(i.MRFI_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MRFI_WakeUp &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[26]"></a>MotorDir</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, motor.o(i.MotorDir))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSpeedFromAccelReadings
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeTurnStart
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeStraightStart
</UL>

<P><STRONG><a name="[27]"></a>MotorRun</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor.o(i.MotorRun))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSpeedFromAccelReadings
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeTurnStart
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeStraightStart
</UL>

<P><STRONG><a name="[25]"></a>MotorSpeed</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, motor.o(i.MotorSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSpeedFromAccelReadings
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeTurnStart
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeStraightStart
</UL>

<P><STRONG><a name="[3e]"></a>MotorStop</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, motor.o(i.MotorStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorStop
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBotStop
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[78]"></a>MotorsInit</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, motor.o(i.MotorsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>PushButtonGetStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, io.o(i.PushButtonGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PushButtonGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[7b]"></a>SMPL_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, simplicitilib.o(i.SMPL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SMPL_Init &rArr; MRFI_Init &rArr; MRFI_SetRFPwr &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>SMPL_Ioctl</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, simplicitilib.o(i.SMPL_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setLinkToken
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setJoinToken
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinContext
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLinkToken
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getJoinToken
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpliciTIAddress
</UL>

<P><STRONG><a name="[3c]"></a>SMPL_LinkListen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, simplicitilib.o(i.SMPL_LinkListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SMPL_LinkListen &rArr; MRFI_Sleep &rArr; MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setListenContext
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[38]"></a>SMPL_Receive</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, simplicitilib.o(i.SMPL_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SMPL_Receive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForReceivedRadioPacket
</UL>

<P><STRONG><a name="[62]"></a>SSIBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(i.SSIBusy))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>

<P><STRONG><a name="[8d]"></a>SchedulerElapsedTicksCalc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scheduler.o(i.SchedulerElapsedTicksCalc))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerElapsedTicksGet
</UL>

<P><STRONG><a name="[3b]"></a>SchedulerElapsedTicksGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(i.SchedulerElapsedTicksGet))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerElapsedTicksCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerRun
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[8e]"></a>SchedulerInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.SchedulerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SchedulerInit &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>SchedulerRun</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, scheduler.o(i.SchedulerRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SchedulerRun
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerElapsedTicksGet
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>SchedulerSysTickIntHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scheduler.o(i.SchedulerSysTickIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SchedulerTaskDisable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scheduler.o(i.SchedulerTaskDisable))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBotStop
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationModeStart
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeStart
</UL>

<P><STRONG><a name="[37]"></a>SchedulerTaskEnable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, scheduler.o(i.SchedulerTaskEnable))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationModeStop
</UL>

<P><STRONG><a name="[28]"></a>SchedulerTickCountGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.SchedulerTickCountGet))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForReceivedRadioPacket
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeTurnStart
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeStraightStart
</UL>

<P><STRONG><a name="[93]"></a>SetSimpliciTIAddress</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, chronos_drive.o(i.SetSimpliciTIAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetSimpliciTIAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUserGet
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>SoundBufferPlay</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sound.o(i.SoundBufferPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SoundBufferPlay
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlayContinue
</UL>

<P><STRONG><a name="[97]"></a>SoundClassDDis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sound.o(i.SoundClassDDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SoundClassDDis &rArr; DACClassDDis &rArr; DACWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACClassDDis
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlayContinue
</UL>

<P><STRONG><a name="[98]"></a>SoundClassDEn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sound.o(i.SoundClassDEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SoundClassDEn &rArr; DACClassDEn &rArr; DACWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACClassDEn
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlayStart
</UL>

<P><STRONG><a name="[99]"></a>SoundInit</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sound.o(i.SoundInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SoundInit &rArr; DACInit &rArr; DACWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxFIFOLimitSet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxEnable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntClear
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2S
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>SoundIntHandler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sound.o(i.SoundIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SoundIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>SoundSetFormat</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, sound.o(i.SoundSetFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SoundSetFormat &rArr; SysCtlI2SMClkSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlI2SMClkSet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxConfigSet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SMasterClockSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveOpen
</UL>

<P><STRONG><a name="[49]"></a>SysCtlClockGet</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
</UL>

<P><STRONG><a name="[a1]"></a>SysCtlClockSet</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>SysCtlI2SMClkSet</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlI2SMClkSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlI2SMClkSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>

<P><STRONG><a name="[b5]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
</UL>

<P><STRONG><a name="[91]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
</UL>

<P><STRONG><a name="[8f]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
</UL>

<P><STRONG><a name="[a3]"></a>UARTStdioInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uartstdio.o(i.UARTStdioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTStdioInit &rArr; UARTStdioInitExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>UARTStdioInitExpClk</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uartstdio.o(i.UARTStdioInitExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTStdioInitExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInit
</UL>

<P><STRONG><a name="[29]"></a>UARTprintf</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, uartstdio.o(i.UARTprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpliciTIAddress
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputAccelerometerReadings
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationModeStop
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationModeStart
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeTurnStart
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeStraightStart
</UL>

<P><STRONG><a name="[a5]"></a>UARTwrite</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uartstdio.o(i.UARTwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>

<P><STRONG><a name="[41]"></a>WaveOpen</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, wav.o(i.WaveOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WaveOpen &rArr; SoundSetFormat &rArr; SysCtlI2SMClkSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundEffect
</UL>

<P><STRONG><a name="[40]"></a>WavePlayContinue</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, wav.o(i.WavePlayContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WavePlayContinue &rArr; SoundClassDDis &rArr; DACClassDDis &rArr; DACWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveRead
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundClassDDis
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundEffect
</UL>

<P><STRONG><a name="[42]"></a>WavePlayStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wav.o(i.WavePlayStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WavePlayStart &rArr; SoundClassDEn &rArr; DACClassDEn &rArr; DACWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundClassDEn
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSoundEffect
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[aa]"></a>isDupSandFFrame</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, simplicitilib.o(i.isDupSandFFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = isDupSandFFrame &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[f]"></a>main</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, chronos_drive.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; SetSimpliciTIAddress &rArr; SMPL_Ioctl &rArr; nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerRun
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDsInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawCentered
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Clear
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInit
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpliciTIAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[67]"></a>mrfiSpiCmdStrobe</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, simplicitilib.o(i.mrfiSpiCmdStrobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RxModeOff
</UL>

<P><STRONG><a name="[61]"></a>mrfiSpiInit</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, simplicitilib.o(i.mrfiSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mrfiSpiInit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[64]"></a>mrfiSpiReadReg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, simplicitilib.o(i.mrfiSpiReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mrfiSpiReadReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[79]"></a>mrfiSpiReadRxFifo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simplicitilib.o(i.mrfiSpiReadRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mrfiSpiReadRxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[63]"></a>mrfiSpiWriteReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplicitilib.o(i.mrfiSpiWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[75]"></a>mrfiSpiWriteTxFifo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simplicitilib.o(i.mrfiSpiWriteTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mrfiSpiWriteTxFifo &rArr; spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstFifoAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[b9]"></a>nwk_QInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[ba]"></a>nwk_QadjustOrder</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, simplicitilib.o(i.nwk_QadjustOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[bb]"></a>nwk_QfindOldest</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, simplicitilib.o(i.nwk_QfindOldest))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
</UL>

<P><STRONG><a name="[6e]"></a>nwk_QfindSlot</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, simplicitilib.o(i.nwk_QfindSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[bc]"></a>nwk_SendEmptyPollRspFrame</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, simplicitilib.o(i.nwk_SendEmptyPollRspFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[bd]"></a>nwk_allocateLocalRxPort</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, simplicitilib.o(i.nwk_allocateLocalRxPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nwk_allocateLocalRxPort &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[b0]"></a>nwk_buildFrame</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, simplicitilib.o(i.nwk_buildFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nwk_buildFrame &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>

<P><STRONG><a name="[d4]"></a>nwk_checkAppMsgTID</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_checkAppMsgTID))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[8b]"></a>nwk_checkConnInfo</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_checkConnInfo))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
</UL>

<P><STRONG><a name="[82]"></a>nwk_connectionControl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_connectionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_connectionControl &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[83]"></a>nwk_deviceAddress</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_deviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_deviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setMyAddress
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[c0]"></a>nwk_findAlreadyJoined</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, simplicitilib.o(i.nwk_findAlreadyJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwk_findAlreadyJoined &rArr; initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[af]"></a>nwk_findPeer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, simplicitilib.o(i.nwk_findPeer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_findPeer &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>

<P><STRONG><a name="[c1]"></a>nwk_frameInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, simplicitilib.o(i.nwk_frameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nwk_frameInit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[8a]"></a>nwk_getConnInfo</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_getConnInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
</UL>

<P><STRONG><a name="[80]"></a>nwk_getJoinToken</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_getJoinToken))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[7f]"></a>nwk_getLinkToken</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_getLinkToken))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[89]"></a>nwk_getLocalLinkID</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, simplicitilib.o(i.nwk_getLocalLinkID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_getLocalLinkID
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setListenContext
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>

<P><STRONG><a name="[be]"></a>nwk_getMyAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_getMyAddress))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
</UL>

<P><STRONG><a name="[c2]"></a>nwk_getNextConnection</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_getNextConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nwk_getNextConnection &rArr; initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[c3]"></a>nwk_getNumObjectFromMsg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_getNumObjectFromMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_getNumObjectFromMsg &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[b4]"></a>nwk_getQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_getQ))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
</UL>

<P><STRONG><a name="[c5]"></a>nwk_getSandFFrame</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, simplicitilib.o(i.nwk_getSandFFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nwk_getSandFFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getQ
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[ce]"></a>nwk_globalsInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_globalsInit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[ab]"></a>nwk_isConnectionValid</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, simplicitilib.o(i.nwk_isConnectionValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendAckReply
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[c8]"></a>nwk_isLinkDuplicate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, simplicitilib.o(i.nwk_isLinkDuplicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_isLinkDuplicate &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[a9]"></a>nwk_isSandFClient</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, simplicitilib.o(i.nwk_isSandFClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_isSandFClient &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[c9]"></a>nwk_isValidReply</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_isValidReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nwk_isValidReply &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
</UL>

<P><STRONG><a name="[87]"></a>nwk_joinContext</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, simplicitilib.o(i.nwk_joinContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nwk_joinContext
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setJoinContext
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[cb]"></a>nwk_joinInit</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, simplicitilib.o(i.nwk_joinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nwk_joinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setLinkToken
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[cc]"></a>nwk_linkInit</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, simplicitilib.o(i.nwk_linkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nwk_linkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[cd]"></a>nwk_mgmtInit</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, simplicitilib.o(i.nwk_mgmtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nwk_mgmtInit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[7c]"></a>nwk_nwkInit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, simplicitilib.o(i.nwk_nwkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_nwkInit &rArr; nwk_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_globalsInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[cf]"></a>nwk_pingInit</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, simplicitilib.o(i.nwk_pingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nwk_pingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[16]"></a>nwk_processFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_processFreq))
<BR>[Address Reference Count : 1]<UL><LI> simplicitilib.o(.constdata)
</UL>
<P><STRONG><a name="[14]"></a>nwk_processJoin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, simplicitilib.o(i.nwk_processJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nwk_processJoin &rArr; smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplicitilib.o(.constdata)
</UL>
<P><STRONG><a name="[13]"></a>nwk_processLink</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_processLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nwk_processLink &rArr; handleLinkRequest &rArr; smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplicitilib.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>nwk_processMgmt</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_processMgmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nwk_processMgmt &rArr; send_poll_reply &rArr; nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplicitilib.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>nwk_processPing</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_processPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nwk_processPing &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplicitilib.o(.constdata)
</UL>
<P><STRONG><a name="[15]"></a>nwk_processSecurity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_processSecurity))
<BR>[Address Reference Count : 1]<UL><LI> simplicitilib.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>nwk_putNumObjectIntoMsg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, simplicitilib.o(i.nwk_putNumObjectIntoMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_putNumObjectIntoMsg &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[86]"></a>nwk_radioControl</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, simplicitilib.o(i.nwk_radioControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nwk_radioControl &rArr; MRFI_Sleep &rArr; MRFI_RxIdle &rArr; Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[84]"></a>nwk_rawReceive</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, simplicitilib.o(i.nwk_rawReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[85]"></a>nwk_rawSend</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_rawSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[ac]"></a>nwk_replayFrame</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_replayFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nwk_replayFrame &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[8c]"></a>nwk_retrieveFrame</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, simplicitilib.o(i.nwk_retrieveFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
</UL>

<P><STRONG><a name="[d3]"></a>nwk_saveJoinedDevice</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, simplicitilib.o(i.nwk_saveJoinedDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_saveJoinedDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[c6]"></a>nwk_sendAckReply</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, simplicitilib.o(i.nwk_sendAckReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nwk_sendAckReply &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
</UL>

<P><STRONG><a name="[b1]"></a>nwk_sendFrame</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, simplicitilib.o(i.nwk_sendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayFrame
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>

<P><STRONG><a name="[ca]"></a>nwk_setJoinContext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_setJoinContext))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinContext
</UL>

<P><STRONG><a name="[81]"></a>nwk_setJoinToken</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_setJoinToken))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[7e]"></a>nwk_setLinkToken</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_setLinkToken))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[88]"></a>nwk_setListenContext</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_setListenContext))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
</UL>

<P><STRONG><a name="[bf]"></a>nwk_setMyAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, simplicitilib.o(i.nwk_setMyAddress))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
</UL>

<P><STRONG><a name="[24]"></a>urand</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ustdlib.o(i.urand))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeTurnStart
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeStraightStart
</UL>

<P><STRONG><a name="[35]"></a>usnprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ustdlib.o(i.usnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usnprintf &rArr; uvsnprintf &rArr; ustrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSpeedFromAccelReadings
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationModeStop
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationModeStart
</UL>

<P><STRONG><a name="[d6]"></a>ustrncpy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ustdlib.o(i.ustrncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ustrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[d5]"></a>uvsnprintf</STRONG> (Thumb, 578 bytes, Stack size 36 bytes, ustdlib.o(i.uvsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uvsnprintf &rArr; ustrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[21]"></a>AutonomousModeStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, chronos_drive.o(i.AutonomousModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AutonomousModeStart
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerTaskDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[23]"></a>AutonomousModeStraightStart</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, chronos_drive.o(i.AutonomousModeStraightStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AutonomousModeStraightStart &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urand
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerTickCountGet
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[2a]"></a>AutonomousModeTurnStart</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, chronos_drive.o(i.AutonomousModeTurnStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AutonomousModeTurnStart &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urand
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerTickCountGet
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[33]"></a>CalibrationModeStart</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, chronos_drive.o(i.CalibrationModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CalibrationModeStart &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerTaskDisable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBotStop
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[36]"></a>CalibrationModeStop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, chronos_drive.o(i.CalibrationModeStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CalibrationModeStop &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerTaskEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[7]"></a>CheckForReceivedRadioPacket</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, chronos_drive.o(i.CheckForReceivedRadioPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CheckForReceivedRadioPacket &rArr; SMPL_Receive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerTickCountGet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chronos_drive.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>CheckForStateChange</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, chronos_drive.o(i.CheckForStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CheckForStateChange &rArr; AutonomousModeStraightStart &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerTaskEnable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerTaskDisable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerElapsedTicksGet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushButtonGetStatus
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorGetStatus
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateToString
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBotStop
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationModeStop
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationModeStart
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeTurnStart
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeStraightStart
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutonomousModeStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chronos_drive.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>CheckSoundEffect</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, chronos_drive.o(i.CheckSoundEffect))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CheckSoundEffect &rArr; WaveOpen &rArr; SoundSetFormat &rArr; SysCtlI2SMClkSet
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlayStart
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlayContinue
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveOpen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chronos_drive.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>CycleDisplayString</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, chronos_drive.o(i.CycleDisplayString))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CycleDisplayString &rArr; Display96x16x1StringDrawCentered &rArr; Display96x16x1StringDrawLen &rArr; Display96x16x1WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawCentered
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chronos_drive.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>EvalBotStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chronos_drive.o(i.EvalBotStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EvalBotStop &rArr; MotorStop
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerTaskDisable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationModeStart
</UL>

<P><STRONG><a name="[a6]"></a>NormalizeReading</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, chronos_drive.o(i.NormalizeReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NormalizeReading
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSpeedFromAccelReadings
</UL>

<P><STRONG><a name="[4]"></a>OutputAccelerometerReadings</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chronos_drive.o(i.OutputAccelerometerReadings))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OutputAccelerometerReadings &rArr; UARTprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chronos_drive.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ReceiveCallback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, chronos_drive.o(i.ReceiveCallback))
<BR>[Address Reference Count : 1]<UL><LI> chronos_drive.o(i.main)
</UL>
<P><STRONG><a name="[0]"></a>ScrollTextBanner</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, chronos_drive.o(i.ScrollTextBanner))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ScrollTextBanner &rArr; Display96x16x1StringDrawLen &rArr; Display96x16x1WriteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawLen
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chronos_drive.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>StateToString</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, chronos_drive.o(i.StateToString))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForStateChange
</UL>

<P><STRONG><a name="[2]"></a>ToggleLED</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, chronos_drive.o(i.ToggleLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ToggleLED &rArr; LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chronos_drive.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>UpdateSpeedFromAccelReadings</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, chronos_drive.o(i.UpdateSpeedFromAccelReadings))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UpdateSpeedFromAccelReadings &rArr; usnprintf &rArr; uvsnprintf &rArr; ustrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeReading
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chronos_drive.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>DACReadRegister</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, dac.o(i.DACReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DACReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACInit
</UL>

<P><STRONG><a name="[45]"></a>DACWriteRegister</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, dac.o(i.DACWriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DACWriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACClassDEn
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACClassDDis
</UL>

<P><STRONG><a name="[4e]"></a>Display96x16x1WriteArray</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, display96x16x1.o(i.Display96x16x1WriteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display96x16x1WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1DisplayOn
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1ClearLine
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawLen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>

<P><STRONG><a name="[4f]"></a>Display96x16x1WriteByte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, display96x16x1.o(i.Display96x16x1WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display96x16x1WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1ClearLine
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawLen
</UL>

<P><STRONG><a name="[50]"></a>Display96x16x1WriteFinal</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, display96x16x1.o(i.Display96x16x1WriteFinal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display96x16x1WriteFinal
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1DisplayOn
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1ClearLine
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawLen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>

<P><STRONG><a name="[4d]"></a>Display96x16x1WriteFirst</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, display96x16x1.o(i.Display96x16x1WriteFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display96x16x1WriteFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1DisplayOn
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1ClearLine
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDrawLen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>

<P><STRONG><a name="[6c]"></a>Mrfi_CalculateRssi</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, simplicitilib.o(i.Mrfi_CalculateRssi))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[5e]"></a>Mrfi_DelayUsec</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, simplicitilib.o(i.Mrfi_DelayUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mrfi_DelayUsec &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
</UL>

<P><STRONG><a name="[68]"></a>Mrfi_RxModeOff</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, simplicitilib.o(i.Mrfi_RxModeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mrfi_RxModeOff &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxIdle
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[72]"></a>Mrfi_RxModeOn</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, simplicitilib.o(i.Mrfi_RxModeOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mrfi_RxModeOn &rArr; mrfiSpiCmdStrobe
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
</UL>

<P><STRONG><a name="[5f]"></a>Mrfi_SyncPinRxIsr</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, simplicitilib.o(i.Mrfi_SyncPinRxIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Mrfi_SyncPinRxIsr &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadRxFifo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiCmdStrobe
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxAddrIsFiltered
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateRssi
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
</UL>

<P><STRONG><a name="[6f]"></a>dispatchFrame</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, simplicitilib.o(i.dispatchFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayFrame
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[ad]"></a>handleLinkRequest</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, simplicitilib.o(i.handleLinkRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = handleLinkRequest &rArr; smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findPeer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
</UL>

<P><STRONG><a name="[b2]"></a>initializeConnection</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, simplicitilib.o(i.initializeConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
</UL>

<P><STRONG><a name="[b3]"></a>map_lid2idx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, simplicitilib.o(i.map_lid2idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>

<P><STRONG><a name="[d1]"></a>send_poll_reply</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, simplicitilib.o(i.send_poll_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = send_poll_reply &rArr; nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkAppMsgTID
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_SendEmptyPollRspFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
</UL>

<P><STRONG><a name="[d0]"></a>smpl_send_join_reply</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, simplicitilib.o(i.smpl_send_join_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_saveJoinedDevice
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLinkToken
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
</UL>

<P><STRONG><a name="[ae]"></a>smpl_send_link_reply</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, simplicitilib.o(i.smpl_send_link_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; mrfiSpiWriteReg &rArr; spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>

<P><STRONG><a name="[b8]"></a>spiBurstFifoAccess</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, simplicitilib.o(i.spiBurstFifoAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spiBurstFifoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteTxFifo
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadRxFifo
</UL>

<P><STRONG><a name="[b7]"></a>spiRegAccess</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, simplicitilib.o(i.spiRegAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spiRegAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUprimask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiWriteReg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiReadReg
</UL>

<P><STRONG><a name="[9]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BufferCallback</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wav.o(i.BufferCallback))
<BR>[Address Reference Count : 1]<UL><LI> wav.o(i.WavePlayContinue)
</UL>
<P><STRONG><a name="[a7]"></a>WaveRead</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, wav.o(i.WaveRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WaveRead
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlayContinue
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
