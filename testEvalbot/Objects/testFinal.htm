<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\testFinal.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\testFinal.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Nov 25 20:36:53 2015
<BR><P>
<H3>Maximum Stack Usage =        188 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; motor_STOP &rArr; MotorStop &rArr; GPIOPinTypeGPIOOutput
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">UARTCharPut</a><BR>
 <LI><a href="#[2b]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">UARTConfigSetExpClk</a><BR>
 <LI><a href="#[d]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysCtlDelay</a><BR>
 <LI><a href="#[29]">UARTCharGet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">UARTCharGet</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup.o(RESET) referenced 120 times from startup.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">WheelSensorIntHandler</a> from sensors.o(i.WheelSensorIntHandler) referenced from startup.o(RESET)
 <LI><a href="#[6]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[7]">bump_interuptFunction</a> from capteur.o(i.bump_interuptFunction) referenced from capteur.o(i.bump_init)
 <LI><a href="#[5]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[8]">wheel_interuptFunction</a> from capteur.o(i.wheel_interuptFunction) referenced from capteur.o(i.wheel_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[4a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[d]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[51]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>BumpSensorsInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sensors.o(i.BumpSensorsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BumpSensorsInit &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bump_init
</UL>

<P><STRONG><a name="[40]"></a>BumpSensorsInterupEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensors.o(i.BumpSensorsInterupEnable))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bump_init
</UL>

<P><STRONG><a name="[13]"></a>BumperEnableSide</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sensors.o(i.BumperEnableSide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BumperEnableSide
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bump_init
</UL>

<P><STRONG><a name="[15]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>

<P><STRONG><a name="[33]"></a>GPIOIntTypeSet</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
</UL>

<P><STRONG><a name="[12]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInit
</UL>

<P><STRONG><a name="[24]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_init
</UL>

<P><STRONG><a name="[2e]"></a>GPIOPinIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntEnable
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntHandler
</UL>

<P><STRONG><a name="[32]"></a>GPIOPinIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
</UL>

<P><STRONG><a name="[14]"></a>GPIOPinIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntEnable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumperEnableSide
</UL>

<P><STRONG><a name="[2f]"></a>GPIOPinIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntHandler
</UL>

<P><STRONG><a name="[30]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntHandler
</UL>

<P><STRONG><a name="[11]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInit
</UL>

<P><STRONG><a name="[16]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
</UL>

<P><STRONG><a name="[17]"></a>GPIOPinTypePWM</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
</UL>

<P><STRONG><a name="[18]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_init
</UL>

<P><STRONG><a name="[1a]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorEnable
</UL>

<P><STRONG><a name="[34]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
</UL>

<P><STRONG><a name="[19]"></a>MotorDir</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, motor.o(i.MotorDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_UP
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_RIGHT
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_LEFT
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_DOWN
</UL>

<P><STRONG><a name="[1b]"></a>MotorRun</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, motor.o(i.MotorRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MotorRun &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_UP
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_RIGHT
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_LEFT
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_DOWN
</UL>

<P><STRONG><a name="[1c]"></a>MotorSpeed</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, motor.o(i.MotorSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorSpeed &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputInvert
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[21]"></a>MotorStop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, motor.o(i.MotorStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MotorStop &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_STOP
</UL>

<P><STRONG><a name="[22]"></a>MotorsInit</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, motor.o(i.MotorsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MotorsInit &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[25]"></a>PWMGenConfigure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[27]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[26]"></a>PWMGenPeriodSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[1e]"></a>PWMOutputInvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputInvert))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
</UL>

<P><STRONG><a name="[1d]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
</UL>

<P><STRONG><a name="[20]"></a>PWMPulseWidthSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
</UL>

<P><STRONG><a name="[1f]"></a>SysCtlClockGet</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_init
</UL>

<P><STRONG><a name="[28]"></a>SysCtlClockSet</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_init
</UL>

<P><STRONG><a name="[23]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPWMClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[10]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_init
</UL>

<P><STRONG><a name="[29]"></a>UARTCharGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharGet))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_get
</UL>

<P><STRONG><a name="[2a]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_set
</UL>

<P><STRONG><a name="[2b]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_init
</UL>

<P><STRONG><a name="[2c]"></a>WheelSensorEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sensors.o(i.WheelSensorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WheelSensorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_init
</UL>

<P><STRONG><a name="[2d]"></a>WheelSensorIntEnable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sensors.o(i.WheelSensorIntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WheelSensorIntEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_init
</UL>

<P><STRONG><a name="[4]"></a>WheelSensorIntHandler</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, sensors.o(i.WheelSensorIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WheelSensorIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntStatus
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>WheelSensorsInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sensors.o(i.WheelSensorsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WheelSensorsInit &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntDisable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_init
</UL>

<P><STRONG><a name="[35]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[52]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[41]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bump_interuptFunction
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_STOP
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[54]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[55]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3a]"></a>actionInt</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, capteur.o(i.actionInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = actionInt &rArr; motor_UP &rArr; MotorRun &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_UP
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_RIGHT
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_LEFT
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_DOWN
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bump_interuptFunction
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>bump_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, capteur.o(i.bump_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bump_init &rArr; BumpSensorsInit &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumperEnableSide
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInterupEnable
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>bump_interuptFunction</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, capteur.o(i.bump_interuptFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bump_interuptFunction &rArr; actionInt &rArr; motor_UP &rArr; MotorRun &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_DOWN
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_setString
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionInt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> capteur.o(i.bump_init)
</UL>
<P><STRONG><a name="[5]"></a>main</STRONG> (Thumb, 152 bytes, Stack size 120 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = main &rArr; motor_STOP &rArr; MotorStop &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_STOP
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_setString
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_get
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bump_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionInt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[43]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>mess_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, message.o(i.mess_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mess_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>mess_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, message.o(i.mess_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mess_init &rArr; SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>mess_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, message.o(i.mess_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mess_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_setString
</UL>

<P><STRONG><a name="[42]"></a>mess_setString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, message.o(i.mess_setString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mess_setString &rArr; mess_set
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bump_interuptFunction
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_STOP
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>motor_DOWN</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, motor_my.o(i.motor_DOWN))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = motor_DOWN &rArr; MotorRun &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bump_interuptFunction
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionInt
</UL>

<P><STRONG><a name="[3d]"></a>motor_LEFT</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, motor_my.o(i.motor_LEFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = motor_LEFT &rArr; MotorRun &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionInt
</UL>

<P><STRONG><a name="[3e]"></a>motor_RIGHT</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, motor_my.o(i.motor_RIGHT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = motor_RIGHT &rArr; MotorRun &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionInt
</UL>

<P><STRONG><a name="[47]"></a>motor_STOP</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, motor_my.o(i.motor_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = motor_STOP &rArr; MotorStop &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_setString
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_interuptFunction
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>motor_UP</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, motor_my.o(i.motor_UP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = motor_UP &rArr; MotorRun &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionInt
</UL>

<P><STRONG><a name="[44]"></a>motor_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motor_my.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = motor_init &rArr; MotorSpeed &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>wheel_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, capteur.o(i.wheel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wheel_init &rArr; WheelSensorsInit &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntEnable
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>wheel_interuptFunction</STRONG> (Thumb, 466 bytes, Stack size 8 bytes, capteur.o(i.wheel_interuptFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wheel_interuptFunction &rArr; motor_STOP &rArr; MotorStop &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_STOP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> capteur.o(i.wheel_init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[39]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[37]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
