<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Carto.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Carto.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Mon Nov 23 18:08:25 2015
<BR><P>
<H3>Maximum Stack Usage =         76 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Carto_order_interprete &rArr; Carto_order_actualise &rArr; Carto_evalbot_update_data &rArr; Carto_map_set &rArr; Carto_map_getSubMap
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5a]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">UARTConfigSetExpClk</a><BR>
 <LI><a href="#[a]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysCtlDelay</a><BR>
 <LI><a href="#[53]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">UARTCharPut</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup.o(RESET) referenced 120 times from startup.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">WheelSensorIntHandler</a> from sensors.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[41]">interuptFunctionBump</a> from carto.o(.text) referenced from carto.o(.text)
 <LI><a href="#[43]">interuptFunctionWheel</a> from carto.o(.text) referenced from carto.o(.text)
 <LI><a href="#[5]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[71]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[72]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[73]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[74]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[75]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[76]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[5]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = main &rArr; Carto_order_interprete &rArr; Carto_order_actualise &rArr; Carto_evalbot_update_data &rArr; Carto_map_set &rArr; Carto_map_getSubMap
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_interprete
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_build
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_add
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10]"></a>MotorsInit</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MotorsInit &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[1e]"></a>MotorDir</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_interprete
</UL>

<P><STRONG><a name="[1f]"></a>MotorRun</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MotorRun &rArr; GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_interprete
</UL>

<P><STRONG><a name="[21]"></a>MotorStop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MotorStop &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_interprete
</UL>

<P><STRONG><a name="[22]"></a>MotorSpeed</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorSpeed &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputInvert
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[24]"></a>BumpSensorsInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BumpSensorsInit &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[42]"></a>BumpSensorsInterupEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensors.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[25]"></a>BumperEnableSide</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BumperEnableSide
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[27]"></a>BumpSensorGetStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sensors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>

<P><STRONG><a name="[29]"></a>BumpSensorDebouncer</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sensors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>

<P><STRONG><a name="[77]"></a>BumpSensorGetDebounced</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sensors.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>WheelSensorsInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WheelSensorsInit &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntDisable
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[2e]"></a>WheelSensorEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WheelSensorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[2f]"></a>WheelSensorDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sensors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[30]"></a>WheelSensorIntEnable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WheelSensorIntEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[32]"></a>WheelSensorIntDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sensors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntDisable
</UL>

<P><STRONG><a name="[4]"></a>WheelSensorIntHandler</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WheelSensorIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntStatus
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>interuptFunctionWheel</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, carto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> carto.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>interuptFunctionBump</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, carto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> carto.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>Carto_order_free_one</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Carto_order_free_one &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_actualise
</UL>

<P><STRONG><a name="[36]"></a>Carto_order_free_list</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Carto_order_free_list &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_actualise
</UL>

<P><STRONG><a name="[d]"></a>Carto_order_build</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Carto_order_build &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getORDER
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carto_evalbot_rotation
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_actualise
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>Carto_order_add</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, carto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getORDER
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_actualise
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>Carto_data_change</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Carto_data_change
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_set
</UL>

<P><STRONG><a name="[39]"></a>Carto_map_getSubMap</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Carto_map_getSubMap
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_get
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_addsubmap
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_set
</UL>

<P><STRONG><a name="[38]"></a>Carto_map_set</STRONG> (Thumb, 110 bytes, Stack size 36 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Carto_map_set &rArr; Carto_map_getSubMap
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_getSubMap
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_data_change
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_update_data
</UL>

<P><STRONG><a name="[3b]"></a>Carto_evalbot_update_data</STRONG> (Thumb, 508 bytes, Stack size 8 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Carto_evalbot_update_data &rArr; Carto_map_set &rArr; Carto_map_getSubMap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_actualise
</UL>

<P><STRONG><a name="[3c]"></a>Carto_order_actualise</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Carto_order_actualise &rArr; Carto_evalbot_update_data &rArr; Carto_map_set &rArr; Carto_map_getSubMap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_update_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_free_list
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_free_one
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_build
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_interprete
</UL>

<P><STRONG><a name="[45]"></a>Carto_data_split</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, carto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_get
</UL>

<P><STRONG><a name="[3f]"></a>Carto_data_merge</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Carto_data_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_subMap_build
</UL>

<P><STRONG><a name="[3d]"></a>Carto_map_addsubmap</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Carto_map_addsubmap &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_getSubMap
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[3e]"></a>Carto_subMap_build</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Carto_subMap_build &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_data_merge
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[40]"></a>Carto_cons_Poss</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Carto_cons_Poss &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[c]"></a>Carto_InitCarto</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Carto_InitCarto &rArr; Carto_subMap_build &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_cons_Poss
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_subMap_build
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_addsubmap
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntEnable
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorEnable
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumperEnableSide
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInterupEnable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInit
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>Carto_GoTo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, carto.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>Carto_Scan</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, carto.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>Carto_map_get</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, carto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_data_split
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_getSubMap
</UL>

<P><STRONG><a name="[f]"></a>Carto_order_interprete</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, carto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Carto_order_interprete &rArr; Carto_order_actualise &rArr; Carto_evalbot_update_data &rArr; Carto_map_set &rArr; Carto_map_getSubMap
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_actualise
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>isScan</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, carto.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>Carto_evalbot_scan</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, carto.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>carto_evalbot_rotation</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, carto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_build
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carto_evalbot_generate_instruction
</UL>

<P><STRONG><a name="[47]"></a>carto_evalbot_generate_instruction</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, carto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;carto_evalbot_rotation
</UL>

<P><STRONG><a name="[48]"></a>Carto_evalbot_spiral</STRONG> (Thumb, 468 bytes, Stack size 72 bytes, carto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[52]"></a>uartPutChar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, xbee_protoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartPutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Send_Message
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
</UL>

<P><STRONG><a name="[54]"></a>UARTCharPutProtoc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Send_Message
</UL>

<P><STRONG><a name="[55]"></a>Xbee_mess_build</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Rece_Message
</UL>

<P><STRONG><a name="[57]"></a>Xbee_fifo_build</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xbee_protoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Xbee_fifo_build &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
</UL>

<P><STRONG><a name="[b]"></a>Xbee_protoc_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xbee_protoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Xbee_protoc_init &rArr; Xbee_fifo_build &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_fifo_build
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutChar
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>Xbee_Add_Message</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Rece_Message
</UL>

<P><STRONG><a name="[64]"></a>Xbee_Get_Message</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Send_Message
</UL>

<P><STRONG><a name="[5c]"></a>Xbee_Pop_Message</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Send_Message
</UL>

<P><STRONG><a name="[5d]"></a>uartPutString</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Send_Message
</UL>

<P><STRONG><a name="[5e]"></a>uartgetChar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getORDER
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Rece_Message
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_uartGetString
</UL>

<P><STRONG><a name="[60]"></a>Xbee_uartGetString</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartgetChar
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Rece_Message
</UL>

<P><STRONG><a name="[61]"></a>Xbee_Rece_Message</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_uartGetString
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartgetChar
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Add_Message
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_mess_build
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[62]"></a>Xbee_Dest_Message</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Send_Message
</UL>

<P><STRONG><a name="[63]"></a>Xbee_Send_Message</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Dest_Message
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutString
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Pop_Message
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Get_Message
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutProtoc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutChar
</UL>

<P><STRONG><a name="[65]"></a>getORDER</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartgetChar
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_build
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_add
</UL>

<P><STRONG><a name="[66]"></a>test</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xbee_protoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartgetChar
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutChar
</UL>

<P><STRONG><a name="[56]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_mess_build
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[7d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[69]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6c]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[80]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[2c]"></a>GPIOIntTypeSet</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
</UL>

<P><STRONG><a name="[1b]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInit
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[13]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
</UL>

<P><STRONG><a name="[31]"></a>GPIOPinIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntEnable
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntHandler
</UL>

<P><STRONG><a name="[2b]"></a>GPIOPinIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntDisable
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
</UL>

<P><STRONG><a name="[26]"></a>GPIOPinIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntEnable
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumperEnableSide
</UL>

<P><STRONG><a name="[33]"></a>GPIOPinIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntHandler
</UL>

<P><STRONG><a name="[28]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorDebouncer
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorGetStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorIntHandler
</UL>

<P><STRONG><a name="[1a]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[1c]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[20]"></a>GPIOPinTypePWM</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRun
</UL>

<P><STRONG><a name="[59]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
</UL>

<P><STRONG><a name="[1d]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorDisable
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorEnable
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStop
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDir
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[2d]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
</UL>

<P><STRONG><a name="[14]"></a>PWMGenConfigure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[19]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[16]"></a>PWMGenPeriodSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[23]"></a>PWMOutputInvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputInvert))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
</UL>

<P><STRONG><a name="[18]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[17]"></a>PWMPulseWidthSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[15]"></a>SysCtlClockGet</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
</UL>

<P><STRONG><a name="[58]"></a>SysCtlClockSet</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
</UL>

<P><STRONG><a name="[12]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPWMClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
</UL>

<P><STRONG><a name="[11]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelSensorsInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BumpSensorsInit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorsInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
</UL>

<P><STRONG><a name="[5f]"></a>UARTCharGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartgetChar
</UL>

<P><STRONG><a name="[53]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartgetChar
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutProtoc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutChar
</UL>

<P><STRONG><a name="[5a]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
</UL>

<P><STRONG><a name="[81]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[83]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[70]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[4d]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
</UL>

<P><STRONG><a name="[35]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Dest_Message
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Rece_Message
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Pop_Message
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_free_list
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_free_one
</UL>

<P><STRONG><a name="[37]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_uartGetString
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_Add_Message
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_fifo_build
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_mess_build
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_cons_Poss
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_subMap_build
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_map_addsubmap
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xbee_protoc_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_order_build
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_InitCarto
</UL>

<P><STRONG><a name="[4a]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carto_evalbot_spiral
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
